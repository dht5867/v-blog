{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/2.jpg","path":"img/2.jpg","modified":0,"renderable":0},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/1.jpg","path":"img/1.jpg","modified":0,"renderable":0},{"_id":"source/img/ker1.jpg","path":"img/ker1.jpg","modified":0,"renderable":0},{"_id":"source/img/3.jpg","path":"img/3.jpg","modified":0,"renderable":0},{"_id":"themes/aircloud/source/css/aircloud.css","path":"css/aircloud.css","modified":0,"renderable":1},{"_id":"themes/aircloud/source/css/aircloud.css.map","path":"css/aircloud.css.map","modified":0,"renderable":1},{"_id":"themes/aircloud/source/css/aircloud.less","path":"css/aircloud.less","modified":0,"renderable":1},{"_id":"themes/aircloud/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/aircloud/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"source/img/kds.jpg","path":"img/kds.jpg","modified":0,"renderable":0},{"_id":"themes/aircloud/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"source/img/donate.jpg","path":"img/donate.jpg","modified":0,"renderable":0},{"_id":"source/img/kd.jpg","path":"img/kd.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/aircloud/_config.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561447144552},{"_id":"source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561441899578},{"_id":"themes/aircloud/.gitignore","hash":"5a4a925cfd624633dafaacaced416c8d7272dcef","modified":1561280195564},{"_id":"themes/aircloud/LICENSE","hash":"218b4bf797149a2751a015812a9adefe368185c1","modified":1561280195564},{"_id":"themes/aircloud/readme-en.md","hash":"2903b1e9db12cd72ed6f8c10be14cd7f6afd82cf","modified":1561280195567},{"_id":"themes/aircloud/readme.md","hash":"4be1fc64bd1dc335a986a39594564e89bd7eba43","modified":1561280195567},{"_id":"themes/aircloud/layout/catagory.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561280195566},{"_id":"themes/aircloud/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561280195567},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561448592902},{"_id":"source/_posts/git学习教程.md","hash":"62aea4d122df83b6910d8c9e4e10b13da1aadf41","modified":1562063822121},{"_id":"source/_posts/linux常用指令.md","hash":"2087d9ce152a7f654d51bd630b1e30ff4bd88436","modified":1562222958808},{"_id":"source/_posts/nginx离线安装过程.md","hash":"a61e54e7b0e58074415bb80b199aeb62319dabb8","modified":1562065566850},{"_id":"source/_posts/shaingjdbc分库分表.md","hash":"1d64e2f37291967a5b67d0a708315defdbc2fbb7","modified":1562221268597},{"_id":"source/_posts/springboot中文乱码问题.md","hash":"fcbcd014f2ff88444385b6af64d2f234e8db065c","modified":1562061433995},{"_id":"source/_posts/springboot多数据源切换注解方式.md","hash":"83d54088ce2e781fd73969db547edd9670075ed7","modified":1562220017564},{"_id":"source/_posts/springboot项目混淆方案.md","hash":"754b02b93b39c0c0968ee2a5042d49f3f8970d7c","modified":1562060597657},{"_id":"source/_posts/windows批处理操作指令.md","hash":"7424cd38c571dda17b781107eb23fef70a8960e5","modified":1562221237466},{"_id":"source/_posts/学习使我快乐.md","hash":"c744ce225a71fb994ff95938f16a224cf88e3918","modified":1562065138765},{"_id":"source/_posts/过滤器、拦截器、监听器区别.md","hash":"07b8234ca9965fdb68d19c608742bf3525d7e0c1","modified":1562225343161},{"_id":"source/about/index.md","hash":"59d649abfd1e41fece216bda5e7fc24b4fbd2713","modified":1562055849103},{"_id":"source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561282410519},{"_id":"source/img/2.jpg","hash":"2f5b0345c366a264ed5b685e464a84e592ac0017","modified":1561281639568},{"_id":"source/img/avatar.png","hash":"48a406e2445f259c339bfe102fdbfd4bd760d9ad","modified":1539583813497},{"_id":"source/img/favicon.ico","hash":"48a406e2445f259c339bfe102fdbfd4bd760d9ad","modified":1539583813497},{"_id":"themes/aircloud/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1561280195558},{"_id":"source/tags/index.md","hash":"4e3dfcd992b0772a4b8b034fe41ead1cc7ce9903","modified":1561446031170},{"_id":"themes/aircloud/.git/config","hash":"1a823c723d63e45d231cc452a05a93c5f4b5d8d3","modified":1561280195560},{"_id":"themes/aircloud/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1561280185281},{"_id":"themes/aircloud/.git/index","hash":"56db48a9e08ca26c9d2cd1b438fbe5a316dc12b4","modified":1561778516374},{"_id":"themes/aircloud/.git/packed-refs","hash":"beaba836ac1d1ab36f2e62ee2bd7ba7b0d805f13","modified":1561280195557},{"_id":"themes/aircloud/languages/en.yml","hash":"f3dd50ca369974ac7d335fb1cfabf4ebb04a64fa","modified":1561280195565},{"_id":"themes/aircloud/languages/zh.yml","hash":"9ffaff1f5d240c94e44f9ef3b02bbae146af0dd4","modified":1561280195565},{"_id":"themes/aircloud/layout/404.ejs","hash":"8a30233a7b99831bd771121b5f450aaba412e8d5","modified":1561280195565},{"_id":"themes/aircloud/layout/about.ejs","hash":"cec034166ce08d2f8c961178e07b2f0ceac95cf2","modified":1561280195566},{"_id":"themes/aircloud/layout/archive.ejs","hash":"0f8a062f4f2f0648b23bd8c4a21945a6ca60dc1f","modified":1561280195566},{"_id":"themes/aircloud/layout/index.ejs","hash":"09e2407d615be7fe7ac41d11df3b7026e7393080","modified":1561280195566},{"_id":"themes/aircloud/layout/layout.ejs","hash":"7efd113aee90e698e187d0ea1f0b42a1c00d210e","modified":1561280195567},{"_id":"themes/aircloud/layout/post.ejs","hash":"2eb5fc0c2bb801528c3db3b09e6cb4d073e3ad99","modified":1561447473314},{"_id":"themes/aircloud/layout/tags.ejs","hash":"1a174d9213d25d9bf6ef28aabdaea6661cdd88c8","modified":1561280195567},{"_id":"source/img/1.jpg","hash":"f667d88d44741ff7b92ee9db5f1994bbcc05311c","modified":1561281639567},{"_id":"source/img/ker1.jpg","hash":"708e619ae0ad4524c41665f9930d3b8240d9ddcd","modified":1561281639582},{"_id":"themes/aircloud/source/_less/about.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561280195568},{"_id":"themes/aircloud/source/_less/about.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561280195568},{"_id":"themes/aircloud/source/_less/diff.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561280195569},{"_id":"themes/aircloud/source/_less/diff.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561280195570},{"_id":"themes/aircloud/source/_less/page.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561280195572},{"_id":"themes/aircloud/source/_less/page.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561280195572},{"_id":"themes/aircloud/source/_less/theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561280195573},{"_id":"themes/aircloud/source/_less/theme.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561280195574},{"_id":"source/img/3.jpg","hash":"2de0cbd6ef6695f024865eb614e849641d369b87","modified":1561281639570},{"_id":"themes/aircloud/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1561280185282},{"_id":"themes/aircloud/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1561280185282},{"_id":"themes/aircloud/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1561280185283},{"_id":"themes/aircloud/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1561280185283},{"_id":"themes/aircloud/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1561280185283},{"_id":"themes/aircloud/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1561280185282},{"_id":"themes/aircloud/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1561280185283},{"_id":"themes/aircloud/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1561280185283},{"_id":"themes/aircloud/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1561280185282},{"_id":"themes/aircloud/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1561280185283},{"_id":"themes/aircloud/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1561280185284},{"_id":"themes/aircloud/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1561280185281},{"_id":"themes/aircloud/.git/logs/HEAD","hash":"44722571bd9ee3e8486a4b563da3b36c412278f3","modified":1561280195559},{"_id":"themes/aircloud/layout/_partial/donate.ejs","hash":"81c976a3b7fa5c47ef61181d537220eaf1d55eac","modified":1561280195565},{"_id":"themes/aircloud/layout/_partial/footer.ejs","hash":"9a0fabcf7c87beb8a2ff4e780b23a648933a670a","modified":1561448339198},{"_id":"themes/aircloud/layout/_partial/head.ejs","hash":"3f18d5d4951a205bab25b08d6bf85b054c84a21b","modified":1561280195566},{"_id":"themes/aircloud/layout/_partial/nav.ejs","hash":"079fa72aa7a02ee11f6a44a8a9e58eb80fe28190","modified":1561280195566},{"_id":"themes/aircloud/layout/_partial/toc.ejs","hash":"41d11d159011466f0b6272aca9a74df8642b693f","modified":1561280195566},{"_id":"themes/aircloud/source/_less/archive.css","hash":"905efcc06a62d1e8b60df0e12434afa353378d3a","modified":1561280195569},{"_id":"themes/aircloud/source/_less/archive.less","hash":"5538d38614960e69b97a7f80f38b5933851212b8","modified":1561280195569},{"_id":"themes/aircloud/source/_less/common.css","hash":"64914aa6ecd5b948676870e0809e0f220b162e3b","modified":1561280195569},{"_id":"themes/aircloud/source/_less/common.less","hash":"8aef4d8cfdefbcd2e28d4985a4f79a5005ca0b6c","modified":1561280195569},{"_id":"themes/aircloud/source/_less/donate.css","hash":"ae6a676a42321512f0536c5230bb53084aaf2c2f","modified":1561280195570},{"_id":"themes/aircloud/source/_less/donate.less","hash":"d63139f4aa148bf894afa5c1007a4398696a0e4c","modified":1561280195570},{"_id":"themes/aircloud/source/_less/gitment.css","hash":"7d560b64e367129f98424052c660ae82b03a1d02","modified":1561280195570},{"_id":"themes/aircloud/source/_less/gitment.less","hash":"916deb8ecdee798d7a9b43b544e31dfd5bbd6de4","modified":1561280195570},{"_id":"themes/aircloud/source/_less/hightlight.css","hash":"4e5a9ec3e88fbc2ce0faabceff8d3f5099ea1012","modified":1561280195570},{"_id":"themes/aircloud/source/_less/hightlight.less","hash":"4e5a9ec3e88fbc2ce0faabceff8d3f5099ea1012","modified":1561280195571},{"_id":"themes/aircloud/source/_less/index.css","hash":"52fe4d1b93dfb4c9c9d63e24862354b6a0ef47f8","modified":1561280195571},{"_id":"themes/aircloud/source/_less/index.less","hash":"502d689e3568056cc27dd4da7da2499b0be4253e","modified":1561280195571},{"_id":"themes/aircloud/source/_less/layout.css","hash":"40d7cadf42b130ea1b40de1ae73b2b00e27f476f","modified":1561280195571},{"_id":"themes/aircloud/source/_less/layout.less","hash":"194ac7db2eeee7307fcb7470302f8172100181fb","modified":1561280195572},{"_id":"themes/aircloud/source/_less/nav.css","hash":"32e352d71dc2e67d69a26d8b5116a27d8d2a7718","modified":1561280195572},{"_id":"themes/aircloud/source/_less/nav.less","hash":"627e33cafb4ca9c191053b10917fc21c68c6ee8c","modified":1561280195572},{"_id":"themes/aircloud/source/_less/post.css","hash":"4adf531589cb55413264c188b29ae47ab703beb8","modified":1561280195572},{"_id":"themes/aircloud/source/_less/post.less","hash":"bbbd81c03e7581950d82bf971eda49e8bed7bee1","modified":1561280195572},{"_id":"themes/aircloud/source/_less/tag.css","hash":"3250887aaae0bc62bd82082d000ce3de8cc55ab6","modified":1561280195572},{"_id":"themes/aircloud/source/_less/tag.less","hash":"47e1ce2f55e2b62beefd0f69dfe7deb594e7b309","modified":1561280195573},{"_id":"themes/aircloud/source/_less/toc.css","hash":"83b1a219e7fe66d9d6cc34600e5a16311381a883","modified":1561280195574},{"_id":"themes/aircloud/source/_less/toc.less","hash":"c873ce552b22b0aa2c51a386a91516cadf9160ba","modified":1561280195574},{"_id":"themes/aircloud/source/_less/variables.css","hash":"9768d38beea904c4febc704192a49c8f7ae6e06c","modified":1561280195575},{"_id":"themes/aircloud/source/_less/variables.less","hash":"49503f7a6c51edd6f1dbdea5345df6bb903b18a5","modified":1561280195575},{"_id":"themes/aircloud/source/css/aircloud.css","hash":"e6082557a5f0e546169ab1aa0ba29bda4ef5c182","modified":1561280195576},{"_id":"themes/aircloud/source/css/aircloud.css.map","hash":"50db34961d11f6f461e23912609d25141068a6fc","modified":1561280195577},{"_id":"themes/aircloud/source/css/aircloud.less","hash":"45cab2da310dbfcba37ac3db657db77b4adac60d","modified":1561280195578},{"_id":"themes/aircloud/source/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1561280195578},{"_id":"themes/aircloud/source/js/index.js","hash":"086352f89a0857f9592bfb783bd50afaa50f9b3d","modified":1561280195580},{"_id":"source/img/kds.jpg","hash":"70558c28dbc717528049673f7653804596e45fde","modified":1561281639581},{"_id":"themes/aircloud/.git/objects/pack/pack-7a3da719c373a1ad35f506ffcf0db47a3f8954b7.idx","hash":"7ffe1a64165a0653f2a201a5dfcf915e3554323a","modified":1561280195550},{"_id":"themes/aircloud/.git/refs/heads/master","hash":"e6c2d158df38be928c722b48832b6bdeacbe8d8c","modified":1561280195559},{"_id":"themes/aircloud/source/_less/_partial/footer.css","hash":"e00d722211b4695449d72850340ac0dd701d6ede","modified":1561280195568},{"_id":"themes/aircloud/source/_less/_partial/footer.css.map","hash":"9e8d4df5d08425de5a8b247d0dd8b805c6edc661","modified":1561280195568},{"_id":"themes/aircloud/source/_less/_partial/footer.less","hash":"d1469f97daf750f3e4be18c4d640772780c32a75","modified":1561280195568},{"_id":"themes/aircloud/source/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1561280195580},{"_id":"themes/aircloud/.git/logs/refs/heads/master","hash":"44722571bd9ee3e8486a4b563da3b36c412278f3","modified":1561280195560},{"_id":"themes/aircloud/.git/objects/pack/pack-7a3da719c373a1ad35f506ffcf0db47a3f8954b7.pack","hash":"ec6437f12de8628a1a70cf78011f06247594a93e","modified":1561280195550},{"_id":"themes/aircloud/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1561280195558},{"_id":"themes/aircloud/.git/logs/refs/remotes/origin/HEAD","hash":"44722571bd9ee3e8486a4b563da3b36c412278f3","modified":1561280195558},{"_id":"source/img/donate.jpg","hash":"bae2b0f605495463a161716e35884b9c8f23a7a1","modified":1561281639575},{"_id":"source/img/kd.jpg","hash":"37b74057d1c06436c4c8c1b191b86ff6593fca16","modified":1561281639579},{"_id":"public/search.json","hash":"41ab2269dc0e14260fe9442f8e70bf17206e9e73","modified":1562226592752},{"_id":"public/about/index.html","hash":"551814f964882d72f95dfb4a99ee09b49e20a82b","modified":1562226592989},{"_id":"public/tags/index.html","hash":"eb864eb3d80be254dd6a2fadfca59f875be6bffb","modified":1562226592989},{"_id":"public/2019/07/02/nginx离线安装过程/index.html","hash":"087407a174185d94bb434253d9c1816f7abace8a","modified":1562226592989},{"_id":"public/2019/07/02/windows批处理操作指令/index.html","hash":"e0944a801cf71859d60e66c879e5a960b4dce65c","modified":1562226592989},{"_id":"public/2019/07/02/springboot中文乱码问题/index.html","hash":"97ceaabe7bf556359a0c6200978cf0b02a0f5a64","modified":1562226592989},{"_id":"public/2019/06/25/学习使我快乐/index.html","hash":"4721300c59d74078b3d261451b22623819830a2f","modified":1562226592989},{"_id":"public/archive/index.html","hash":"b1e1b2401ab1d0274baea6307b5fd08f711466cf","modified":1562226592989},{"_id":"public/archive/page/2/index.html","hash":"b1e1b2401ab1d0274baea6307b5fd08f711466cf","modified":1562226592989},{"_id":"public/archive/2019/index.html","hash":"b1e1b2401ab1d0274baea6307b5fd08f711466cf","modified":1562226592990},{"_id":"public/archive/2019/page/2/index.html","hash":"b1e1b2401ab1d0274baea6307b5fd08f711466cf","modified":1562226592990},{"_id":"public/archive/2019/06/index.html","hash":"b1e1b2401ab1d0274baea6307b5fd08f711466cf","modified":1562226592990},{"_id":"public/archive/2019/07/index.html","hash":"b1e1b2401ab1d0274baea6307b5fd08f711466cf","modified":1562226592990},{"_id":"public/archive/2019/07/page/2/index.html","hash":"b1e1b2401ab1d0274baea6307b5fd08f711466cf","modified":1562226592990},{"_id":"public/index.html","hash":"06902ee75f5fc8e3b612873a49ab41a47e0c0720","modified":1562226592990},{"_id":"public/page/2/index.html","hash":"5f29073dfa09a765e8a32376311d94f267d5a638","modified":1562226592990},{"_id":"public/tags/linux/index.html","hash":"87a8dd937cbc38f6cc119e8b063e99bf64e0eb5c","modified":1562226592990},{"_id":"public/tags/git/index.html","hash":"87a8dd937cbc38f6cc119e8b063e99bf64e0eb5c","modified":1562226592990},{"_id":"public/tags/中文乱码/index.html","hash":"87a8dd937cbc38f6cc119e8b063e99bf64e0eb5c","modified":1562226592990},{"_id":"public/tags/多数据源-分库分表/index.html","hash":"87a8dd937cbc38f6cc119e8b063e99bf64e0eb5c","modified":1562226592990},{"_id":"public/tags/NGINX/index.html","hash":"87a8dd937cbc38f6cc119e8b063e99bf64e0eb5c","modified":1562226592990},{"_id":"public/tags/多数据源/index.html","hash":"87a8dd937cbc38f6cc119e8b063e99bf64e0eb5c","modified":1562226592990},{"_id":"public/tags/Windows批处理/index.html","hash":"87a8dd937cbc38f6cc119e8b063e99bf64e0eb5c","modified":1562226592990},{"_id":"public/tags/springboot混淆/index.html","hash":"87a8dd937cbc38f6cc119e8b063e99bf64e0eb5c","modified":1562226592990},{"_id":"public/tags/五月天/index.html","hash":"87a8dd937cbc38f6cc119e8b063e99bf64e0eb5c","modified":1562226592991},{"_id":"public/2019/07/04/过滤器、拦截器、监听器区别/index.html","hash":"ee58a46c9d310006aaabdc8f34d4684abf92cc5e","modified":1562226592991},{"_id":"public/2019/07/04/linux常用指令/index.html","hash":"e38dde25bc1af8493f08bdb04e30360517198d6c","modified":1562226592991},{"_id":"public/2019/07/04/shaingjdbc分库分表/index.html","hash":"c2f7d070b6339a60067e059ff04751aea0b5f38a","modified":1562226592991},{"_id":"public/2019/07/03/springboot多数据源切换注解方式/index.html","hash":"f97c1779212b9ded4af79ecd2506f1ab7ad166f5","modified":1562226592991},{"_id":"public/2019/07/02/git学习教程/index.html","hash":"67e32df6facd61cbe92b2ff9519987226f82e545","modified":1562226592991},{"_id":"public/2019/07/02/springboot项目混淆方案/index.html","hash":"d9536e285979907456219bb02a3e529200a7cea6","modified":1562226592991},{"_id":"public/img/2.jpg","hash":"2f5b0345c366a264ed5b685e464a84e592ac0017","modified":1562226592995},{"_id":"public/img/avatar.png","hash":"48a406e2445f259c339bfe102fdbfd4bd760d9ad","modified":1562226592995},{"_id":"public/img/favicon.ico","hash":"48a406e2445f259c339bfe102fdbfd4bd760d9ad","modified":1562226592995},{"_id":"public/css/aircloud.css.map","hash":"50db34961d11f6f461e23912609d25141068a6fc","modified":1562226592995},{"_id":"public/css/aircloud.less","hash":"45cab2da310dbfcba37ac3db657db77b4adac60d","modified":1562226592995},{"_id":"public/img/1.jpg","hash":"f667d88d44741ff7b92ee9db5f1994bbcc05311c","modified":1562226592997},{"_id":"public/img/ker1.jpg","hash":"708e619ae0ad4524c41665f9930d3b8240d9ddcd","modified":1562226592997},{"_id":"public/js/index.js","hash":"086352f89a0857f9592bfb783bd50afaa50f9b3d","modified":1562226593000},{"_id":"public/css/aircloud.css","hash":"e6082557a5f0e546169ab1aa0ba29bda4ef5c182","modified":1562226593000},{"_id":"public/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1562226593000},{"_id":"public/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1562226593000},{"_id":"public/img/3.jpg","hash":"2de0cbd6ef6695f024865eb614e849641d369b87","modified":1562226593001},{"_id":"public/img/kds.jpg","hash":"70558c28dbc717528049673f7653804596e45fde","modified":1562226593003},{"_id":"public/img/donate.jpg","hash":"bae2b0f605495463a161716e35884b9c8f23a7a1","modified":1562226593011},{"_id":"public/img/kd.jpg","hash":"37b74057d1c06436c4c8c1b191b86ff6593fca16","modified":1562226593012}],"Category":[],"Data":[],"Page":[{"layout":"about","title":"About","date":"2019-06-25T01:00:00.000Z","comments":1,"_content":"\n## 后青春期的诗\n当烟雾随晨光飘散枕畔的湖已风干\n期待已退化成等待而我告别了突然\n当泪痕勾勒成遗憾回忆\n夸饰着伤感逝水\n比喻时光荏苒终于 我们不再\n为了生命狂欢为爱情狂乱\n然而青春彼岸盛夏正要一天\n一天一天的灿烂\n（然后呢一起走吧）\n谁说不能让我此生唯一自传\n如同诗一般无论多远未来\n读来依然一字一句\n一篇都灿烂\n让天空解释着蔚蓝浮云定义着洁白\n落花铺陈一片红色地毯\n迎接我们到未来\n精彩未完的未来","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2019-06-25 09:00:00\ncomments: true\n---\n\n## 后青春期的诗\n当烟雾随晨光飘散枕畔的湖已风干\n期待已退化成等待而我告别了突然\n当泪痕勾勒成遗憾回忆\n夸饰着伤感逝水\n比喻时光荏苒终于 我们不再\n为了生命狂欢为爱情狂乱\n然而青春彼岸盛夏正要一天\n一天一天的灿烂\n（然后呢一起走吧）\n谁说不能让我此生唯一自传\n如同诗一般无论多远未来\n读来依然一字一句\n一篇都灿烂\n让天空解释着蔚蓝浮云定义着洁白\n落花铺陈一片红色地毯\n迎接我们到未来\n精彩未完的未来","updated":"2019-07-02T08:24:09.103Z","path":"about/index.html","_id":"cjxoddk2d0001ls74tt5xajs0","content":"<h2 id=\"后青春期的诗\"><a href=\"#后青春期的诗\" class=\"headerlink\" title=\"后青春期的诗\"></a>后青春期的诗</h2><p>当烟雾随晨光飘散枕畔的湖已风干<br>期待已退化成等待而我告别了突然<br>当泪痕勾勒成遗憾回忆<br>夸饰着伤感逝水<br>比喻时光荏苒终于 我们不再<br>为了生命狂欢为爱情狂乱<br>然而青春彼岸盛夏正要一天<br>一天一天的灿烂<br>（然后呢一起走吧）<br>谁说不能让我此生唯一自传<br>如同诗一般无论多远未来<br>读来依然一字一句<br>一篇都灿烂<br>让天空解释着蔚蓝浮云定义着洁白<br>落花铺陈一片红色地毯<br>迎接我们到未来<br>精彩未完的未来</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"后青春期的诗\"><a href=\"#后青春期的诗\" class=\"headerlink\" title=\"后青春期的诗\"></a>后青春期的诗</h2><p>当烟雾随晨光飘散枕畔的湖已风干<br>期待已退化成等待而我告别了突然<br>当泪痕勾勒成遗憾回忆<br>夸饰着伤感逝水<br>比喻时光荏苒终于 我们不再<br>为了生命狂欢为爱情狂乱<br>然而青春彼岸盛夏正要一天<br>一天一天的灿烂<br>（然后呢一起走吧）<br>谁说不能让我此生唯一自传<br>如同诗一般无论多远未来<br>读来依然一字一句<br>一篇都灿烂<br>让天空解释着蔚蓝浮云定义着洁白<br>落花铺陈一片红色地毯<br>迎接我们到未来<br>精彩未完的未来</p>\n"},{"layout":"tags","title":"Tags","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\n---\n","date":"2019-07-04T07:23:18.214Z","updated":"2019-06-25T07:00:31.170Z","path":"tags/index.html","comments":1,"_id":"cjxoddk2f0003ls748a4lc5hd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"linux常用指令","date":"2019-07-04T06:23:45.000Z","_content":"\n\n\n## 一、Linux目录\n/系统根目录\n/bin 二进制文件目录\n/etc 系统配置文件，不建议在次目录存放可执行文件，防火墙文件、网络设置文件、jdk环境，mysqlpeiz wenj \n/usr 应用程序存放文件， jdk,mysql ,redis\n/root 系统管理员root家目录 ，相当于Windows的桌面家目录，每个用户都有一个家目录\n## 二、磁盘管理命令\nls 列出目录内容\n参数 -a 列出所有包括隐藏文件 -l 列出详情 -h友好显示\n文件格式\ndrwxr-xr-x.  3 root root   4096 5月  22 2016 abrt\n-rw-r--r--.  1 root root     44 1月   9 13:47 adjtime\n-rw-r--r--.  1 root root   1512 1月  12 2010 aliases\n10位 drwxr-xr-x \nr 读 w 写 x 可以执行\nd 代表目录\n- 代表普通文件\nl 代表连接\n\ncd  change diroctory 切换目录\n 相对路径 绝对路径\ncd / \ncd ~ \ncd /root 切换到根目录的root 目录\n\npwd 显示当前所在目录\nmkdir （make dir） 创建目录\nmkdir  study\nrmdir  （remove dir） 删除空目录\nrmdir study\n\n## 三、文件浏览命令\n\n打开查看 日志文件 xml文件 pro 文件\n\ncat 小文件\n\nmore 大文件 ，enter下一行，空格下一页 q退出\n\nless 大文件查看分页显示\n-m 百分比\n-N 行号\nless -mN 文件名\n\ntail\ntail - 数子 文件名 快速查看文件后多少行的内容\ntail -f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测\n\n## 四、文件操作命令\n\n1、文件复制 copy\n\ncp 复制文件或目录\n复制文件 cp post-install Documents\n复制文件夹  -r 表示级联复制 cp -r study Documents/ \n\n2、文件移动 mv（move）\n mv  文件/目录 移动的位置\n mv -f 文件覆盖  mv -f t5 t3\n mv 改名 mv mv dht.txt dd.txt\n\n3、文件删除 rm (rmove)\n-f(force)\n-r （reference）级联\n删除文件 rm -f 文件名  rm -f dd.txt\n删除目录 rm -rf 目录名  rm -rf study\n注意 \nrm -rf * 删除当前目录所有内容\nrm -rf /*  删除Linux 系统根目录下的所有内容\n\n\n4、查找命令 find 查找文件或目录\nfind find /root -name 'post*' 查找 以、a\\post字符开头的文件或目录\n结果\n/root/Documents/post-install\n/root/post-install.log\n/root/post-install\n\n5、文件编辑 vim \nvim 文件名进入一般模式 ，可以浏览 复制\n按i 进入插入模式 ，可以编辑删除\n按esc 退出到一般模式\n在一般模式输入：wq退出保存，按q!强制退出不保存\n\n## 管道命令 | 可以连接多个命令\n\ngrep 正则表达式 ，字符串搜索\n\ngrep 需要搜索的字符串 搜索的文件 复合返回当前行\n\n管道和grep集合\nll| grep dd\n-i（ignore）忽略大小写\ngrep - i dd \n\n\n## 压缩解压 tar\n\n格式 *.tar 多个文件打包为一个文件，大小不会进行压缩\n\t*.tar.gz 打包并压缩（gzip） \n\n1、压缩\ntar -zcvf \nz 使用gzip压缩\nc  建立一个压缩文件\nx 解压\nv 压缩的过程显示文件\nf 使用文档名\n\n2、解压\ntar zxvf redis-4.0.2.tar  解压到当前目录\ntar -zxvf 压缩包 —C  解压到指定目录\n\n## 系统命令\nps (process status)查看进程\nps -ef 查看系统进程\nuid 那个用户打开属于那个用户\npid 进程ID标识进程\ncmd 表明进程对应的程序，程序的位置\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 12:37 ?        00:00:01 /sbin/init\nroot         2     0  0 12:37 ?        00:00:00 [kthreadd]\nroot         3     2  0 12:37 ?        00:00:00 [migration/0]\nroot         4     2  0 12:37 ?        00:00:00 [ksoftirqd/0]\nroot       \n\nps -ef |grep -i vim\n\nps au| grep 端口、进程名\n\n## kill 干掉进程\nkill - 9 pid \n\nifconfig 网络配置\n\nping 网络连通命令测试\n\nnestat -nap \n\nhalt 直接关机\nreboot 重启\nsetup 网络配置\n\n## 权限授权命令 \nchmod(change mode)变更文件或目录权限\ndrwxr-xr-x. 2 root root  4096 1月  10 12:33 Desktop\ndrwxr-xr-x. 2 root root  4096 1月  10 13:29 Destop\ndrwxr-xr-x. 2 root root  4096 1月  10 13\n第一位：文件类型 d目录 -文件 l 链接\n2-4 位： 所属用户权限 u表示\n5-7位：所属组权限 g表示\n8-10 其他用户权限 o表示\n2-10 所有权限 a表示\nr -read 读\nw write 写\nx excute 执行\n- 没有权限\n\nchmod 权限设置 需要更改权限的文件名\nchmod u=rw- study\nchmod g=rwx study\n chmod a=rwx study\n改变study文件夹和文件夹下的权限\nchmod -R u=rw- study\n\nr=4,w=2,x=1\nrwxrwxrwx  777\nchmod 777 文件路径和名\n\n\n## 安装命令 \n\nrpm 想当于Windows的安装，添加卸载\nrpm -ivh 程序名安装\nrpm -qa 查看所有程序\nrpm -e --nodeps 程序名 程序卸载\n\nyum：相当于可以联网的rpm命令,先下载程序的安装包，在执行rpm安装命令\n-y 下载依赖安装\nyum -y install gcc gcc-c++ autoconf automake\n\nwget  联网下载安装\n-p 级联创建\nwget -P /usr/local http://nginx.org/download/nginx-1.12.2.tar.gz\n\n防火墙\n\n\n## shell脚本 \n\n\n```\n#！告诉系统其后路径所指定的程序，就是解释次脚本文件的shell 程序\n#! /bash/shell\necho \"hello world\"\n```\n赋予脚本执行权限\nchmod +x ./test.sh  #使脚本具有执行权限\n./test.sh  #执行脚本\n\n直接写test.sh执行过程linux系统会去path里寻找有没有test.sh的，而path路径里只有\n/bin,/sbin,/usr/bin,/usr/sbin,你的当前目录并不在path里，所以写成test.sh是不会找到命令的，需要./test.sh\n告诉系统在当前目录找\n\n定义shell变量， \nyour_name=\"runoob.com\"，但是变量名和等号之间不能有空格，不能使用bash关键字\n\n意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：\n命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。\n中间不能有空格，可以使用下划线（_）。\n不能使用标点符号。\n不能使用bash里的关键字（可用help命令查看保留关键字）。\n\n\n## 常用例子\n解压文件\ntar zxvf redis-4.0.2.tar\n\n移动文件\nmv redis-4.0.2  /usr/local/\n\n创建文件\nmkdir  /usr/local/redis-4.0.2/bin\n复制文件\ncp /usr/local/redis-4.0.2/redis.conf /usr/local/redis-4.0.2/etc\n\n查看日志文件\ntail -f 文件名\n\nnatapp\n\n/Users/ximoyiren/soft/natapp\n\n\n查看端口占用\n\nnetstat -tunlp|grep 13200\n\nlsof -i:13200\n \n查看java进程\nps -ef | grep java\n\nps -ef | grep wecourt-worklog.jar\n\n查看Tomcat进程\n\nps -ef | grep tomcat6_js13200\n\n找到pid 在kill\n","source":"_posts/linux常用指令.md","raw":"---\ntitle: linux常用指令\ndate: 2019-07-04 14:23:45\ntags:\n    --linux\n---\n\n\n\n## 一、Linux目录\n/系统根目录\n/bin 二进制文件目录\n/etc 系统配置文件，不建议在次目录存放可执行文件，防火墙文件、网络设置文件、jdk环境，mysqlpeiz wenj \n/usr 应用程序存放文件， jdk,mysql ,redis\n/root 系统管理员root家目录 ，相当于Windows的桌面家目录，每个用户都有一个家目录\n## 二、磁盘管理命令\nls 列出目录内容\n参数 -a 列出所有包括隐藏文件 -l 列出详情 -h友好显示\n文件格式\ndrwxr-xr-x.  3 root root   4096 5月  22 2016 abrt\n-rw-r--r--.  1 root root     44 1月   9 13:47 adjtime\n-rw-r--r--.  1 root root   1512 1月  12 2010 aliases\n10位 drwxr-xr-x \nr 读 w 写 x 可以执行\nd 代表目录\n- 代表普通文件\nl 代表连接\n\ncd  change diroctory 切换目录\n 相对路径 绝对路径\ncd / \ncd ~ \ncd /root 切换到根目录的root 目录\n\npwd 显示当前所在目录\nmkdir （make dir） 创建目录\nmkdir  study\nrmdir  （remove dir） 删除空目录\nrmdir study\n\n## 三、文件浏览命令\n\n打开查看 日志文件 xml文件 pro 文件\n\ncat 小文件\n\nmore 大文件 ，enter下一行，空格下一页 q退出\n\nless 大文件查看分页显示\n-m 百分比\n-N 行号\nless -mN 文件名\n\ntail\ntail - 数子 文件名 快速查看文件后多少行的内容\ntail -f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测\n\n## 四、文件操作命令\n\n1、文件复制 copy\n\ncp 复制文件或目录\n复制文件 cp post-install Documents\n复制文件夹  -r 表示级联复制 cp -r study Documents/ \n\n2、文件移动 mv（move）\n mv  文件/目录 移动的位置\n mv -f 文件覆盖  mv -f t5 t3\n mv 改名 mv mv dht.txt dd.txt\n\n3、文件删除 rm (rmove)\n-f(force)\n-r （reference）级联\n删除文件 rm -f 文件名  rm -f dd.txt\n删除目录 rm -rf 目录名  rm -rf study\n注意 \nrm -rf * 删除当前目录所有内容\nrm -rf /*  删除Linux 系统根目录下的所有内容\n\n\n4、查找命令 find 查找文件或目录\nfind find /root -name 'post*' 查找 以、a\\post字符开头的文件或目录\n结果\n/root/Documents/post-install\n/root/post-install.log\n/root/post-install\n\n5、文件编辑 vim \nvim 文件名进入一般模式 ，可以浏览 复制\n按i 进入插入模式 ，可以编辑删除\n按esc 退出到一般模式\n在一般模式输入：wq退出保存，按q!强制退出不保存\n\n## 管道命令 | 可以连接多个命令\n\ngrep 正则表达式 ，字符串搜索\n\ngrep 需要搜索的字符串 搜索的文件 复合返回当前行\n\n管道和grep集合\nll| grep dd\n-i（ignore）忽略大小写\ngrep - i dd \n\n\n## 压缩解压 tar\n\n格式 *.tar 多个文件打包为一个文件，大小不会进行压缩\n\t*.tar.gz 打包并压缩（gzip） \n\n1、压缩\ntar -zcvf \nz 使用gzip压缩\nc  建立一个压缩文件\nx 解压\nv 压缩的过程显示文件\nf 使用文档名\n\n2、解压\ntar zxvf redis-4.0.2.tar  解压到当前目录\ntar -zxvf 压缩包 —C  解压到指定目录\n\n## 系统命令\nps (process status)查看进程\nps -ef 查看系统进程\nuid 那个用户打开属于那个用户\npid 进程ID标识进程\ncmd 表明进程对应的程序，程序的位置\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 12:37 ?        00:00:01 /sbin/init\nroot         2     0  0 12:37 ?        00:00:00 [kthreadd]\nroot         3     2  0 12:37 ?        00:00:00 [migration/0]\nroot         4     2  0 12:37 ?        00:00:00 [ksoftirqd/0]\nroot       \n\nps -ef |grep -i vim\n\nps au| grep 端口、进程名\n\n## kill 干掉进程\nkill - 9 pid \n\nifconfig 网络配置\n\nping 网络连通命令测试\n\nnestat -nap \n\nhalt 直接关机\nreboot 重启\nsetup 网络配置\n\n## 权限授权命令 \nchmod(change mode)变更文件或目录权限\ndrwxr-xr-x. 2 root root  4096 1月  10 12:33 Desktop\ndrwxr-xr-x. 2 root root  4096 1月  10 13:29 Destop\ndrwxr-xr-x. 2 root root  4096 1月  10 13\n第一位：文件类型 d目录 -文件 l 链接\n2-4 位： 所属用户权限 u表示\n5-7位：所属组权限 g表示\n8-10 其他用户权限 o表示\n2-10 所有权限 a表示\nr -read 读\nw write 写\nx excute 执行\n- 没有权限\n\nchmod 权限设置 需要更改权限的文件名\nchmod u=rw- study\nchmod g=rwx study\n chmod a=rwx study\n改变study文件夹和文件夹下的权限\nchmod -R u=rw- study\n\nr=4,w=2,x=1\nrwxrwxrwx  777\nchmod 777 文件路径和名\n\n\n## 安装命令 \n\nrpm 想当于Windows的安装，添加卸载\nrpm -ivh 程序名安装\nrpm -qa 查看所有程序\nrpm -e --nodeps 程序名 程序卸载\n\nyum：相当于可以联网的rpm命令,先下载程序的安装包，在执行rpm安装命令\n-y 下载依赖安装\nyum -y install gcc gcc-c++ autoconf automake\n\nwget  联网下载安装\n-p 级联创建\nwget -P /usr/local http://nginx.org/download/nginx-1.12.2.tar.gz\n\n防火墙\n\n\n## shell脚本 \n\n\n```\n#！告诉系统其后路径所指定的程序，就是解释次脚本文件的shell 程序\n#! /bash/shell\necho \"hello world\"\n```\n赋予脚本执行权限\nchmod +x ./test.sh  #使脚本具有执行权限\n./test.sh  #执行脚本\n\n直接写test.sh执行过程linux系统会去path里寻找有没有test.sh的，而path路径里只有\n/bin,/sbin,/usr/bin,/usr/sbin,你的当前目录并不在path里，所以写成test.sh是不会找到命令的，需要./test.sh\n告诉系统在当前目录找\n\n定义shell变量， \nyour_name=\"runoob.com\"，但是变量名和等号之间不能有空格，不能使用bash关键字\n\n意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：\n命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。\n中间不能有空格，可以使用下划线（_）。\n不能使用标点符号。\n不能使用bash里的关键字（可用help命令查看保留关键字）。\n\n\n## 常用例子\n解压文件\ntar zxvf redis-4.0.2.tar\n\n移动文件\nmv redis-4.0.2  /usr/local/\n\n创建文件\nmkdir  /usr/local/redis-4.0.2/bin\n复制文件\ncp /usr/local/redis-4.0.2/redis.conf /usr/local/redis-4.0.2/etc\n\n查看日志文件\ntail -f 文件名\n\nnatapp\n\n/Users/ximoyiren/soft/natapp\n\n\n查看端口占用\n\nnetstat -tunlp|grep 13200\n\nlsof -i:13200\n \n查看java进程\nps -ef | grep java\n\nps -ef | grep wecourt-worklog.jar\n\n查看Tomcat进程\n\nps -ef | grep tomcat6_js13200\n\n找到pid 在kill\n","slug":"linux常用指令","published":1,"updated":"2019-07-04T06:49:18.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxoddk2a0000ls74w7su27qe","content":"<h2 id=\"一、Linux目录\"><a href=\"#一、Linux目录\" class=\"headerlink\" title=\"一、Linux目录\"></a>一、Linux目录</h2><p>/系统根目录<br>/bin 二进制文件目录<br>/etc 系统配置文件，不建议在次目录存放可执行文件，防火墙文件、网络设置文件、jdk环境，mysqlpeiz wenj<br>/usr 应用程序存放文件， jdk,mysql ,redis<br>/root 系统管理员root家目录 ，相当于Windows的桌面家目录，每个用户都有一个家目录</p>\n<h2 id=\"二、磁盘管理命令\"><a href=\"#二、磁盘管理命令\" class=\"headerlink\" title=\"二、磁盘管理命令\"></a>二、磁盘管理命令</h2><p>ls 列出目录内容<br>参数 -a 列出所有包括隐藏文件 -l 列出详情 -h友好显示<br>文件格式<br>drwxr-xr-x.  3 root root   4096 5月  22 2016 abrt<br>-rw-r–r–.  1 root root     44 1月   9 13:47 adjtime<br>-rw-r–r–.  1 root root   1512 1月  12 2010 aliases<br>10位 drwxr-xr-x<br>r 读 w 写 x 可以执行<br>d 代表目录</p>\n<ul>\n<li>代表普通文件<br>l 代表连接</li>\n</ul>\n<p>cd  change diroctory 切换目录<br> 相对路径 绝对路径<br>cd /<br>cd ~ \ncd /root 切换到根目录的root 目录</p>\n<p>pwd 显示当前所在目录<br>mkdir （make dir） 创建目录<br>mkdir  study<br>rmdir  （remove dir） 删除空目录<br>rmdir study</p>\n<h2 id=\"三、文件浏览命令\"><a href=\"#三、文件浏览命令\" class=\"headerlink\" title=\"三、文件浏览命令\"></a>三、文件浏览命令</h2><p>打开查看 日志文件 xml文件 pro 文件</p>\n<p>cat 小文件</p>\n<p>more 大文件 ，enter下一行，空格下一页 q退出</p>\n<p>less 大文件查看分页显示<br>-m 百分比<br>-N 行号<br>less -mN 文件名</p>\n<p>tail<br>tail - 数子 文件名 快速查看文件后多少行的内容<br>tail -f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</p>\n<h2 id=\"四、文件操作命令\"><a href=\"#四、文件操作命令\" class=\"headerlink\" title=\"四、文件操作命令\"></a>四、文件操作命令</h2><p>1、文件复制 copy</p>\n<p>cp 复制文件或目录<br>复制文件 cp post-install Documents<br>复制文件夹  -r 表示级联复制 cp -r study Documents/ </p>\n<p>2、文件移动 mv（move）<br> mv  文件/目录 移动的位置<br> mv -f 文件覆盖  mv -f t5 t3<br> mv 改名 mv mv dht.txt dd.txt</p>\n<p>3、文件删除 rm (rmove)<br>-f(force)<br>-r （reference）级联<br>删除文件 rm -f 文件名  rm -f dd.txt<br>删除目录 rm -rf 目录名  rm -rf study<br>注意<br>rm -rf * 删除当前目录所有内容<br>rm -rf /*  删除Linux 系统根目录下的所有内容</p>\n<p>4、查找命令 find 查找文件或目录<br>find find /root -name ‘post*’ 查找 以、a\\post字符开头的文件或目录<br>结果<br>/root/Documents/post-install<br>/root/post-install.log<br>/root/post-install</p>\n<p>5、文件编辑 vim<br>vim 文件名进入一般模式 ，可以浏览 复制<br>按i 进入插入模式 ，可以编辑删除<br>按esc 退出到一般模式<br>在一般模式输入：wq退出保存，按q!强制退出不保存</p>\n<h2 id=\"管道命令-可以连接多个命令\"><a href=\"#管道命令-可以连接多个命令\" class=\"headerlink\" title=\"管道命令 | 可以连接多个命令\"></a>管道命令 | 可以连接多个命令</h2><p>grep 正则表达式 ，字符串搜索</p>\n<p>grep 需要搜索的字符串 搜索的文件 复合返回当前行</p>\n<p>管道和grep集合<br>ll| grep dd<br>-i（ignore）忽略大小写<br>grep - i dd </p>\n<h2 id=\"压缩解压-tar\"><a href=\"#压缩解压-tar\" class=\"headerlink\" title=\"压缩解压 tar\"></a>压缩解压 tar</h2><p>格式 *.tar 多个文件打包为一个文件，大小不会进行压缩<br>    *.tar.gz 打包并压缩（gzip） </p>\n<p>1、压缩<br>tar -zcvf<br>z 使用gzip压缩<br>c  建立一个压缩文件<br>x 解压<br>v 压缩的过程显示文件<br>f 使用文档名</p>\n<p>2、解压<br>tar zxvf redis-4.0.2.tar  解压到当前目录<br>tar -zxvf 压缩包 —C  解压到指定目录</p>\n<h2 id=\"系统命令\"><a href=\"#系统命令\" class=\"headerlink\" title=\"系统命令\"></a>系统命令</h2><p>ps (process status)查看进程<br>ps -ef 查看系统进程<br>uid 那个用户打开属于那个用户<br>pid 进程ID标识进程<br>cmd 表明进程对应的程序，程序的位置<br>UID        PID  PPID  C STIME TTY          TIME CMD<br>root         1     0  0 12:37 ?        00:00:01 /sbin/init<br>root         2     0  0 12:37 ?        00:00:00 [kthreadd]<br>root         3     2  0 12:37 ?        00:00:00 [migration/0]<br>root         4     2  0 12:37 ?        00:00:00 [ksoftirqd/0]<br>root       </p>\n<p>ps -ef |grep -i vim</p>\n<p>ps au| grep 端口、进程名</p>\n<h2 id=\"kill-干掉进程\"><a href=\"#kill-干掉进程\" class=\"headerlink\" title=\"kill 干掉进程\"></a>kill 干掉进程</h2><p>kill - 9 pid </p>\n<p>ifconfig 网络配置</p>\n<p>ping 网络连通命令测试</p>\n<p>nestat -nap </p>\n<p>halt 直接关机<br>reboot 重启<br>setup 网络配置</p>\n<h2 id=\"权限授权命令\"><a href=\"#权限授权命令\" class=\"headerlink\" title=\"权限授权命令\"></a>权限授权命令</h2><p>chmod(change mode)变更文件或目录权限<br>drwxr-xr-x. 2 root root  4096 1月  10 12:33 Desktop<br>drwxr-xr-x. 2 root root  4096 1月  10 13:29 Destop<br>drwxr-xr-x. 2 root root  4096 1月  10 13<br>第一位：文件类型 d目录 -文件 l 链接<br>2-4 位： 所属用户权限 u表示<br>5-7位：所属组权限 g表示<br>8-10 其他用户权限 o表示<br>2-10 所有权限 a表示<br>r -read 读<br>w write 写<br>x excute 执行</p>\n<ul>\n<li>没有权限</li>\n</ul>\n<p>chmod 权限设置 需要更改权限的文件名<br>chmod u=rw- study<br>chmod g=rwx study<br> chmod a=rwx study<br>改变study文件夹和文件夹下的权限<br>chmod -R u=rw- study</p>\n<p>r=4,w=2,x=1<br>rwxrwxrwx  777<br>chmod 777 文件路径和名</p>\n<h2 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h2><p>rpm 想当于Windows的安装，添加卸载<br>rpm -ivh 程序名安装<br>rpm -qa 查看所有程序<br>rpm -e –nodeps 程序名 程序卸载</p>\n<p>yum：相当于可以联网的rpm命令,先下载程序的安装包，在执行rpm安装命令<br>-y 下载依赖安装<br>yum -y install gcc gcc-c++ autoconf automake</p>\n<p>wget  联网下载安装<br>-p 级联创建<br>wget -P /usr/local <a href=\"http://nginx.org/download/nginx-1.12.2.tar.gz\" target=\"_blank\" rel=\"noopener\">http://nginx.org/download/nginx-1.12.2.tar.gz</a></p>\n<p>防火墙</p>\n<h2 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h2><figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#！告诉系统其后路径所指定的程序，就是解释次脚本文件的shell 程序</span><br><span class=\"line\"><span class=\"meta\">#! /bash/shell</span></span><br><span class=\"line\">echo <span class=\"string\">\"hello world\"</span></span><br></pre></td></tr></table></figure>\n\n<p>赋予脚本执行权限<br>chmod +x ./test.sh  #使脚本具有执行权限<br>./test.sh  #执行脚本</p>\n<p>直接写test.sh执行过程linux系统会去path里寻找有没有test.sh的，而path路径里只有<br>/bin,/sbin,/usr/bin,/usr/sbin,你的当前目录并不在path里，所以写成test.sh是不会找到命令的，需要./test.sh<br>告诉系统在当前目录找</p>\n<p>定义shell变量，<br>your_name=”runoob.com”，但是变量名和等号之间不能有空格，不能使用bash关键字</p>\n<p>意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：<br>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。<br>中间不能有空格，可以使用下划线（_）。<br>不能使用标点符号。<br>不能使用bash里的关键字（可用help命令查看保留关键字）。</p>\n<h2 id=\"常用例子\"><a href=\"#常用例子\" class=\"headerlink\" title=\"常用例子\"></a>常用例子</h2><p>解压文件<br>tar zxvf redis-4.0.2.tar</p>\n<p>移动文件<br>mv redis-4.0.2  /usr/local/</p>\n<p>创建文件<br>mkdir  /usr/local/redis-4.0.2/bin<br>复制文件<br>cp /usr/local/redis-4.0.2/redis.conf /usr/local/redis-4.0.2/etc</p>\n<p>查看日志文件<br>tail -f 文件名</p>\n<p>natapp</p>\n<p>/Users/ximoyiren/soft/natapp</p>\n<p>查看端口占用</p>\n<p>netstat -tunlp|grep 13200</p>\n<p>lsof -i:13200</p>\n<p>查看java进程<br>ps -ef | grep java</p>\n<p>ps -ef | grep wecourt-worklog.jar</p>\n<p>查看Tomcat进程</p>\n<p>ps -ef | grep tomcat6_js13200</p>\n<p>找到pid 在kill</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Linux目录\"><a href=\"#一、Linux目录\" class=\"headerlink\" title=\"一、Linux目录\"></a>一、Linux目录</h2><p>/系统根目录<br>/bin 二进制文件目录<br>/etc 系统配置文件，不建议在次目录存放可执行文件，防火墙文件、网络设置文件、jdk环境，mysqlpeiz wenj<br>/usr 应用程序存放文件， jdk,mysql ,redis<br>/root 系统管理员root家目录 ，相当于Windows的桌面家目录，每个用户都有一个家目录</p>\n<h2 id=\"二、磁盘管理命令\"><a href=\"#二、磁盘管理命令\" class=\"headerlink\" title=\"二、磁盘管理命令\"></a>二、磁盘管理命令</h2><p>ls 列出目录内容<br>参数 -a 列出所有包括隐藏文件 -l 列出详情 -h友好显示<br>文件格式<br>drwxr-xr-x.  3 root root   4096 5月  22 2016 abrt<br>-rw-r–r–.  1 root root     44 1月   9 13:47 adjtime<br>-rw-r–r–.  1 root root   1512 1月  12 2010 aliases<br>10位 drwxr-xr-x<br>r 读 w 写 x 可以执行<br>d 代表目录</p>\n<ul>\n<li>代表普通文件<br>l 代表连接</li>\n</ul>\n<p>cd  change diroctory 切换目录<br> 相对路径 绝对路径<br>cd /<br>cd ~ \ncd /root 切换到根目录的root 目录</p>\n<p>pwd 显示当前所在目录<br>mkdir （make dir） 创建目录<br>mkdir  study<br>rmdir  （remove dir） 删除空目录<br>rmdir study</p>\n<h2 id=\"三、文件浏览命令\"><a href=\"#三、文件浏览命令\" class=\"headerlink\" title=\"三、文件浏览命令\"></a>三、文件浏览命令</h2><p>打开查看 日志文件 xml文件 pro 文件</p>\n<p>cat 小文件</p>\n<p>more 大文件 ，enter下一行，空格下一页 q退出</p>\n<p>less 大文件查看分页显示<br>-m 百分比<br>-N 行号<br>less -mN 文件名</p>\n<p>tail<br>tail - 数子 文件名 快速查看文件后多少行的内容<br>tail -f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</p>\n<h2 id=\"四、文件操作命令\"><a href=\"#四、文件操作命令\" class=\"headerlink\" title=\"四、文件操作命令\"></a>四、文件操作命令</h2><p>1、文件复制 copy</p>\n<p>cp 复制文件或目录<br>复制文件 cp post-install Documents<br>复制文件夹  -r 表示级联复制 cp -r study Documents/ </p>\n<p>2、文件移动 mv（move）<br> mv  文件/目录 移动的位置<br> mv -f 文件覆盖  mv -f t5 t3<br> mv 改名 mv mv dht.txt dd.txt</p>\n<p>3、文件删除 rm (rmove)<br>-f(force)<br>-r （reference）级联<br>删除文件 rm -f 文件名  rm -f dd.txt<br>删除目录 rm -rf 目录名  rm -rf study<br>注意<br>rm -rf * 删除当前目录所有内容<br>rm -rf /*  删除Linux 系统根目录下的所有内容</p>\n<p>4、查找命令 find 查找文件或目录<br>find find /root -name ‘post*’ 查找 以、a\\post字符开头的文件或目录<br>结果<br>/root/Documents/post-install<br>/root/post-install.log<br>/root/post-install</p>\n<p>5、文件编辑 vim<br>vim 文件名进入一般模式 ，可以浏览 复制<br>按i 进入插入模式 ，可以编辑删除<br>按esc 退出到一般模式<br>在一般模式输入：wq退出保存，按q!强制退出不保存</p>\n<h2 id=\"管道命令-可以连接多个命令\"><a href=\"#管道命令-可以连接多个命令\" class=\"headerlink\" title=\"管道命令 | 可以连接多个命令\"></a>管道命令 | 可以连接多个命令</h2><p>grep 正则表达式 ，字符串搜索</p>\n<p>grep 需要搜索的字符串 搜索的文件 复合返回当前行</p>\n<p>管道和grep集合<br>ll| grep dd<br>-i（ignore）忽略大小写<br>grep - i dd </p>\n<h2 id=\"压缩解压-tar\"><a href=\"#压缩解压-tar\" class=\"headerlink\" title=\"压缩解压 tar\"></a>压缩解压 tar</h2><p>格式 *.tar 多个文件打包为一个文件，大小不会进行压缩<br>    *.tar.gz 打包并压缩（gzip） </p>\n<p>1、压缩<br>tar -zcvf<br>z 使用gzip压缩<br>c  建立一个压缩文件<br>x 解压<br>v 压缩的过程显示文件<br>f 使用文档名</p>\n<p>2、解压<br>tar zxvf redis-4.0.2.tar  解压到当前目录<br>tar -zxvf 压缩包 —C  解压到指定目录</p>\n<h2 id=\"系统命令\"><a href=\"#系统命令\" class=\"headerlink\" title=\"系统命令\"></a>系统命令</h2><p>ps (process status)查看进程<br>ps -ef 查看系统进程<br>uid 那个用户打开属于那个用户<br>pid 进程ID标识进程<br>cmd 表明进程对应的程序，程序的位置<br>UID        PID  PPID  C STIME TTY          TIME CMD<br>root         1     0  0 12:37 ?        00:00:01 /sbin/init<br>root         2     0  0 12:37 ?        00:00:00 [kthreadd]<br>root         3     2  0 12:37 ?        00:00:00 [migration/0]<br>root         4     2  0 12:37 ?        00:00:00 [ksoftirqd/0]<br>root       </p>\n<p>ps -ef |grep -i vim</p>\n<p>ps au| grep 端口、进程名</p>\n<h2 id=\"kill-干掉进程\"><a href=\"#kill-干掉进程\" class=\"headerlink\" title=\"kill 干掉进程\"></a>kill 干掉进程</h2><p>kill - 9 pid </p>\n<p>ifconfig 网络配置</p>\n<p>ping 网络连通命令测试</p>\n<p>nestat -nap </p>\n<p>halt 直接关机<br>reboot 重启<br>setup 网络配置</p>\n<h2 id=\"权限授权命令\"><a href=\"#权限授权命令\" class=\"headerlink\" title=\"权限授权命令\"></a>权限授权命令</h2><p>chmod(change mode)变更文件或目录权限<br>drwxr-xr-x. 2 root root  4096 1月  10 12:33 Desktop<br>drwxr-xr-x. 2 root root  4096 1月  10 13:29 Destop<br>drwxr-xr-x. 2 root root  4096 1月  10 13<br>第一位：文件类型 d目录 -文件 l 链接<br>2-4 位： 所属用户权限 u表示<br>5-7位：所属组权限 g表示<br>8-10 其他用户权限 o表示<br>2-10 所有权限 a表示<br>r -read 读<br>w write 写<br>x excute 执行</p>\n<ul>\n<li>没有权限</li>\n</ul>\n<p>chmod 权限设置 需要更改权限的文件名<br>chmod u=rw- study<br>chmod g=rwx study<br> chmod a=rwx study<br>改变study文件夹和文件夹下的权限<br>chmod -R u=rw- study</p>\n<p>r=4,w=2,x=1<br>rwxrwxrwx  777<br>chmod 777 文件路径和名</p>\n<h2 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h2><p>rpm 想当于Windows的安装，添加卸载<br>rpm -ivh 程序名安装<br>rpm -qa 查看所有程序<br>rpm -e –nodeps 程序名 程序卸载</p>\n<p>yum：相当于可以联网的rpm命令,先下载程序的安装包，在执行rpm安装命令<br>-y 下载依赖安装<br>yum -y install gcc gcc-c++ autoconf automake</p>\n<p>wget  联网下载安装<br>-p 级联创建<br>wget -P /usr/local <a href=\"http://nginx.org/download/nginx-1.12.2.tar.gz\" target=\"_blank\" rel=\"noopener\">http://nginx.org/download/nginx-1.12.2.tar.gz</a></p>\n<p>防火墙</p>\n<h2 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h2><figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#！告诉系统其后路径所指定的程序，就是解释次脚本文件的shell 程序</span><br><span class=\"line\"><span class=\"meta\">#! /bash/shell</span></span><br><span class=\"line\">echo <span class=\"string\">\"hello world\"</span></span><br></pre></td></tr></table></figure>\n\n<p>赋予脚本执行权限<br>chmod +x ./test.sh  #使脚本具有执行权限<br>./test.sh  #执行脚本</p>\n<p>直接写test.sh执行过程linux系统会去path里寻找有没有test.sh的，而path路径里只有<br>/bin,/sbin,/usr/bin,/usr/sbin,你的当前目录并不在path里，所以写成test.sh是不会找到命令的，需要./test.sh<br>告诉系统在当前目录找</p>\n<p>定义shell变量，<br>your_name=”runoob.com”，但是变量名和等号之间不能有空格，不能使用bash关键字</p>\n<p>意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：<br>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。<br>中间不能有空格，可以使用下划线（_）。<br>不能使用标点符号。<br>不能使用bash里的关键字（可用help命令查看保留关键字）。</p>\n<h2 id=\"常用例子\"><a href=\"#常用例子\" class=\"headerlink\" title=\"常用例子\"></a>常用例子</h2><p>解压文件<br>tar zxvf redis-4.0.2.tar</p>\n<p>移动文件<br>mv redis-4.0.2  /usr/local/</p>\n<p>创建文件<br>mkdir  /usr/local/redis-4.0.2/bin<br>复制文件<br>cp /usr/local/redis-4.0.2/redis.conf /usr/local/redis-4.0.2/etc</p>\n<p>查看日志文件<br>tail -f 文件名</p>\n<p>natapp</p>\n<p>/Users/ximoyiren/soft/natapp</p>\n<p>查看端口占用</p>\n<p>netstat -tunlp|grep 13200</p>\n<p>lsof -i:13200</p>\n<p>查看java进程<br>ps -ef | grep java</p>\n<p>ps -ef | grep wecourt-worklog.jar</p>\n<p>查看Tomcat进程</p>\n<p>ps -ef | grep tomcat6_js13200</p>\n<p>找到pid 在kill</p>\n"},{"title":"git学习教程","date":"2019-07-02T09:57:34.000Z","_content":"\n# git 学习教程\n\ngit init \ngit add  \ngit commit -m \ngit status \ngit diff\ngit log 查看版本记录\n\ngit log --pretty=oneline ,注意commitID是16进制字符串\n\ngit reset --HEAD^ 返回上个版本, HEAD^^返回上上个版本\n\ngit reset --hard commitid,返回指定版本\n\ngit返回版本非常快，因为Git内部有个指向当前版本的HEAD指针，改变版本只需要改变指针指向就可以了。\n\ngit reflog 用来记录你的每一次指令，用于查看版本变化。\n\n\n## 概念\n工作区 ：自己创建文件或者文件夹的位置，创建修改文件的地方\n\n版本库：工作区隐藏的。git目录，这个不算工作区，是版本库，版本库存stage 暂存区 ，还有主动创建的master 分支\n\n以及执行master的head指针。\n\ngit add 命令就是要把提交的所有修改都放到stage 暂存区里，然后指向commit命令一次性把\n暂存区里的所有修改提交到分支上去。\nUntracked 新增的文件还没有被修改过\n\ngit 跟踪和管理的是工作区的修改，并非文件，每次工作区的修改都要git add添加到暂存区，最后可以统一commit\n\ngit checkout -- readme.txt ，丢弃工作区的修改，对暂存区不起作用\n一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n\n一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n\n如果git add readme.txt 添加到暂存区，撤销修改的话\n1.需要用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：\n\n2。然后在丢弃工作区的修改git checkout -- readme.txt \n\n撤销修改\n\n \n自然，你是不会犯错的。不过现在是凌晨两点，你正在赶一份工作报告，你在readme.txt中添加了一行：\n\n```\n$ cat readme.txt\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes of files.\nMy stupid boss still prefers SVN.\n```\n在你准备提交前，一杯咖啡起了作用，你猛然发现了“stupid boss”可能会让你丢掉这个月的奖金！\n\n既然错误发现得很及时，就可以很容易地纠正它。你可以删掉最后一行，手动把文件恢复到上一个版本的状态。如果用git status查看一下：\n\n$ git status\n```\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   readme.txt\n#\n```\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n你可以发现，Git会告诉你，git checkout -- file可以丢弃工作区的修改：\n\n$ git checkout -- readme.txt\n命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：\n\n一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n\n一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n\n现在，看看readme.txt的文件内容：\n\n```\n$ cat readme.txt\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes of files.\n```\n文件内容果然复原了。\n\ngit checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。\n\n\n现在假定是凌晨3点，你不但写了一些胡话，还git add到暂存区了：\n\n```\n$ cat readme.txt\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes of files.\nMy stupid boss still prefers SVN.\n```\n$ git add readme.txt\n庆幸的是，在commit之前，你发现了这个问题。用git status查看一下，修改只是添加到了暂存区，还没有提交：\n\n$ git status\n```\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#       modified:   readme.txt\n#\n```\nGit同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：\n\n$ git reset HEAD readme.txt\nUnstaged changes after reset:\nM       readme.txt\ngit reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。\n\n再用git status查看一下，现在暂存区是干净的，工作区有修改：\n\n$ git status\n```\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   readme.txt\n#\n```\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n还记得如何丢弃工作区的修改吗？\n\n$ git checkout -- readme.txt\n\n\n$ git status\n```\n# On branch master\nnothing to commit (working directory clean)\n```\n整个世界终于清静了！\n\n\n现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把“stupid boss”提交推送到远程版本库，你就真的惨了……\n\n小结\n\n又到了小结时间。\n\n场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。\n\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。\n\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n\n\n## 删除 \n\n一种是删除\nrm 删除后 git rm 删除，git commit 提交修改\n一种是删错了，恢复之前的修改版本，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：\n\n$ git checkout -- test.txt\n\n再者版本库没有了，只能恢复到上一个版本了\ngit reflog 版本记录，然后 git reset --hard 版本ID\n\n\n\n## 远程仓库\n使用gitHub,要创建ssh key 公钥，并上传公钥到github\n本地库和远程库进行关联\ngit remote add origin git@github.com:dht5867/learngit.git\n\norigin 远程库的名称，一般这样命名\n\n将本地库内容提交到远程库，实际上是把当前分支master推送到远程。\n\ngit push -u origin master\n\n由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n\n\n远程仓库克隆 \ngit clone  git@github.com:dht5867/gitskills.git\n\n## 分支管理\n\n\n通过改变head 指针的指向改变当前工作版本\n\n\ngit branch dev 创建分支dev\n\ngit checkout dev 转到dev分支\n\ngit checkout -b dev 合并为一句\n\ngit branch 查看所有分支，命令会列出所有分支，当前分支前面会标一个*号。\n\n合并分支到当前分支\n\ngit merge dev ,合并分支到当前master分支，直接把master指向指向dev,fast-forward,快速合并\n\n删除分支  git branch -d dev\n\n当Git merge  合并分支有冲突时，需要手动解决冲突，在次add commit\n\ngit log --graph 查看分支变化图\n\n分支管理策略\n\ngit merge --no-ff -m \"禁用fast-forword,合并分支\" dev\n\nMerge made by the 'recursive' strategy.\n\nmaster分支中，保留足够稳定的代码，即已经发布或者即将发布的代码； \ndevelop分支，用于后续开发，一旦通过稳定性测试，就合并到master分支中；\n在develop分支的基础上，产生各个模块分支，模块功能实现之后，合并到develop分支上，\n测试稳定之后，再合并到master分支中。\n\nbug分支\n就是针对bug修复创建一个分支，又不影响当前的工作，修复完成合并，在将修复临时分支删除。\n\n修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n\n当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。\n\n\n强制性删除分支 git branch -D feature-vulcan\n\n## 多人协作\n\n当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，\n并且，远程仓库的默认名称是origin。\n\ngit remote -v 显示远程库信息\n\norigin\tgit@github.com:dht5867/gitskills.git (fetch) 抓取\norigin\tgit@github.com:dht5867/gitskills.git (push) 推送\n\n推送分支\n\n但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？\n\nmaster分支是主分支，因此要时刻与远程同步；\n\ndev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；\n\nbug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；\n\nfeature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n\n\n如果远程有文件先，git pull origin master抓取下\n\n在进行git push origin master 推送\n\n抓取分支\n\n多人协作\n\n \n当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。\n\n要查看远程库的信息，用git remote：\n\n$ git remote\norigin\n或者，用git remote -v显示更详细的信息：\n\n$ git remote -v\norigin  git@github.com:michaelliao/learngit.git (fetch)\norigin  git@github.com:michaelliao/learngit.git (push)\n上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。\n\n推送分支\n\n推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：\n\n$ git push origin master\n如果要推送其他分支，比如dev，就改成：\n\n$ git push origin dev\n但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？\n\nmaster分支是主分支，因此要时刻与远程同步；\n\ndev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；\n\nbug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；\n\nfeature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n\n总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！\n\n\n抓取分支\n\n多人协作时，大家都会往master和dev分支上推送各自的修改。\n\n现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：\n\n 现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：\n\n$ git checkout -b dev origin/dev\n现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：\n\n \n你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：\n\n```\n$ git add hello.py \n$ git commit -m \"add coding: utf-8\"\n[dev bd6ae48] add coding: utf-8\n 1 file changed, 1 insertion(+)\n$ git push origin dev\nTo git@github.com:michaelliao/learngit.git\n ! [rejected]        dev -> dev (non-fast-forward)\nerror: failed to push some refs to 'git@github.com:michaelliao/learngit.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\nhint: before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：\n\n```\n$ git pull\nremote: Counting objects: 5, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom github.com:michaelliao/learngit\n   fc38031..291bea8  dev        -> origin/dev\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream dev origin/<branch>\n```\ngit pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：\n\n```\n$ git branch --set-upstream dev origin/dev\nBranch dev set up to track remote branch dev from origin.\n再pull：\n\n$ git pull\n\n\nAuto-merging hello.py\nCONFLICT (content): Merge conflict in hello.py\nAutomatic merge failed; fix conflicts and then commit the result.\n这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：\n\n```\n```\n$ git commit -m \"merge & fix hello.py\"\n[dev adca45d] merge & fix hello.py\n$ git push origin dev\nCounting objects: 10, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (6/6), 747 bytes, done.\nTotal 6 (delta 0), reused 0 (delta 0)\nTo git@github.com:michaelliao/learngit.git\n   291bea8..adca45d  dev -> dev\n\n```\n因此，多人协作的工作模式通常是这样：\n\n首先，可以试图用git push origin branch-name推送自己的修改；\n\n如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n\n如果合并有冲突，则解决冲突，并在本地提交；\n\n没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！\n\n如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n\n\n查看远程库信息，使用git remote -v；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n\n从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n\n\n参考链接\nhttps://www.liaoxuefeng.com/wiki/896043488029600","source":"_posts/git学习教程.md","raw":"---\ntitle: git学习教程\ndate: 2019-07-02 17:57:34\ntags:\n    -git\n---\n\n# git 学习教程\n\ngit init \ngit add  \ngit commit -m \ngit status \ngit diff\ngit log 查看版本记录\n\ngit log --pretty=oneline ,注意commitID是16进制字符串\n\ngit reset --HEAD^ 返回上个版本, HEAD^^返回上上个版本\n\ngit reset --hard commitid,返回指定版本\n\ngit返回版本非常快，因为Git内部有个指向当前版本的HEAD指针，改变版本只需要改变指针指向就可以了。\n\ngit reflog 用来记录你的每一次指令，用于查看版本变化。\n\n\n## 概念\n工作区 ：自己创建文件或者文件夹的位置，创建修改文件的地方\n\n版本库：工作区隐藏的。git目录，这个不算工作区，是版本库，版本库存stage 暂存区 ，还有主动创建的master 分支\n\n以及执行master的head指针。\n\ngit add 命令就是要把提交的所有修改都放到stage 暂存区里，然后指向commit命令一次性把\n暂存区里的所有修改提交到分支上去。\nUntracked 新增的文件还没有被修改过\n\ngit 跟踪和管理的是工作区的修改，并非文件，每次工作区的修改都要git add添加到暂存区，最后可以统一commit\n\ngit checkout -- readme.txt ，丢弃工作区的修改，对暂存区不起作用\n一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n\n一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n\n如果git add readme.txt 添加到暂存区，撤销修改的话\n1.需要用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：\n\n2。然后在丢弃工作区的修改git checkout -- readme.txt \n\n撤销修改\n\n \n自然，你是不会犯错的。不过现在是凌晨两点，你正在赶一份工作报告，你在readme.txt中添加了一行：\n\n```\n$ cat readme.txt\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes of files.\nMy stupid boss still prefers SVN.\n```\n在你准备提交前，一杯咖啡起了作用，你猛然发现了“stupid boss”可能会让你丢掉这个月的奖金！\n\n既然错误发现得很及时，就可以很容易地纠正它。你可以删掉最后一行，手动把文件恢复到上一个版本的状态。如果用git status查看一下：\n\n$ git status\n```\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   readme.txt\n#\n```\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n你可以发现，Git会告诉你，git checkout -- file可以丢弃工作区的修改：\n\n$ git checkout -- readme.txt\n命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：\n\n一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n\n一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n\n现在，看看readme.txt的文件内容：\n\n```\n$ cat readme.txt\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes of files.\n```\n文件内容果然复原了。\n\ngit checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。\n\n\n现在假定是凌晨3点，你不但写了一些胡话，还git add到暂存区了：\n\n```\n$ cat readme.txt\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes of files.\nMy stupid boss still prefers SVN.\n```\n$ git add readme.txt\n庆幸的是，在commit之前，你发现了这个问题。用git status查看一下，修改只是添加到了暂存区，还没有提交：\n\n$ git status\n```\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#       modified:   readme.txt\n#\n```\nGit同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：\n\n$ git reset HEAD readme.txt\nUnstaged changes after reset:\nM       readme.txt\ngit reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。\n\n再用git status查看一下，现在暂存区是干净的，工作区有修改：\n\n$ git status\n```\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   readme.txt\n#\n```\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n还记得如何丢弃工作区的修改吗？\n\n$ git checkout -- readme.txt\n\n\n$ git status\n```\n# On branch master\nnothing to commit (working directory clean)\n```\n整个世界终于清静了！\n\n\n现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把“stupid boss”提交推送到远程版本库，你就真的惨了……\n\n小结\n\n又到了小结时间。\n\n场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。\n\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。\n\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n\n\n## 删除 \n\n一种是删除\nrm 删除后 git rm 删除，git commit 提交修改\n一种是删错了，恢复之前的修改版本，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：\n\n$ git checkout -- test.txt\n\n再者版本库没有了，只能恢复到上一个版本了\ngit reflog 版本记录，然后 git reset --hard 版本ID\n\n\n\n## 远程仓库\n使用gitHub,要创建ssh key 公钥，并上传公钥到github\n本地库和远程库进行关联\ngit remote add origin git@github.com:dht5867/learngit.git\n\norigin 远程库的名称，一般这样命名\n\n将本地库内容提交到远程库，实际上是把当前分支master推送到远程。\n\ngit push -u origin master\n\n由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n\n\n远程仓库克隆 \ngit clone  git@github.com:dht5867/gitskills.git\n\n## 分支管理\n\n\n通过改变head 指针的指向改变当前工作版本\n\n\ngit branch dev 创建分支dev\n\ngit checkout dev 转到dev分支\n\ngit checkout -b dev 合并为一句\n\ngit branch 查看所有分支，命令会列出所有分支，当前分支前面会标一个*号。\n\n合并分支到当前分支\n\ngit merge dev ,合并分支到当前master分支，直接把master指向指向dev,fast-forward,快速合并\n\n删除分支  git branch -d dev\n\n当Git merge  合并分支有冲突时，需要手动解决冲突，在次add commit\n\ngit log --graph 查看分支变化图\n\n分支管理策略\n\ngit merge --no-ff -m \"禁用fast-forword,合并分支\" dev\n\nMerge made by the 'recursive' strategy.\n\nmaster分支中，保留足够稳定的代码，即已经发布或者即将发布的代码； \ndevelop分支，用于后续开发，一旦通过稳定性测试，就合并到master分支中；\n在develop分支的基础上，产生各个模块分支，模块功能实现之后，合并到develop分支上，\n测试稳定之后，再合并到master分支中。\n\nbug分支\n就是针对bug修复创建一个分支，又不影响当前的工作，修复完成合并，在将修复临时分支删除。\n\n修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n\n当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。\n\n\n强制性删除分支 git branch -D feature-vulcan\n\n## 多人协作\n\n当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，\n并且，远程仓库的默认名称是origin。\n\ngit remote -v 显示远程库信息\n\norigin\tgit@github.com:dht5867/gitskills.git (fetch) 抓取\norigin\tgit@github.com:dht5867/gitskills.git (push) 推送\n\n推送分支\n\n但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？\n\nmaster分支是主分支，因此要时刻与远程同步；\n\ndev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；\n\nbug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；\n\nfeature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n\n\n如果远程有文件先，git pull origin master抓取下\n\n在进行git push origin master 推送\n\n抓取分支\n\n多人协作\n\n \n当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。\n\n要查看远程库的信息，用git remote：\n\n$ git remote\norigin\n或者，用git remote -v显示更详细的信息：\n\n$ git remote -v\norigin  git@github.com:michaelliao/learngit.git (fetch)\norigin  git@github.com:michaelliao/learngit.git (push)\n上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。\n\n推送分支\n\n推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：\n\n$ git push origin master\n如果要推送其他分支，比如dev，就改成：\n\n$ git push origin dev\n但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？\n\nmaster分支是主分支，因此要时刻与远程同步；\n\ndev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；\n\nbug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；\n\nfeature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n\n总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！\n\n\n抓取分支\n\n多人协作时，大家都会往master和dev分支上推送各自的修改。\n\n现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：\n\n 现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：\n\n$ git checkout -b dev origin/dev\n现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：\n\n \n你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：\n\n```\n$ git add hello.py \n$ git commit -m \"add coding: utf-8\"\n[dev bd6ae48] add coding: utf-8\n 1 file changed, 1 insertion(+)\n$ git push origin dev\nTo git@github.com:michaelliao/learngit.git\n ! [rejected]        dev -> dev (non-fast-forward)\nerror: failed to push some refs to 'git@github.com:michaelliao/learngit.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\nhint: before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：\n\n```\n$ git pull\nremote: Counting objects: 5, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom github.com:michaelliao/learngit\n   fc38031..291bea8  dev        -> origin/dev\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream dev origin/<branch>\n```\ngit pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：\n\n```\n$ git branch --set-upstream dev origin/dev\nBranch dev set up to track remote branch dev from origin.\n再pull：\n\n$ git pull\n\n\nAuto-merging hello.py\nCONFLICT (content): Merge conflict in hello.py\nAutomatic merge failed; fix conflicts and then commit the result.\n这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：\n\n```\n```\n$ git commit -m \"merge & fix hello.py\"\n[dev adca45d] merge & fix hello.py\n$ git push origin dev\nCounting objects: 10, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (6/6), 747 bytes, done.\nTotal 6 (delta 0), reused 0 (delta 0)\nTo git@github.com:michaelliao/learngit.git\n   291bea8..adca45d  dev -> dev\n\n```\n因此，多人协作的工作模式通常是这样：\n\n首先，可以试图用git push origin branch-name推送自己的修改；\n\n如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n\n如果合并有冲突，则解决冲突，并在本地提交；\n\n没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！\n\n如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n\n\n查看远程库信息，使用git remote -v；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n\n从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n\n\n参考链接\nhttps://www.liaoxuefeng.com/wiki/896043488029600","slug":"git学习教程","published":1,"updated":"2019-07-02T10:37:02.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxoddk2e0002ls74a7s4p0g8","content":"<h1 id=\"git-学习教程\"><a href=\"#git-学习教程\" class=\"headerlink\" title=\"git 学习教程\"></a>git 学习教程</h1><p>git init<br>git add<br>git commit -m<br>git status<br>git diff<br>git log 查看版本记录</p>\n<p>git log –pretty=oneline ,注意commitID是16进制字符串</p>\n<p>git reset –HEAD^ 返回上个版本, HEAD^^返回上上个版本</p>\n<p>git reset –hard commitid,返回指定版本</p>\n<p>git返回版本非常快，因为Git内部有个指向当前版本的HEAD指针，改变版本只需要改变指针指向就可以了。</p>\n<p>git reflog 用来记录你的每一次指令，用于查看版本变化。</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>工作区 ：自己创建文件或者文件夹的位置，创建修改文件的地方</p>\n<p>版本库：工作区隐藏的。git目录，这个不算工作区，是版本库，版本库存stage 暂存区 ，还有主动创建的master 分支</p>\n<p>以及执行master的head指针。</p>\n<p>git add 命令就是要把提交的所有修改都放到stage 暂存区里，然后指向commit命令一次性把<br>暂存区里的所有修改提交到分支上去。<br>Untracked 新增的文件还没有被修改过</p>\n<p>git 跟踪和管理的是工作区的修改，并非文件，每次工作区的修改都要git add添加到暂存区，最后可以统一commit</p>\n<p>git checkout – readme.txt ，丢弃工作区的修改，对暂存区不起作用<br>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>\n<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>\n<p>如果git add readme.txt 添加到暂存区，撤销修改的话<br>1.需要用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>\n<p>2。然后在丢弃工作区的修改git checkout – readme.txt </p>\n<p>撤销修改</p>\n<p>自然，你是不会犯错的。不过现在是凌晨两点，你正在赶一份工作报告，你在readme.txt中添加了一行：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> readme.txt</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> <span class=\"keyword\">a</span> distributed <span class=\"keyword\">version</span> control <span class=\"built_in\">system</span>.</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> free software distributed under the GPL.</span><br><span class=\"line\">Git <span class=\"built_in\">has</span> <span class=\"keyword\">a</span> mutable <span class=\"built_in\">index</span> called stage.</span><br><span class=\"line\">Git tracks <span class=\"keyword\">changes</span> of <span class=\"keyword\">files</span>.</span><br><span class=\"line\">My stupid boss still prefers SVN.</span><br></pre></td></tr></table></figure>\n\n<p>在你准备提交前，一杯咖啡起了作用，你猛然发现了“stupid boss”可能会让你丢掉这个月的奖金！</p>\n<p>既然错误发现得很及时，就可以很容易地纠正它。你可以删掉最后一行，手动把文件恢复到上一个版本的状态。如果用git status查看一下：</p>\n<p>$ git status</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># On branch master</span></span><br><span class=\"line\"><span class=\"meta\"># Changes not staged for commit:</span></span><br><span class=\"line\"><span class=\"meta\">#   (use \"git add &lt;file&gt;...\" to update what will be committed)</span></span><br><span class=\"line\"><span class=\"meta\">#   (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"meta\">#       modified:   readme.txt</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>no changes added to commit (use “git add” and/or “git commit -a”)<br>你可以发现，Git会告诉你，git checkout – file可以丢弃工作区的修改：</p>\n<p>$ git checkout – readme.txt<br>命令git checkout – readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：</p>\n<p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>\n<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>\n<p>现在，看看readme.txt的文件内容：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> readme.txt</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> <span class=\"keyword\">a</span> distributed <span class=\"keyword\">version</span> control <span class=\"built_in\">system</span>.</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> free software distributed under the GPL.</span><br><span class=\"line\">Git <span class=\"built_in\">has</span> <span class=\"keyword\">a</span> mutable <span class=\"built_in\">index</span> called stage.</span><br><span class=\"line\">Git tracks <span class=\"keyword\">changes</span> of <span class=\"keyword\">files</span>.</span><br></pre></td></tr></table></figure>\n\n<p>文件内容果然复原了。</p>\n<p>git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。</p>\n<p>现在假定是凌晨3点，你不但写了一些胡话，还git add到暂存区了：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> readme.txt</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> <span class=\"keyword\">a</span> distributed <span class=\"keyword\">version</span> control <span class=\"built_in\">system</span>.</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> free software distributed under the GPL.</span><br><span class=\"line\">Git <span class=\"built_in\">has</span> <span class=\"keyword\">a</span> mutable <span class=\"built_in\">index</span> called stage.</span><br><span class=\"line\">Git tracks <span class=\"keyword\">changes</span> of <span class=\"keyword\">files</span>.</span><br><span class=\"line\">My stupid boss still prefers SVN.</span><br></pre></td></tr></table></figure>\n\n<p>$ git add readme.txt<br>庆幸的是，在commit之前，你发现了这个问题。用git status查看一下，修改只是添加到了暂存区，还没有提交：</p>\n<p>$ git status</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># On branch master</span></span><br><span class=\"line\"><span class=\"meta\"># Changes to be committed:</span></span><br><span class=\"line\"><span class=\"meta\">#   (use \"git reset HEAD &lt;file&gt;...\" to unstage)</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"meta\">#       modified:   readme.txt</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>\n<p>$ git reset HEAD readme.txt<br>Unstaged changes after reset:<br>M       readme.txt<br>git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p>\n<p>再用git status查看一下，现在暂存区是干净的，工作区有修改：</p>\n<p>$ git status</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># On branch master</span></span><br><span class=\"line\"><span class=\"meta\"># Changes not staged for commit:</span></span><br><span class=\"line\"><span class=\"meta\">#   (use \"git add &lt;file&gt;...\" to update what will be committed)</span></span><br><span class=\"line\"><span class=\"meta\">#   (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"meta\">#       modified:   readme.txt</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>no changes added to commit (use “git add” and/or “git commit -a”)<br>还记得如何丢弃工作区的修改吗？</p>\n<p>$ git checkout – readme.txt</p>\n<p>$ git status</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># On branch master</span></span><br><span class=\"line\">nothing <span class=\"built_in\">to</span> commit (working <span class=\"built_in\">directory</span> clean)</span><br></pre></td></tr></table></figure>\n\n<p>整个世界终于清静了！</p>\n<p>现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把“stupid boss”提交推送到远程版本库，你就真的惨了……</p>\n<p>小结</p>\n<p>又到了小结时间。</p>\n<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p>\n<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p>\n<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>一种是删除<br>rm 删除后 git rm 删除，git commit 提交修改<br>一种是删错了，恢复之前的修改版本，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p>\n<p>$ git checkout – test.txt</p>\n<p>再者版本库没有了，只能恢复到上一个版本了<br>git reflog 版本记录，然后 git reset –hard 版本ID</p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><p>使用gitHub,要创建ssh key 公钥，并上传公钥到github<br>本地库和远程库进行关联<br>git remote add origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:dht5867/learngit.git</p>\n<p>origin 远程库的名称，一般这样命名</p>\n<p>将本地库内容提交到远程库，实际上是把当前分支master推送到远程。</p>\n<p>git push -u origin master</p>\n<p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<p>远程仓库克隆<br>git clone  <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:dht5867/gitskills.git</p>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><p>通过改变head 指针的指向改变当前工作版本</p>\n<p>git branch dev 创建分支dev</p>\n<p>git checkout dev 转到dev分支</p>\n<p>git checkout -b dev 合并为一句</p>\n<p>git branch 查看所有分支，命令会列出所有分支，当前分支前面会标一个*号。</p>\n<p>合并分支到当前分支</p>\n<p>git merge dev ,合并分支到当前master分支，直接把master指向指向dev,fast-forward,快速合并</p>\n<p>删除分支  git branch -d dev</p>\n<p>当Git merge  合并分支有冲突时，需要手动解决冲突，在次add commit</p>\n<p>git log –graph 查看分支变化图</p>\n<p>分支管理策略</p>\n<p>git merge –no-ff -m “禁用fast-forword,合并分支” dev</p>\n<p>Merge made by the ‘recursive’ strategy.</p>\n<p>master分支中，保留足够稳定的代码，即已经发布或者即将发布的代码；<br>develop分支，用于后续开发，一旦通过稳定性测试，就合并到master分支中；<br>在develop分支的基础上，产生各个模块分支，模块功能实现之后，合并到develop分支上，<br>测试稳定之后，再合并到master分支中。</p>\n<p>bug分支<br>就是针对bug修复创建一个分支，又不影响当前的工作，修复完成合并，在将修复临时分支删除。</p>\n<p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>\n<p>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</p>\n<p>强制性删除分支 git branch -D feature-vulcan</p>\n<h2 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h2><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，<br>并且，远程仓库的默认名称是origin。</p>\n<p>git remote -v 显示远程库信息</p>\n<p>origin    <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:dht5867/gitskills.git (fetch) 抓取<br>origin    <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:dht5867/gitskills.git (push) 推送</p>\n<p>推送分支</p>\n<p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>\n<p>master分支是主分支，因此要时刻与远程同步；</p>\n<p>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>\n<p>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p>\n<p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>\n<p>如果远程有文件先，git pull origin master抓取下</p>\n<p>在进行git push origin master 推送</p>\n<p>抓取分支</p>\n<p>多人协作</p>\n<p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p>\n<p>要查看远程库的信息，用git remote：</p>\n<p>$ git remote<br>origin<br>或者，用git remote -v显示更详细的信息：</p>\n<p>$ git remote -v<br>origin  <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:michaelliao/learngit.git (fetch)<br>origin  <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:michaelliao/learngit.git (push)<br>上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。</p>\n<p>推送分支</p>\n<p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>\n<p>$ git push origin master<br>如果要推送其他分支，比如dev，就改成：</p>\n<p>$ git push origin dev<br>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>\n<p>master分支是主分支，因此要时刻与远程同步；</p>\n<p>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>\n<p>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p>\n<p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>\n<p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p>\n<p>抓取分支</p>\n<p>多人协作时，大家都会往master和dev分支上推送各自的修改。</p>\n<p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p>\n<p> 现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：</p>\n<p>$ git checkout -b dev origin/dev<br>现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：</p>\n<p>你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add hello.py </span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -m <span class=\"string\">\"add coding: utf-8\"</span></span><br><span class=\"line\">[dev bd6ae48] <span class=\"keyword\">add</span> coding: utf<span class=\"number\">-8</span></span><br><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">file</span> <span class=\"keyword\">changed</span>, <span class=\"number\">1</span> insertion(+)</span><br><span class=\"line\">$ git push origin dev</span><br><span class=\"line\"><span class=\"keyword\">To</span> git@github.com:michaelliao/learngit.git</span><br><span class=\"line\"> ! [rejected]        dev -&gt; dev (non-<span class=\"keyword\">fast</span>-forward)</span><br><span class=\"line\"><span class=\"keyword\">error</span>: <span class=\"keyword\">failed</span> <span class=\"keyword\">to</span> push <span class=\"keyword\">some</span> refs <span class=\"keyword\">to</span> <span class=\"string\">'git@github.com:michaelliao/learngit.git'</span></span><br><span class=\"line\">hint: Updates were rejected because the tip <span class=\"keyword\">of</span> your <span class=\"keyword\">current</span> branch <span class=\"keyword\">is</span> behind</span><br><span class=\"line\">hint: its remote counterpart. <span class=\"keyword\">Merge</span> the remote changes (e.g. <span class=\"string\">'git pull'</span>)</span><br><span class=\"line\">hint: <span class=\"keyword\">before</span> pushing again.</span><br><span class=\"line\">hint: See the <span class=\"string\">'Note about fast-forwards'</span> <span class=\"keyword\">in</span> <span class=\"string\">'git push --help'</span> <span class=\"keyword\">for</span> details.</span><br></pre></td></tr></table></figure>\n\n<p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">remote: Counting objects: 5, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (2/2), done.</span><br><span class=\"line\">remote: Total 3 (delta 0), reused 3 (delta 0)</span><br><span class=\"line\">Unpacking objects: 100% (3/3), done.</span><br><span class=\"line\"><span class=\"keyword\">From</span> github.com:michaelliao/learngit</span><br><span class=\"line\">   fc38031<span class=\"built_in\">..</span>291bea8  dev        -&gt; origin/dev</span><br><span class=\"line\">There is <span class=\"literal\">no</span><span class=\"built_in\"> tracking </span>information <span class=\"keyword\">for</span> the current branch.</span><br><span class=\"line\">Please specify which branch you want <span class=\"keyword\">to</span> merge with.</span><br><span class=\"line\">See git-pull(1) <span class=\"keyword\">for</span> details</span><br><span class=\"line\"></span><br><span class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">If</span> you wish <span class=\"keyword\">to</span> <span class=\"builtin-name\">set</span><span class=\"built_in\"> tracking </span>information <span class=\"keyword\">for</span> this branch you can <span class=\"keyword\">do</span> so with:</span><br><span class=\"line\"></span><br><span class=\"line\">    git branch --set-upstream dev origin/&lt;branch&gt;</span><br></pre></td></tr></table></figure>\n\n<p>git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch <span class=\"comment\">--set-upstream dev origin/dev</span></span><br><span class=\"line\">Branch dev <span class=\"keyword\">set</span> up <span class=\"keyword\">to</span> track remote branch dev <span class=\"keyword\">from</span> origin.</span><br><span class=\"line\">再pull：</span><br><span class=\"line\"></span><br><span class=\"line\">$ git pull</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Auto</span>-merging hello.py</span><br><span class=\"line\">CONFLICT (<span class=\"keyword\">content</span>): <span class=\"keyword\">Merge</span> conflict <span class=\"keyword\">in</span> hello.py</span><br><span class=\"line\"><span class=\"keyword\">Automatic</span> <span class=\"keyword\">merge</span> <span class=\"keyword\">failed</span>; fix conflicts and then <span class=\"keyword\">commit</span> the result.</span><br><span class=\"line\">这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">\"merge &amp; fix hello.py\"</span></span><br><span class=\"line\">[dev adca45d] merge &amp; fix hello.py</span><br><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">Counting objects: <span class=\"number\">10</span>, done.</span><br><span class=\"line\">Delta compression using up to <span class=\"number\">4</span> threads.</span><br><span class=\"line\">Compressing objects: <span class=\"number\">100%</span> (<span class=\"number\">5</span>/<span class=\"number\">5</span>), done.</span><br><span class=\"line\">Writing objects: <span class=\"number\">100%</span> (<span class=\"number\">6</span>/<span class=\"number\">6</span>), <span class=\"number\">747</span> bytes, done.</span><br><span class=\"line\">Total <span class=\"number\">6</span> (delta <span class=\"number\">0</span>), reused <span class=\"number\">0</span> (delta <span class=\"number\">0</span>)</span><br><span class=\"line\">To git@github<span class=\"selector-class\">.com</span>:michaelliao/learngit.git</span><br><span class=\"line\">   <span class=\"number\">291</span>bea8.<span class=\"selector-class\">.adca45d</span>  dev -&gt; dev</span><br></pre></td></tr></table></figure>\n\n<p>因此，多人协作的工作模式通常是这样：</p>\n<p>首先，可以试图用git push origin branch-name推送自己的修改；</p>\n<p>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p>\n<p>如果合并有冲突，则解决冲突，并在本地提交；</p>\n<p>没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</p>\n<p>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream branch-name origin/branch-name。</p>\n<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>\n<p>查看远程库信息，使用git remote -v；</p>\n<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>\n<p>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</p>\n<p>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</p>\n<p>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</p>\n<p>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p>\n<p>参考链接<br><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git-学习教程\"><a href=\"#git-学习教程\" class=\"headerlink\" title=\"git 学习教程\"></a>git 学习教程</h1><p>git init<br>git add<br>git commit -m<br>git status<br>git diff<br>git log 查看版本记录</p>\n<p>git log –pretty=oneline ,注意commitID是16进制字符串</p>\n<p>git reset –HEAD^ 返回上个版本, HEAD^^返回上上个版本</p>\n<p>git reset –hard commitid,返回指定版本</p>\n<p>git返回版本非常快，因为Git内部有个指向当前版本的HEAD指针，改变版本只需要改变指针指向就可以了。</p>\n<p>git reflog 用来记录你的每一次指令，用于查看版本变化。</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>工作区 ：自己创建文件或者文件夹的位置，创建修改文件的地方</p>\n<p>版本库：工作区隐藏的。git目录，这个不算工作区，是版本库，版本库存stage 暂存区 ，还有主动创建的master 分支</p>\n<p>以及执行master的head指针。</p>\n<p>git add 命令就是要把提交的所有修改都放到stage 暂存区里，然后指向commit命令一次性把<br>暂存区里的所有修改提交到分支上去。<br>Untracked 新增的文件还没有被修改过</p>\n<p>git 跟踪和管理的是工作区的修改，并非文件，每次工作区的修改都要git add添加到暂存区，最后可以统一commit</p>\n<p>git checkout – readme.txt ，丢弃工作区的修改，对暂存区不起作用<br>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>\n<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>\n<p>如果git add readme.txt 添加到暂存区，撤销修改的话<br>1.需要用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>\n<p>2。然后在丢弃工作区的修改git checkout – readme.txt </p>\n<p>撤销修改</p>\n<p>自然，你是不会犯错的。不过现在是凌晨两点，你正在赶一份工作报告，你在readme.txt中添加了一行：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> readme.txt</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> <span class=\"keyword\">a</span> distributed <span class=\"keyword\">version</span> control <span class=\"built_in\">system</span>.</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> free software distributed under the GPL.</span><br><span class=\"line\">Git <span class=\"built_in\">has</span> <span class=\"keyword\">a</span> mutable <span class=\"built_in\">index</span> called stage.</span><br><span class=\"line\">Git tracks <span class=\"keyword\">changes</span> of <span class=\"keyword\">files</span>.</span><br><span class=\"line\">My stupid boss still prefers SVN.</span><br></pre></td></tr></table></figure>\n\n<p>在你准备提交前，一杯咖啡起了作用，你猛然发现了“stupid boss”可能会让你丢掉这个月的奖金！</p>\n<p>既然错误发现得很及时，就可以很容易地纠正它。你可以删掉最后一行，手动把文件恢复到上一个版本的状态。如果用git status查看一下：</p>\n<p>$ git status</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># On branch master</span></span><br><span class=\"line\"><span class=\"meta\"># Changes not staged for commit:</span></span><br><span class=\"line\"><span class=\"meta\">#   (use \"git add &lt;file&gt;...\" to update what will be committed)</span></span><br><span class=\"line\"><span class=\"meta\">#   (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"meta\">#       modified:   readme.txt</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>no changes added to commit (use “git add” and/or “git commit -a”)<br>你可以发现，Git会告诉你，git checkout – file可以丢弃工作区的修改：</p>\n<p>$ git checkout – readme.txt<br>命令git checkout – readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：</p>\n<p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>\n<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>\n<p>现在，看看readme.txt的文件内容：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> readme.txt</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> <span class=\"keyword\">a</span> distributed <span class=\"keyword\">version</span> control <span class=\"built_in\">system</span>.</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> free software distributed under the GPL.</span><br><span class=\"line\">Git <span class=\"built_in\">has</span> <span class=\"keyword\">a</span> mutable <span class=\"built_in\">index</span> called stage.</span><br><span class=\"line\">Git tracks <span class=\"keyword\">changes</span> of <span class=\"keyword\">files</span>.</span><br></pre></td></tr></table></figure>\n\n<p>文件内容果然复原了。</p>\n<p>git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。</p>\n<p>现在假定是凌晨3点，你不但写了一些胡话，还git add到暂存区了：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> readme.txt</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> <span class=\"keyword\">a</span> distributed <span class=\"keyword\">version</span> control <span class=\"built_in\">system</span>.</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> free software distributed under the GPL.</span><br><span class=\"line\">Git <span class=\"built_in\">has</span> <span class=\"keyword\">a</span> mutable <span class=\"built_in\">index</span> called stage.</span><br><span class=\"line\">Git tracks <span class=\"keyword\">changes</span> of <span class=\"keyword\">files</span>.</span><br><span class=\"line\">My stupid boss still prefers SVN.</span><br></pre></td></tr></table></figure>\n\n<p>$ git add readme.txt<br>庆幸的是，在commit之前，你发现了这个问题。用git status查看一下，修改只是添加到了暂存区，还没有提交：</p>\n<p>$ git status</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># On branch master</span></span><br><span class=\"line\"><span class=\"meta\"># Changes to be committed:</span></span><br><span class=\"line\"><span class=\"meta\">#   (use \"git reset HEAD &lt;file&gt;...\" to unstage)</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"meta\">#       modified:   readme.txt</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>\n<p>$ git reset HEAD readme.txt<br>Unstaged changes after reset:<br>M       readme.txt<br>git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p>\n<p>再用git status查看一下，现在暂存区是干净的，工作区有修改：</p>\n<p>$ git status</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># On branch master</span></span><br><span class=\"line\"><span class=\"meta\"># Changes not staged for commit:</span></span><br><span class=\"line\"><span class=\"meta\">#   (use \"git add &lt;file&gt;...\" to update what will be committed)</span></span><br><span class=\"line\"><span class=\"meta\">#   (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"meta\">#       modified:   readme.txt</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>no changes added to commit (use “git add” and/or “git commit -a”)<br>还记得如何丢弃工作区的修改吗？</p>\n<p>$ git checkout – readme.txt</p>\n<p>$ git status</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># On branch master</span></span><br><span class=\"line\">nothing <span class=\"built_in\">to</span> commit (working <span class=\"built_in\">directory</span> clean)</span><br></pre></td></tr></table></figure>\n\n<p>整个世界终于清静了！</p>\n<p>现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把“stupid boss”提交推送到远程版本库，你就真的惨了……</p>\n<p>小结</p>\n<p>又到了小结时间。</p>\n<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p>\n<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p>\n<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>一种是删除<br>rm 删除后 git rm 删除，git commit 提交修改<br>一种是删错了，恢复之前的修改版本，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p>\n<p>$ git checkout – test.txt</p>\n<p>再者版本库没有了，只能恢复到上一个版本了<br>git reflog 版本记录，然后 git reset –hard 版本ID</p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><p>使用gitHub,要创建ssh key 公钥，并上传公钥到github<br>本地库和远程库进行关联<br>git remote add origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:dht5867/learngit.git</p>\n<p>origin 远程库的名称，一般这样命名</p>\n<p>将本地库内容提交到远程库，实际上是把当前分支master推送到远程。</p>\n<p>git push -u origin master</p>\n<p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<p>远程仓库克隆<br>git clone  <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:dht5867/gitskills.git</p>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><p>通过改变head 指针的指向改变当前工作版本</p>\n<p>git branch dev 创建分支dev</p>\n<p>git checkout dev 转到dev分支</p>\n<p>git checkout -b dev 合并为一句</p>\n<p>git branch 查看所有分支，命令会列出所有分支，当前分支前面会标一个*号。</p>\n<p>合并分支到当前分支</p>\n<p>git merge dev ,合并分支到当前master分支，直接把master指向指向dev,fast-forward,快速合并</p>\n<p>删除分支  git branch -d dev</p>\n<p>当Git merge  合并分支有冲突时，需要手动解决冲突，在次add commit</p>\n<p>git log –graph 查看分支变化图</p>\n<p>分支管理策略</p>\n<p>git merge –no-ff -m “禁用fast-forword,合并分支” dev</p>\n<p>Merge made by the ‘recursive’ strategy.</p>\n<p>master分支中，保留足够稳定的代码，即已经发布或者即将发布的代码；<br>develop分支，用于后续开发，一旦通过稳定性测试，就合并到master分支中；<br>在develop分支的基础上，产生各个模块分支，模块功能实现之后，合并到develop分支上，<br>测试稳定之后，再合并到master分支中。</p>\n<p>bug分支<br>就是针对bug修复创建一个分支，又不影响当前的工作，修复完成合并，在将修复临时分支删除。</p>\n<p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>\n<p>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</p>\n<p>强制性删除分支 git branch -D feature-vulcan</p>\n<h2 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h2><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，<br>并且，远程仓库的默认名称是origin。</p>\n<p>git remote -v 显示远程库信息</p>\n<p>origin    <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:dht5867/gitskills.git (fetch) 抓取<br>origin    <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:dht5867/gitskills.git (push) 推送</p>\n<p>推送分支</p>\n<p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>\n<p>master分支是主分支，因此要时刻与远程同步；</p>\n<p>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>\n<p>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p>\n<p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>\n<p>如果远程有文件先，git pull origin master抓取下</p>\n<p>在进行git push origin master 推送</p>\n<p>抓取分支</p>\n<p>多人协作</p>\n<p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p>\n<p>要查看远程库的信息，用git remote：</p>\n<p>$ git remote<br>origin<br>或者，用git remote -v显示更详细的信息：</p>\n<p>$ git remote -v<br>origin  <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:michaelliao/learngit.git (fetch)<br>origin  <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:michaelliao/learngit.git (push)<br>上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。</p>\n<p>推送分支</p>\n<p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>\n<p>$ git push origin master<br>如果要推送其他分支，比如dev，就改成：</p>\n<p>$ git push origin dev<br>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>\n<p>master分支是主分支，因此要时刻与远程同步；</p>\n<p>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>\n<p>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p>\n<p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>\n<p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p>\n<p>抓取分支</p>\n<p>多人协作时，大家都会往master和dev分支上推送各自的修改。</p>\n<p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p>\n<p> 现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：</p>\n<p>$ git checkout -b dev origin/dev<br>现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：</p>\n<p>你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add hello.py </span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -m <span class=\"string\">\"add coding: utf-8\"</span></span><br><span class=\"line\">[dev bd6ae48] <span class=\"keyword\">add</span> coding: utf<span class=\"number\">-8</span></span><br><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">file</span> <span class=\"keyword\">changed</span>, <span class=\"number\">1</span> insertion(+)</span><br><span class=\"line\">$ git push origin dev</span><br><span class=\"line\"><span class=\"keyword\">To</span> git@github.com:michaelliao/learngit.git</span><br><span class=\"line\"> ! [rejected]        dev -&gt; dev (non-<span class=\"keyword\">fast</span>-forward)</span><br><span class=\"line\"><span class=\"keyword\">error</span>: <span class=\"keyword\">failed</span> <span class=\"keyword\">to</span> push <span class=\"keyword\">some</span> refs <span class=\"keyword\">to</span> <span class=\"string\">'git@github.com:michaelliao/learngit.git'</span></span><br><span class=\"line\">hint: Updates were rejected because the tip <span class=\"keyword\">of</span> your <span class=\"keyword\">current</span> branch <span class=\"keyword\">is</span> behind</span><br><span class=\"line\">hint: its remote counterpart. <span class=\"keyword\">Merge</span> the remote changes (e.g. <span class=\"string\">'git pull'</span>)</span><br><span class=\"line\">hint: <span class=\"keyword\">before</span> pushing again.</span><br><span class=\"line\">hint: See the <span class=\"string\">'Note about fast-forwards'</span> <span class=\"keyword\">in</span> <span class=\"string\">'git push --help'</span> <span class=\"keyword\">for</span> details.</span><br></pre></td></tr></table></figure>\n\n<p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">remote: Counting objects: 5, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (2/2), done.</span><br><span class=\"line\">remote: Total 3 (delta 0), reused 3 (delta 0)</span><br><span class=\"line\">Unpacking objects: 100% (3/3), done.</span><br><span class=\"line\"><span class=\"keyword\">From</span> github.com:michaelliao/learngit</span><br><span class=\"line\">   fc38031<span class=\"built_in\">..</span>291bea8  dev        -&gt; origin/dev</span><br><span class=\"line\">There is <span class=\"literal\">no</span><span class=\"built_in\"> tracking </span>information <span class=\"keyword\">for</span> the current branch.</span><br><span class=\"line\">Please specify which branch you want <span class=\"keyword\">to</span> merge with.</span><br><span class=\"line\">See git-pull(1) <span class=\"keyword\">for</span> details</span><br><span class=\"line\"></span><br><span class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">If</span> you wish <span class=\"keyword\">to</span> <span class=\"builtin-name\">set</span><span class=\"built_in\"> tracking </span>information <span class=\"keyword\">for</span> this branch you can <span class=\"keyword\">do</span> so with:</span><br><span class=\"line\"></span><br><span class=\"line\">    git branch --set-upstream dev origin/&lt;branch&gt;</span><br></pre></td></tr></table></figure>\n\n<p>git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch <span class=\"comment\">--set-upstream dev origin/dev</span></span><br><span class=\"line\">Branch dev <span class=\"keyword\">set</span> up <span class=\"keyword\">to</span> track remote branch dev <span class=\"keyword\">from</span> origin.</span><br><span class=\"line\">再pull：</span><br><span class=\"line\"></span><br><span class=\"line\">$ git pull</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Auto</span>-merging hello.py</span><br><span class=\"line\">CONFLICT (<span class=\"keyword\">content</span>): <span class=\"keyword\">Merge</span> conflict <span class=\"keyword\">in</span> hello.py</span><br><span class=\"line\"><span class=\"keyword\">Automatic</span> <span class=\"keyword\">merge</span> <span class=\"keyword\">failed</span>; fix conflicts and then <span class=\"keyword\">commit</span> the result.</span><br><span class=\"line\">这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">\"merge &amp; fix hello.py\"</span></span><br><span class=\"line\">[dev adca45d] merge &amp; fix hello.py</span><br><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">Counting objects: <span class=\"number\">10</span>, done.</span><br><span class=\"line\">Delta compression using up to <span class=\"number\">4</span> threads.</span><br><span class=\"line\">Compressing objects: <span class=\"number\">100%</span> (<span class=\"number\">5</span>/<span class=\"number\">5</span>), done.</span><br><span class=\"line\">Writing objects: <span class=\"number\">100%</span> (<span class=\"number\">6</span>/<span class=\"number\">6</span>), <span class=\"number\">747</span> bytes, done.</span><br><span class=\"line\">Total <span class=\"number\">6</span> (delta <span class=\"number\">0</span>), reused <span class=\"number\">0</span> (delta <span class=\"number\">0</span>)</span><br><span class=\"line\">To git@github<span class=\"selector-class\">.com</span>:michaelliao/learngit.git</span><br><span class=\"line\">   <span class=\"number\">291</span>bea8.<span class=\"selector-class\">.adca45d</span>  dev -&gt; dev</span><br></pre></td></tr></table></figure>\n\n<p>因此，多人协作的工作模式通常是这样：</p>\n<p>首先，可以试图用git push origin branch-name推送自己的修改；</p>\n<p>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p>\n<p>如果合并有冲突，则解决冲突，并在本地提交；</p>\n<p>没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</p>\n<p>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream branch-name origin/branch-name。</p>\n<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>\n<p>查看远程库信息，使用git remote -v；</p>\n<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>\n<p>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</p>\n<p>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</p>\n<p>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</p>\n<p>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p>\n<p>参考链接<br><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>\n"},{"title":"springboot中文乱码问题","date":"2019-07-02T09:52:10.000Z","_content":"# springboot中文乱码问题\n## 统一utf-8编码\n```\nspring.http.encoding.force=true\nspring.http.encoding.charset=UTF-8\nspring.http.encoding.enabled=true\n```\n## 自定义web配置转码\n\n```\n @Bean\n    public HttpMessageConverter<String> responseBodyConverter(){\n        StringHttpMessageConverter converter = new StringHttpMessageConverter(Charset.forName(\"UTF-8\"));\n        return converter;\n    }\n\n\n    @Bean\n    public ObjectMapper getObjectMapper() {\n        return new ObjectMapper();\n    }\n\n\n    @Bean\n    public MappingJackson2HttpMessageConverter messageConverter() {\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n        converter.setObjectMapper(getObjectMapper());\n        return converter;\n    }\n\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        \n        //解决中文乱码\n        converters.add(responseBodyConverter());\n        //解决 添加解决中文乱码后 上述配置之后，返回json数据直接报错 500：no convertter for return value of type\n        converters.add(messageConverter());\n        super.configureMessageConverters(converters);\n    }\n```\n## 设置Tomcat编码\n```\n   // factory.setUriEncoding(Charset.forName(\"UTF-8\"));\n      factory.setUriEncoding(Charset.defaultCharset());\n```\n## 设置rest编码\n```\n     // MediaType type = MediaType.parseMediaType(\"application/x-www-form-urlencoded; charset=UTF-8\");\n        //headers.setContentType(type);\n        //headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED) ;\n```\n## jar 运行时设置编码\n```\n java -Dfile.encoding=UTF-8  -jar\n```","source":"_posts/springboot中文乱码问题.md","raw":"---\ntitle: springboot中文乱码问题\ndate: 2019-07-02 17:52:10\ntags:\n    -中文乱码\n---\n# springboot中文乱码问题\n## 统一utf-8编码\n```\nspring.http.encoding.force=true\nspring.http.encoding.charset=UTF-8\nspring.http.encoding.enabled=true\n```\n## 自定义web配置转码\n\n```\n @Bean\n    public HttpMessageConverter<String> responseBodyConverter(){\n        StringHttpMessageConverter converter = new StringHttpMessageConverter(Charset.forName(\"UTF-8\"));\n        return converter;\n    }\n\n\n    @Bean\n    public ObjectMapper getObjectMapper() {\n        return new ObjectMapper();\n    }\n\n\n    @Bean\n    public MappingJackson2HttpMessageConverter messageConverter() {\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n        converter.setObjectMapper(getObjectMapper());\n        return converter;\n    }\n\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        \n        //解决中文乱码\n        converters.add(responseBodyConverter());\n        //解决 添加解决中文乱码后 上述配置之后，返回json数据直接报错 500：no convertter for return value of type\n        converters.add(messageConverter());\n        super.configureMessageConverters(converters);\n    }\n```\n## 设置Tomcat编码\n```\n   // factory.setUriEncoding(Charset.forName(\"UTF-8\"));\n      factory.setUriEncoding(Charset.defaultCharset());\n```\n## 设置rest编码\n```\n     // MediaType type = MediaType.parseMediaType(\"application/x-www-form-urlencoded; charset=UTF-8\");\n        //headers.setContentType(type);\n        //headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED) ;\n```\n## jar 运行时设置编码\n```\n java -Dfile.encoding=UTF-8  -jar\n```","slug":"springboot中文乱码问题","published":1,"updated":"2019-07-02T09:57:13.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxoddk2h0005ls74f9mqy283","content":"<h1 id=\"springboot中文乱码问题\"><a href=\"#springboot中文乱码问题\" class=\"headerlink\" title=\"springboot中文乱码问题\"></a>springboot中文乱码问题</h1><h2 id=\"统一utf-8编码\"><a href=\"#统一utf-8编码\" class=\"headerlink\" title=\"统一utf-8编码\"></a>统一utf-8编码</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring<span class=\"selector-class\">.http</span><span class=\"selector-class\">.encoding</span><span class=\"selector-class\">.force</span>=true</span><br><span class=\"line\">spring<span class=\"selector-class\">.http</span><span class=\"selector-class\">.encoding</span><span class=\"selector-class\">.charset</span>=UTF-<span class=\"number\">8</span></span><br><span class=\"line\">spring<span class=\"selector-class\">.http</span><span class=\"selector-class\">.encoding</span><span class=\"selector-class\">.enabled</span>=true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义web配置转码\"><a href=\"#自定义web配置转码\" class=\"headerlink\" title=\"自定义web配置转码\"></a>自定义web配置转码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> HttpMessageConverter&lt;String&gt; <span class=\"title\">responseBodyConverter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       StringHttpMessageConverter converter = <span class=\"keyword\">new</span> StringHttpMessageConverter(Charset.forName(<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> converter;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ObjectMapper <span class=\"title\">getObjectMapper</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> MappingJackson2HttpMessageConverter <span class=\"title\">messageConverter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       MappingJackson2HttpMessageConverter converter = <span class=\"keyword\">new</span> MappingJackson2HttpMessageConverter();</span><br><span class=\"line\">       converter.setObjectMapper(getObjectMapper());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> converter;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//解决中文乱码</span></span><br><span class=\"line\">       converters.add(responseBodyConverter());</span><br><span class=\"line\">       <span class=\"comment\">//解决 添加解决中文乱码后 上述配置之后，返回json数据直接报错 500：no convertter for return value of type</span></span><br><span class=\"line\">       converters.add(messageConverter());</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.configureMessageConverters(converters);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置Tomcat编码\"><a href=\"#设置Tomcat编码\" class=\"headerlink\" title=\"设置Tomcat编码\"></a>设置Tomcat编码</h2><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// factory.<span class=\"built_in\">set</span>UriEncoding(Charset.<span class=\"keyword\">for</span>Name(<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">   factory.<span class=\"built_in\">set</span>UriEncoding(Charset.<span class=\"keyword\">default</span>Charset());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置rest编码\"><a href=\"#设置rest编码\" class=\"headerlink\" title=\"设置rest编码\"></a>设置rest编码</h2><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// MediaType type = MediaType.parseMediaType(<span class=\"string\">\"application/x-www-form-urlencoded; charset=UTF-8\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">   //headers.setContentType(type)<span class=\"comment\">;</span></span><br><span class=\"line\">   //headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED) <span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jar-运行时设置编码\"><a href=\"#jar-运行时设置编码\" class=\"headerlink\" title=\"jar 运行时设置编码\"></a>jar 运行时设置编码</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Dfile.<span class=\"attribute\">encoding</span>=UTF-8  -jar</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"springboot中文乱码问题\"><a href=\"#springboot中文乱码问题\" class=\"headerlink\" title=\"springboot中文乱码问题\"></a>springboot中文乱码问题</h1><h2 id=\"统一utf-8编码\"><a href=\"#统一utf-8编码\" class=\"headerlink\" title=\"统一utf-8编码\"></a>统一utf-8编码</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring<span class=\"selector-class\">.http</span><span class=\"selector-class\">.encoding</span><span class=\"selector-class\">.force</span>=true</span><br><span class=\"line\">spring<span class=\"selector-class\">.http</span><span class=\"selector-class\">.encoding</span><span class=\"selector-class\">.charset</span>=UTF-<span class=\"number\">8</span></span><br><span class=\"line\">spring<span class=\"selector-class\">.http</span><span class=\"selector-class\">.encoding</span><span class=\"selector-class\">.enabled</span>=true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义web配置转码\"><a href=\"#自定义web配置转码\" class=\"headerlink\" title=\"自定义web配置转码\"></a>自定义web配置转码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> HttpMessageConverter&lt;String&gt; <span class=\"title\">responseBodyConverter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       StringHttpMessageConverter converter = <span class=\"keyword\">new</span> StringHttpMessageConverter(Charset.forName(<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> converter;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ObjectMapper <span class=\"title\">getObjectMapper</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> MappingJackson2HttpMessageConverter <span class=\"title\">messageConverter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       MappingJackson2HttpMessageConverter converter = <span class=\"keyword\">new</span> MappingJackson2HttpMessageConverter();</span><br><span class=\"line\">       converter.setObjectMapper(getObjectMapper());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> converter;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//解决中文乱码</span></span><br><span class=\"line\">       converters.add(responseBodyConverter());</span><br><span class=\"line\">       <span class=\"comment\">//解决 添加解决中文乱码后 上述配置之后，返回json数据直接报错 500：no convertter for return value of type</span></span><br><span class=\"line\">       converters.add(messageConverter());</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.configureMessageConverters(converters);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置Tomcat编码\"><a href=\"#设置Tomcat编码\" class=\"headerlink\" title=\"设置Tomcat编码\"></a>设置Tomcat编码</h2><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// factory.<span class=\"built_in\">set</span>UriEncoding(Charset.<span class=\"keyword\">for</span>Name(<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">   factory.<span class=\"built_in\">set</span>UriEncoding(Charset.<span class=\"keyword\">default</span>Charset());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置rest编码\"><a href=\"#设置rest编码\" class=\"headerlink\" title=\"设置rest编码\"></a>设置rest编码</h2><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// MediaType type = MediaType.parseMediaType(<span class=\"string\">\"application/x-www-form-urlencoded; charset=UTF-8\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">   //headers.setContentType(type)<span class=\"comment\">;</span></span><br><span class=\"line\">   //headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED) <span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jar-运行时设置编码\"><a href=\"#jar-运行时设置编码\" class=\"headerlink\" title=\"jar 运行时设置编码\"></a>jar 运行时设置编码</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Dfile.<span class=\"attribute\">encoding</span>=UTF-8  -jar</span><br></pre></td></tr></table></figure>"},{"title":"shaingjdbc分库分表","date":"2019-07-04T06:07:32.000Z","_content":"\n#springboot sharing-jdbc 进行分库分表\n\n## 引入pom文件\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.1.5.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n  </parent>\n  <groupId>com.bmsoft</groupId>\n  <artifactId>share-jdbc</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <name>share-jdbc</name>\n  <description>Demo project for Spring Boot</description>\n\n  <properties>\n    <java.version>1.8</java.version>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter</artifactId>\n      <exclusions>\n        <exclusion>\n          <groupId>com.zaxxer</groupId>\n          <artifactId>HikariCP</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.mybatis.spring.boot</groupId>\n      <artifactId>mybatis-spring-boot-starter</artifactId>\n      <version>1.1.1</version>\n    </dependency>\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-devtools</artifactId>\n      <optional>true</optional>\n    </dependency>\n\n    <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>druid-spring-boot-starter</artifactId>\n      <exclusions>\n        <exclusion>\n          <groupId>org.slf4j</groupId>\n          <artifactId>slf4j-api</artifactId>\n        </exclusion>\n      </exclusions>\n      <version>1.1.10</version>\n    </dependency>\n    <!--sharding-jdbc -->\n    <dependency>\n      <groupId>com.dangdang</groupId>\n      <artifactId>sharding-jdbc-core</artifactId>\n      <version>1.5.4</version>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n\n</project>\n```","source":"_posts/shaingjdbc分库分表.md","raw":"---\ntitle: shaingjdbc分库分表\ndate: 2019-07-04 14:07:32\ntags:\n    -多数据源\n    -分库分表\n---\n\n#springboot sharing-jdbc 进行分库分表\n\n## 引入pom文件\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.1.5.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n  </parent>\n  <groupId>com.bmsoft</groupId>\n  <artifactId>share-jdbc</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <name>share-jdbc</name>\n  <description>Demo project for Spring Boot</description>\n\n  <properties>\n    <java.version>1.8</java.version>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter</artifactId>\n      <exclusions>\n        <exclusion>\n          <groupId>com.zaxxer</groupId>\n          <artifactId>HikariCP</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.mybatis.spring.boot</groupId>\n      <artifactId>mybatis-spring-boot-starter</artifactId>\n      <version>1.1.1</version>\n    </dependency>\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-devtools</artifactId>\n      <optional>true</optional>\n    </dependency>\n\n    <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>druid-spring-boot-starter</artifactId>\n      <exclusions>\n        <exclusion>\n          <groupId>org.slf4j</groupId>\n          <artifactId>slf4j-api</artifactId>\n        </exclusion>\n      </exclusions>\n      <version>1.1.10</version>\n    </dependency>\n    <!--sharding-jdbc -->\n    <dependency>\n      <groupId>com.dangdang</groupId>\n      <artifactId>sharding-jdbc-core</artifactId>\n      <version>1.5.4</version>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n\n</project>\n```","slug":"shaingjdbc分库分表","published":1,"updated":"2019-07-04T06:21:08.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxoddk2i0006ls744vpmfsaf","content":"<p>#springboot sharing-jdbc 进行分库分表</p>\n<h2 id=\"引入pom文件\"><a href=\"#引入pom文件\" class=\"headerlink\" title=\"引入pom文件\"></a>引入pom文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.bmsoft<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>share-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>share-jdbc<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.zaxxer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>HikariCP<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--sharding-jdbc --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.dangdang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sharding-jdbc-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>#springboot sharing-jdbc 进行分库分表</p>\n<h2 id=\"引入pom文件\"><a href=\"#引入pom文件\" class=\"headerlink\" title=\"引入pom文件\"></a>引入pom文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.bmsoft<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>share-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>share-jdbc<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.zaxxer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>HikariCP<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--sharding-jdbc --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.dangdang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sharding-jdbc-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"nginx离线安装过程","date":"2019-07-02T11:02:39.000Z","_content":"\n# nginx 离线安装过程 \n1、安装gcc gcc++ 依赖\n\na、首先现在了nginx的最新版本nginx-1.10.0.tar.gz，上传到服务器(/usr/local/src/nginx)目录\n\nb、解压tar -zxvf nginx-1.10.0.tar.gz\n\nc、进入解压目录执行./configure, 这里用到了gcc、pcre、zlib库，如果没有安装会出现C compiler cc is not found等错误\n\ngcc依赖库下载地址：http://download.csdn.net/detail/yidragon88xx/9903875\n\n## 1)、安装gcc库\n仓库地址 http://vault.centos.org/6.5/os/x86_64/Packages/ 包仓库\nrpm -ivh mpfr-2.4.1-6.el6.x86_64.rpm\nrpm -ivh mpfr-2.4.1-6.el6.x86_64.rpm\nrpm -ivh ppl-0.10.2-11.el6.x86_64.rpm\nrpm -ivh cloog-ppl-0.15.7-1.2.el6.x86_64.rpm\nrpm -ivh cpp-4.4.7-17.el6.x86_64.rpm\nrpm -Uvh libgcc-4.4.7-17.el6.x86_64.rpm\nrpm -Uvh libgomp-4.4.7-17.el6.x86_64.rpm\nrpm -ivh glibc-2.12-1.192.el6.x86_64.rpm\nrpm -ivh glibc-headers-2.12-1.192.el6.x86_64.rpm\nrpm -ivh glibc-devel-2.12-1.192.el6.x86_64.rpm\nrpm -ivh gcc-4.4.7-17.el6.x86_64.rpm\n\n## 2）、安装pcre库\n\npcre下载地址：http://download.csdn.net/detail/yidragon88xx/9903904\n\nrpm -ivh pcre-devel-7.8-7.el6.x86_64.rpm\n\n## 3）、安装zlib库\n\nzlib下载地址：http://download.csdn.net/detail/yidragon88xx/9903920\n\nrpm -ivh zlib-devel-1.2.3-3.x86_64.rpm\n\n如果安装过程中还出现其他库没有安装的情况，可以从如下网址中搜索：\n\nhttps://centos.pkgs.org\nhttp://rpm.pbone.net/\nhttp://www.rpm-find.net/\n安装如果报错\nerror while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory，意思是找不到libpcre.so.1这个模块，而导致启动失败。\n\n解决方法如下\n如果是32位系统\n\n[root@lee ~]#  ln -s /usr/local/lib/libpcre.so.1 /lib\n\n如果是64位系统\n\n[root@lee ~]#  ln -s /usr/local/lib/libpcre.so.1 /lib64\n\n\nd、依赖库都安装完成之后然后重新执行\n\n./configure\n\n编译过程中会出现很多信息有些是not found信息，这些不用关心，只要在最后出现，表示编译成功\n\nConfiguration summary\n+ using system PCRE library\n+ OpenSSL library is not used\n+ md5: using system crypto library\n+ sha1 library is not used\n+ using system zlib library \n\ne、执行make\n\nf、执行make install\n\ng、nginx就安装完成了，然后进入/usr/local/目录发现生成新文件夹nginx表示安装成了\n\nh、进入nginx根目录的sbin下执行./nginx启动nginx\n\ni、查看启动情况\n\nps -ef|grep nginx\n\n## 4）配置NGINX 环境变量\n\nexport HGINX_HOME=/usr/local/nginx\nexport PATH=$PATH:$HGINX_HOME/sbin\n \n## 5）配置NGINX开机自启动\n\n\t1.写自启动脚本\n\t2.设置权限\n\tchmod 777 /etc/init.d/nginx\n\t3.设置开机默认启动\n\tchkconfig --add nginx //添加系统服务\n\tchkconfig --level 345 nginx on //设置开机启动,启动级别\n\tchkconfig --list nginx //查看开机启动配置信息\n## nginx控制命令\n\nservice nginx start   #开启\nservice nginx stop    #停止\nservice nginx restart #重启\nservice nginx reload  #重新加载\n","source":"_posts/nginx离线安装过程.md","raw":"---\ntitle: nginx离线安装过程\ndate: 2019-07-02 19:02:39\ntags:\n    -NGINX\n---\n\n# nginx 离线安装过程 \n1、安装gcc gcc++ 依赖\n\na、首先现在了nginx的最新版本nginx-1.10.0.tar.gz，上传到服务器(/usr/local/src/nginx)目录\n\nb、解压tar -zxvf nginx-1.10.0.tar.gz\n\nc、进入解压目录执行./configure, 这里用到了gcc、pcre、zlib库，如果没有安装会出现C compiler cc is not found等错误\n\ngcc依赖库下载地址：http://download.csdn.net/detail/yidragon88xx/9903875\n\n## 1)、安装gcc库\n仓库地址 http://vault.centos.org/6.5/os/x86_64/Packages/ 包仓库\nrpm -ivh mpfr-2.4.1-6.el6.x86_64.rpm\nrpm -ivh mpfr-2.4.1-6.el6.x86_64.rpm\nrpm -ivh ppl-0.10.2-11.el6.x86_64.rpm\nrpm -ivh cloog-ppl-0.15.7-1.2.el6.x86_64.rpm\nrpm -ivh cpp-4.4.7-17.el6.x86_64.rpm\nrpm -Uvh libgcc-4.4.7-17.el6.x86_64.rpm\nrpm -Uvh libgomp-4.4.7-17.el6.x86_64.rpm\nrpm -ivh glibc-2.12-1.192.el6.x86_64.rpm\nrpm -ivh glibc-headers-2.12-1.192.el6.x86_64.rpm\nrpm -ivh glibc-devel-2.12-1.192.el6.x86_64.rpm\nrpm -ivh gcc-4.4.7-17.el6.x86_64.rpm\n\n## 2）、安装pcre库\n\npcre下载地址：http://download.csdn.net/detail/yidragon88xx/9903904\n\nrpm -ivh pcre-devel-7.8-7.el6.x86_64.rpm\n\n## 3）、安装zlib库\n\nzlib下载地址：http://download.csdn.net/detail/yidragon88xx/9903920\n\nrpm -ivh zlib-devel-1.2.3-3.x86_64.rpm\n\n如果安装过程中还出现其他库没有安装的情况，可以从如下网址中搜索：\n\nhttps://centos.pkgs.org\nhttp://rpm.pbone.net/\nhttp://www.rpm-find.net/\n安装如果报错\nerror while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory，意思是找不到libpcre.so.1这个模块，而导致启动失败。\n\n解决方法如下\n如果是32位系统\n\n[root@lee ~]#  ln -s /usr/local/lib/libpcre.so.1 /lib\n\n如果是64位系统\n\n[root@lee ~]#  ln -s /usr/local/lib/libpcre.so.1 /lib64\n\n\nd、依赖库都安装完成之后然后重新执行\n\n./configure\n\n编译过程中会出现很多信息有些是not found信息，这些不用关心，只要在最后出现，表示编译成功\n\nConfiguration summary\n+ using system PCRE library\n+ OpenSSL library is not used\n+ md5: using system crypto library\n+ sha1 library is not used\n+ using system zlib library \n\ne、执行make\n\nf、执行make install\n\ng、nginx就安装完成了，然后进入/usr/local/目录发现生成新文件夹nginx表示安装成了\n\nh、进入nginx根目录的sbin下执行./nginx启动nginx\n\ni、查看启动情况\n\nps -ef|grep nginx\n\n## 4）配置NGINX 环境变量\n\nexport HGINX_HOME=/usr/local/nginx\nexport PATH=$PATH:$HGINX_HOME/sbin\n \n## 5）配置NGINX开机自启动\n\n\t1.写自启动脚本\n\t2.设置权限\n\tchmod 777 /etc/init.d/nginx\n\t3.设置开机默认启动\n\tchkconfig --add nginx //添加系统服务\n\tchkconfig --level 345 nginx on //设置开机启动,启动级别\n\tchkconfig --list nginx //查看开机启动配置信息\n## nginx控制命令\n\nservice nginx start   #开启\nservice nginx stop    #停止\nservice nginx restart #重启\nservice nginx reload  #重新加载\n","slug":"nginx离线安装过程","published":1,"updated":"2019-07-02T11:06:06.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxoddk2k0007ls74waseu018","content":"<h1 id=\"nginx-离线安装过程\"><a href=\"#nginx-离线安装过程\" class=\"headerlink\" title=\"nginx 离线安装过程\"></a>nginx 离线安装过程</h1><p>1、安装gcc gcc++ 依赖</p>\n<p>a、首先现在了nginx的最新版本nginx-1.10.0.tar.gz，上传到服务器(/usr/local/src/nginx)目录</p>\n<p>b、解压tar -zxvf nginx-1.10.0.tar.gz</p>\n<p>c、进入解压目录执行./configure, 这里用到了gcc、pcre、zlib库，如果没有安装会出现C compiler cc is not found等错误</p>\n<p>gcc依赖库下载地址：<a href=\"http://download.csdn.net/detail/yidragon88xx/9903875\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/detail/yidragon88xx/9903875</a></p>\n<h2 id=\"1-、安装gcc库\"><a href=\"#1-、安装gcc库\" class=\"headerlink\" title=\"1)、安装gcc库\"></a>1)、安装gcc库</h2><p>仓库地址 <a href=\"http://vault.centos.org/6.5/os/x86_64/Packages/\" target=\"_blank\" rel=\"noopener\">http://vault.centos.org/6.5/os/x86_64/Packages/</a> 包仓库<br>rpm -ivh mpfr-2.4.1-6.el6.x86_64.rpm<br>rpm -ivh mpfr-2.4.1-6.el6.x86_64.rpm<br>rpm -ivh ppl-0.10.2-11.el6.x86_64.rpm<br>rpm -ivh cloog-ppl-0.15.7-1.2.el6.x86_64.rpm<br>rpm -ivh cpp-4.4.7-17.el6.x86_64.rpm<br>rpm -Uvh libgcc-4.4.7-17.el6.x86_64.rpm<br>rpm -Uvh libgomp-4.4.7-17.el6.x86_64.rpm<br>rpm -ivh glibc-2.12-1.192.el6.x86_64.rpm<br>rpm -ivh glibc-headers-2.12-1.192.el6.x86_64.rpm<br>rpm -ivh glibc-devel-2.12-1.192.el6.x86_64.rpm<br>rpm -ivh gcc-4.4.7-17.el6.x86_64.rpm</p>\n<h2 id=\"2）、安装pcre库\"><a href=\"#2）、安装pcre库\" class=\"headerlink\" title=\"2）、安装pcre库\"></a>2）、安装pcre库</h2><p>pcre下载地址：<a href=\"http://download.csdn.net/detail/yidragon88xx/9903904\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/detail/yidragon88xx/9903904</a></p>\n<p>rpm -ivh pcre-devel-7.8-7.el6.x86_64.rpm</p>\n<h2 id=\"3）、安装zlib库\"><a href=\"#3）、安装zlib库\" class=\"headerlink\" title=\"3）、安装zlib库\"></a>3）、安装zlib库</h2><p>zlib下载地址：<a href=\"http://download.csdn.net/detail/yidragon88xx/9903920\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/detail/yidragon88xx/9903920</a></p>\n<p>rpm -ivh zlib-devel-1.2.3-3.x86_64.rpm</p>\n<p>如果安装过程中还出现其他库没有安装的情况，可以从如下网址中搜索：</p>\n<p><a href=\"https://centos.pkgs.org\" target=\"_blank\" rel=\"noopener\">https://centos.pkgs.org</a><br><a href=\"http://rpm.pbone.net/\" target=\"_blank\" rel=\"noopener\">http://rpm.pbone.net/</a><br><a href=\"http://www.rpm-find.net/\" target=\"_blank\" rel=\"noopener\">http://www.rpm-find.net/</a><br>安装如果报错<br>error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory，意思是找不到libpcre.so.1这个模块，而导致启动失败。</p>\n<p>解决方法如下<br>如果是32位系统</p>\n<p>[root@lee ~]#  ln -s /usr/local/lib/libpcre.so.1 /lib</p>\n<p>如果是64位系统</p>\n<p>[root@lee ~]#  ln -s /usr/local/lib/libpcre.so.1 /lib64</p>\n<p>d、依赖库都安装完成之后然后重新执行</p>\n<p>./configure</p>\n<p>编译过程中会出现很多信息有些是not found信息，这些不用关心，只要在最后出现，表示编译成功</p>\n<p>Configuration summary</p>\n<ul>\n<li>using system PCRE library</li>\n<li>OpenSSL library is not used</li>\n<li>md5: using system crypto library</li>\n<li>sha1 library is not used</li>\n<li>using system zlib library </li>\n</ul>\n<p>e、执行make</p>\n<p>f、执行make install</p>\n<p>g、nginx就安装完成了，然后进入/usr/local/目录发现生成新文件夹nginx表示安装成了</p>\n<p>h、进入nginx根目录的sbin下执行./nginx启动nginx</p>\n<p>i、查看启动情况</p>\n<p>ps -ef|grep nginx</p>\n<h2 id=\"4）配置NGINX-环境变量\"><a href=\"#4）配置NGINX-环境变量\" class=\"headerlink\" title=\"4）配置NGINX 环境变量\"></a>4）配置NGINX 环境变量</h2><p>export HGINX_HOME=/usr/local/nginx<br>export PATH=$PATH:$HGINX_HOME/sbin</p>\n<h2 id=\"5）配置NGINX开机自启动\"><a href=\"#5）配置NGINX开机自启动\" class=\"headerlink\" title=\"5）配置NGINX开机自启动\"></a>5）配置NGINX开机自启动</h2><pre><code>1.写自启动脚本\n2.设置权限\nchmod 777 /etc/init.d/nginx\n3.设置开机默认启动\nchkconfig --add nginx //添加系统服务\nchkconfig --level 345 nginx on //设置开机启动,启动级别\nchkconfig --list nginx //查看开机启动配置信息</code></pre><h2 id=\"nginx控制命令\"><a href=\"#nginx控制命令\" class=\"headerlink\" title=\"nginx控制命令\"></a>nginx控制命令</h2><p>service nginx start   #开启<br>service nginx stop    #停止<br>service nginx restart #重启<br>service nginx reload  #重新加载</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"nginx-离线安装过程\"><a href=\"#nginx-离线安装过程\" class=\"headerlink\" title=\"nginx 离线安装过程\"></a>nginx 离线安装过程</h1><p>1、安装gcc gcc++ 依赖</p>\n<p>a、首先现在了nginx的最新版本nginx-1.10.0.tar.gz，上传到服务器(/usr/local/src/nginx)目录</p>\n<p>b、解压tar -zxvf nginx-1.10.0.tar.gz</p>\n<p>c、进入解压目录执行./configure, 这里用到了gcc、pcre、zlib库，如果没有安装会出现C compiler cc is not found等错误</p>\n<p>gcc依赖库下载地址：<a href=\"http://download.csdn.net/detail/yidragon88xx/9903875\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/detail/yidragon88xx/9903875</a></p>\n<h2 id=\"1-、安装gcc库\"><a href=\"#1-、安装gcc库\" class=\"headerlink\" title=\"1)、安装gcc库\"></a>1)、安装gcc库</h2><p>仓库地址 <a href=\"http://vault.centos.org/6.5/os/x86_64/Packages/\" target=\"_blank\" rel=\"noopener\">http://vault.centos.org/6.5/os/x86_64/Packages/</a> 包仓库<br>rpm -ivh mpfr-2.4.1-6.el6.x86_64.rpm<br>rpm -ivh mpfr-2.4.1-6.el6.x86_64.rpm<br>rpm -ivh ppl-0.10.2-11.el6.x86_64.rpm<br>rpm -ivh cloog-ppl-0.15.7-1.2.el6.x86_64.rpm<br>rpm -ivh cpp-4.4.7-17.el6.x86_64.rpm<br>rpm -Uvh libgcc-4.4.7-17.el6.x86_64.rpm<br>rpm -Uvh libgomp-4.4.7-17.el6.x86_64.rpm<br>rpm -ivh glibc-2.12-1.192.el6.x86_64.rpm<br>rpm -ivh glibc-headers-2.12-1.192.el6.x86_64.rpm<br>rpm -ivh glibc-devel-2.12-1.192.el6.x86_64.rpm<br>rpm -ivh gcc-4.4.7-17.el6.x86_64.rpm</p>\n<h2 id=\"2）、安装pcre库\"><a href=\"#2）、安装pcre库\" class=\"headerlink\" title=\"2）、安装pcre库\"></a>2）、安装pcre库</h2><p>pcre下载地址：<a href=\"http://download.csdn.net/detail/yidragon88xx/9903904\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/detail/yidragon88xx/9903904</a></p>\n<p>rpm -ivh pcre-devel-7.8-7.el6.x86_64.rpm</p>\n<h2 id=\"3）、安装zlib库\"><a href=\"#3）、安装zlib库\" class=\"headerlink\" title=\"3）、安装zlib库\"></a>3）、安装zlib库</h2><p>zlib下载地址：<a href=\"http://download.csdn.net/detail/yidragon88xx/9903920\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/detail/yidragon88xx/9903920</a></p>\n<p>rpm -ivh zlib-devel-1.2.3-3.x86_64.rpm</p>\n<p>如果安装过程中还出现其他库没有安装的情况，可以从如下网址中搜索：</p>\n<p><a href=\"https://centos.pkgs.org\" target=\"_blank\" rel=\"noopener\">https://centos.pkgs.org</a><br><a href=\"http://rpm.pbone.net/\" target=\"_blank\" rel=\"noopener\">http://rpm.pbone.net/</a><br><a href=\"http://www.rpm-find.net/\" target=\"_blank\" rel=\"noopener\">http://www.rpm-find.net/</a><br>安装如果报错<br>error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory，意思是找不到libpcre.so.1这个模块，而导致启动失败。</p>\n<p>解决方法如下<br>如果是32位系统</p>\n<p>[root@lee ~]#  ln -s /usr/local/lib/libpcre.so.1 /lib</p>\n<p>如果是64位系统</p>\n<p>[root@lee ~]#  ln -s /usr/local/lib/libpcre.so.1 /lib64</p>\n<p>d、依赖库都安装完成之后然后重新执行</p>\n<p>./configure</p>\n<p>编译过程中会出现很多信息有些是not found信息，这些不用关心，只要在最后出现，表示编译成功</p>\n<p>Configuration summary</p>\n<ul>\n<li>using system PCRE library</li>\n<li>OpenSSL library is not used</li>\n<li>md5: using system crypto library</li>\n<li>sha1 library is not used</li>\n<li>using system zlib library </li>\n</ul>\n<p>e、执行make</p>\n<p>f、执行make install</p>\n<p>g、nginx就安装完成了，然后进入/usr/local/目录发现生成新文件夹nginx表示安装成了</p>\n<p>h、进入nginx根目录的sbin下执行./nginx启动nginx</p>\n<p>i、查看启动情况</p>\n<p>ps -ef|grep nginx</p>\n<h2 id=\"4）配置NGINX-环境变量\"><a href=\"#4）配置NGINX-环境变量\" class=\"headerlink\" title=\"4）配置NGINX 环境变量\"></a>4）配置NGINX 环境变量</h2><p>export HGINX_HOME=/usr/local/nginx<br>export PATH=$PATH:$HGINX_HOME/sbin</p>\n<h2 id=\"5）配置NGINX开机自启动\"><a href=\"#5）配置NGINX开机自启动\" class=\"headerlink\" title=\"5）配置NGINX开机自启动\"></a>5）配置NGINX开机自启动</h2><pre><code>1.写自启动脚本\n2.设置权限\nchmod 777 /etc/init.d/nginx\n3.设置开机默认启动\nchkconfig --add nginx //添加系统服务\nchkconfig --level 345 nginx on //设置开机启动,启动级别\nchkconfig --list nginx //查看开机启动配置信息</code></pre><h2 id=\"nginx控制命令\"><a href=\"#nginx控制命令\" class=\"headerlink\" title=\"nginx控制命令\"></a>nginx控制命令</h2><p>service nginx start   #开启<br>service nginx stop    #停止<br>service nginx restart #重启<br>service nginx reload  #重新加载</p>\n"},{"title":"springboot多数据源切换注解方式","date":"2019-07-03T11:53:54.000Z","_content":"\n# springboot多数据源切换注解方式\n\n## 配置连接数据库信息\n```\nspring.datasource.inner.type=com.alibaba.druid.pool.DruidDataSource\nspring.datasource.inner.url=jdbc:mysql://\nspring.datasource.inner.username=root\nspring.datasource.inner.password=root \n\nspring.datasource.third.type=com.alibaba.druid.pool.DruidDataSource\nspring.datasource.third.url=jdbc:mysql:\nspring.datasource.third.username=root\nspring.datasource.third.password=root \n```\n## 数据源配置\n\n```\n@Configuration\npublic class DbDuridMysqlProperties {\n\n  @Autowired\n  private DataSourceProperties dataSourceProperties;\n\n  @Bean(name = \"innerDataSource\", destroyMethod = \"close\", initMethod = \"init\")\n  @ConfigurationProperties(\"spring.datasource.inner\")\n  public DataSource innerDataSource() throws SQLException {\n    DruidDataSource druidDataSource = new DruidDataSource();\n    setDataSourcePool(druidDataSource);\n    return druidDataSource;\n  }\n\n  @Bean(name = \"thirdDataSource\", destroyMethod = \"close\", initMethod = \"init\")\n  @ConfigurationProperties(\"spring.datasource.third\")\n  public DataSource thirdDataSource() throws SQLException {\n    DruidDataSource druidDataSource = new DruidDataSource();\n    setDataSourcePool(druidDataSource);\n    return druidDataSource;\n  }\n}\n```\n\n## 动态数据源持有者\n```\n/**\n * 动态数据源持有者，负责利用ThreadLocal存取数据源名称\n */\npublic class DynamicDataSourceHolder {\n\n  /**\n   * 本地线程共享对象\n   */\n  private static final ThreadLocal<String> THREAD_LOCAL = new ThreadLocal<>();\n\n  public static void putDataSource(String name) {\n    THREAD_LOCAL.set(name);\n  }\n\n  public static String getDataSource() {\n    return THREAD_LOCAL.get();\n  }\n\n  public static void removeDataSource() {\n    THREAD_LOCAL.remove();\n  }\n}\n```\n\n## 动态数据源实现类\n\n```\n/**\n * 动态数据源实现类\n */\n@Slf4j\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n\n  //数据源路由，此方用于产生要选取的数据源逻辑名称\n  @Override\n  protected Object determineCurrentLookupKey() {\n    //从共享线程中获取数据源名称\n    return DynamicDataSourceHolder.getDataSource();\n  }\n}\n```\n\n## 定于数据源注解,主要用于dao切换数据源\n```\n/**\n * 目标数据源注解，注解在方法上指定数据源的名称\n */\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface TargetDataSource {\n\n  //此处接收的是数据源的名称\n  String value();\n}\n```\n## 数据源配置,加载配置的数据源，形成key - 数据源\n```\npackage com.bmsoft.newborn.config.datasource;\n\nimport com.bmsoft.newborn.config.dds.DynamicDataSource;\nimport java.sql.SQLException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport lombok.extern.slf4j.Slf4j;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n * 数据源配置\n */\n@Configuration\n@Slf4j\n@MapperScan({\"com.bmsoft.newborn.mapper.inner\", \"com.bmsoft.newborn.mapper.third\"})\npublic class DataSourceConfig {\n\n\n  @Autowired\n  private DbDuridMysqlProperties duridMysqlProperties;\n\n\n  /**\n   * @Primary 该注解表示在同一个接口有多个实现类可以注入的时候，默认选择哪一个，而不是让@autowire注解报错\n   * @Qualifier 根据名称进行注入，通常是在具有相同的多个类型的实例的一个注入（例如有多个DataSource类型的实例）\n   */\n  @Bean(name = \"dataSource\")\n  @Primary\n  public DynamicDataSource dataSource() throws SQLException {\n    //按照目标数据源名称和目标数据源对象的映射存放在Map中\n    //采用是想AbstractRoutingDataSource的对象包装多数据源\n    DynamicDataSource dynamicDataSource = new DynamicDataSource();\n    Map<Object, Object> targetDataSources = new HashMap<>();\n    targetDataSources.put(\"inner\", duridMysqlProperties.innerDataSource());\n    targetDataSources.put(\"third\", duridMysqlProperties.thirdDataSource());\n\n    dynamicDataSource.setTargetDataSources(targetDataSources);\n    //设置默认的数据源，当拿不到数据源时，使用此配置\n    dynamicDataSource.setDefaultTargetDataSource(duridMysqlProperties.innerDataSource());\n    return dynamicDataSource;\n  }\n\n  //开启事务\n  @Bean\n  public PlatformTransactionManager txManager() throws SQLException {\n    return new DataSourceTransactionManager(dataSource());\n  }\n\n\n}\n```\n\n##  数据源AOP切面定义\n```\npackage com.bmsoft.newborn.config.datasource;\n\nimport com.bmsoft.newborn.annotation.TargetDataSource;\nimport com.bmsoft.newborn.config.dds.DynamicDataSourceHolder;\nimport java.lang.reflect.Method;\nimport lombok.extern.slf4j.Slf4j;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.Environment;\nimport org.springframework.stereotype.Component;\n\n/**\n * 数据源AOP切面定义\n */\n@Component\n@Aspect\n@Slf4j\n@Order(4)\npublic class DataSourceAspect {\n\n  @Autowired\n  private Environment env;\n\n\n  //切换放在mapper接口的方法上，所以这里要配置AOP切面的切入点\n  @Pointcut(\"execution( * com.bmsoft.newborn.mapper.*.*.*(..))\")\n  public void dataSourcePointCut() {\n  }\n\n  @Before(\"dataSourcePointCut()\")\n  public void before(JoinPoint joinPoint) throws Exception {\n    Object target = joinPoint.getTarget();\n    /**\n     * Signature 包含了方法名、申明类型以及地址等信息\n     */\n    //方法名称\n    String method = joinPoint.getSignature().getName();\n    //参数值\n    Object[] paramValues = joinPoint.getArgs();\n    Class<?>[] clazz = target.getClass().getInterfaces();\n    Class<?>[] parameterTypes = ((MethodSignature) joinPoint.getSignature()).getMethod()\n        .getParameterTypes();\n    //获取参数类型\n    try {\n      //类上或者方法上存在注解\n      Method m = clazz[0].getMethod(method, parameterTypes);\n      Class<?> declaringClass = m.getDeclaringClass();\n      if (declaringClass.isAnnotationPresent(TargetDataSource.class)) {\n        TargetDataSource data = declaringClass.getAnnotation(TargetDataSource.class);\n        changeDataSource(data);\n      } else if (m.isAnnotationPresent(TargetDataSource.class)) {\n        TargetDataSource data = m.getAnnotation(TargetDataSource.class);\n        //可以根据参数获取当前数据源\n        changeDataSource(data);\n      }\n    } catch (Exception e) {\n      log.error(\"当前线程 \" + Thread.currentThread().getName() + \" 添加数据源失败\", e);\n    }\n  }\n\n  private void changeDataSource(TargetDataSource data) {\n    //可以根据参数获取当前数据源\n    String deafultSourceName = data.value();\n    log.info(\n            \"使用数据源 \" + Thread.currentThread().getName() + \" 添加数据源到-- \" + deafultSourceName\n                    + \" 本地线程变量\");\n    DynamicDataSourceHolder.putDataSource(deafultSourceName);\n  }\n\n  private void changeDataSource(Object[] paramValues, TargetDataSource data) {\n    //可以根据参数获取当前数据源\n    String deafultSourceName = data.value();\n    if (paramValues != null && paramValues.length > 0) {\n      log.info(\n          \"使用数据源 \" + Thread.currentThread().getName() + \" 添加数据源到-- \" + deafultSourceName\n              + \" 本地线程变量\");\n      DynamicDataSourceHolder.putDataSource(deafultSourceName);\n    }\n  }\n\n\n  //执行完切面后，将线程共享中的数据源名称清空\n  @After(\"dataSourcePointCut()\")\n  public void after(JoinPoint joinPoint) {\n    DynamicDataSourceHolder.removeDataSource();\n  }\n\n\n}\n```\n## springboot 关闭数据源自动配置，改为手动配置\n```\npackage com.bmsoft.newborn;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)\npublic class MicroNewbornServiceApplication {\n\n  @Bean\n  public BCryptPasswordEncoder bCryptPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n\n  public static void main(String[] args) {\n    SpringApplication.run(MicroNewbornServiceApplication.class, args);\n  }\n\n}\n```\n\n## 在mapper接口上使用数据源注解到目标数据源\n```\npackage com.bmsoft.newborn.mapper.inner;\n\n\nimport com.bmsoft.newborn.annotation.TargetDataSource;\nimport com.bmsoft.newborn.domain.inner.Dict;\nimport org.apache.ibatis.annotations.Param;\n\nimport java.util.List;\n\n@TargetDataSource(\"inner\")\npublic interface DictMapper  {\n\n  Dict selectById(@Param(\"code\") String code);\n\n  List<Dict> selectAllDict();\n\n}\n```\n## 注意\n1、同一个service中如果启动事务注解@Transaction，数据源切换将不起作用，需要改为分布式事务\n2、需要注意配置默认的数据源，不然在非注解的情况下，查询SQL会报错\n3、在aop 切换数据源时，可以在mapper中传入固定的参数，解析参数可以做切换数据源处理,利用反射获取主键方法的方法传参值进行切换\n```\n\n/**\n * 数据源AOP切面定义\n */\n@Component\n@Aspect\n@Slf4j\n@Order(4)\n@PropertySource(\"classpath:datasource.properties\")//这是多数据源属性文件路径\npublic class DataSourceAspect {\n\n    @Autowired\n    private Environment env;\n\n\n    //切换放在mapper接口的方法上，所以这里要配置AOP切面的切入点\n    @Pointcut(\"execution( * com.bmsoft.wfy.mapper.*.*.*(..))\")\n    public void dataSourcePointCut() {\n    }\n\n    @Before(\"dataSourcePointCut()\")\n    public void before(JoinPoint joinPoint) throws Exception {\n        Object target = joinPoint.getTarget();\n        /**\n         * Signature 包含了方法名、申明类型以及地址等信息\n         */\n        String class_name = joinPoint.getTarget().getClass().getName();\n\n        //方法名称\n        String method = joinPoint.getSignature().getName();\n        //参数值\n        Object[] paramValues = joinPoint.getArgs();\n        Class<?>[] clazz = target.getClass().getInterfaces();\n        Class<?>[] parameterTypes = ((MethodSignature) joinPoint.getSignature()).getMethod().getParameterTypes();\n        //获取参数类型\n        try {\n            Method m = clazz[0].getMethod(method, parameterTypes);\n            //如果方法上存在切换数据源的注解，则根据注解内容进行数据源切换\n            if (m != null && m.isAnnotationPresent(TargetDataSource.class)) {\n                TargetDataSource data = m.getAnnotation(TargetDataSource.class);\n                //可以根据参数获取当前数据源\n                String deafultSourceName = data.value();\n                if (paramValues != null && paramValues.length > 0) {\n                    for (int i = 0; i < paramValues.length; i++) {\n                        log.info(\"数据源方法\" + method);\n                        log.info(\"请求参数类型\" + parameterTypes[i]);\n                        if (parameterTypes[i] == Map.class) {\n                            log.info(\"Map类型值\" + paramValues[i]);\n                            Map<String, Object> map = (HashMap) paramValues[i];\n                            log.info(\"转换之后的Map类型值\" + map);\n                            //获取法院代码\n                            Object courtNumber = map.get(\"courtNumber\");\n                            String court =\"\";\n                            if(courtNumber!=null){\n                                court =String.valueOf(courtNumber);\n                            }\n                            changeDataSource(deafultSourceName, courtNumber, court);\n\n                        } else if (parameterTypes[i] == List.class) {\n                            log.info(\"List类型值\" + paramValues[i]);\n                        } else {\n                            log.info(\"对象类型值\" + paramValues[i]);\n                            final Map<String, String> stringStringMap = obj2Map(paramValues[i]);\n                            log.info(\"对象转为map后的值\" + stringStringMap);\n                            Object courtNumber = stringStringMap.get(\"courtNumber\");\n                            String court =\"\";\n                            if(courtNumber!=null){\n                                court =String.valueOf(courtNumber);\n                            }\n                            changeDataSource(deafultSourceName, courtNumber, court);\n                        }\n\n                    }\n                }\n            } else {\n                //TODO,默认MySQL数据源的处理\n                //mapper 接口没有数据源注解,使用MySQL数据库\n                log.info(\"使用默认mysql数据源\");\n            }\n        } catch (Exception e) {\n            log.error(\"当前线程 \" + Thread.currentThread().getName() + \" 添加数据源失败\", e);\n        }\n    }\n\n    //更换连接的数据源\n    private void changeDataSource(String deafultSourceName, Object courtNumber, String court) {\n        if (StringUtils.isNotBlank(court)&& !\"\".equals(court) &&!\"null\".equalsIgnoreCase(court)&&court.length()>=4) {\n            court = court.substring(0, 4);\n            //TODO,当前只有一个Sybase数据库,后期多个进行扩展\n            if ( StringUtils.isNotBlank(deafultSourceName)&&deafultSourceName.indexOf(\"sybase\") != -1) {\n                String key = \"datasource.sybase.\" + court;\n                //使用 3200 3201 3202  \n                String dataSourceName = env.getProperty(key);\n                DynamicDataSourceHolder.putDataSource(dataSourceName);\n                log.info(\"使用线程 \" + Thread.currentThread().getName() + \" sybase添加--案件 \" + \"法院代码---\" + courtNumber + \"--的数据源----\" + dataSourceName + \" 本地线程变量\");\n\n            } else if( StringUtils.isNotBlank(deafultSourceName)&&deafultSourceName.indexOf(\"mysql\") != -1){\n                //使用其他库的判断\n                String key = \"datasource.mysql.\" + court;\n                //使用 3200 3201 3202  \n                String dataSourceName = env.getProperty(key);\n                DynamicDataSourceHolder.putDataSource(dataSourceName);\n                log.info(\"使用线程 \" + Thread.currentThread().getName() + \"mysql 添加--执行 \" + \"法院代码---\" + courtNumber + \"--的数据源----\" + dataSourceName + \" 本地线程变量\");\n\n            }else if( StringUtils.isNotBlank(deafultSourceName)&&deafultSourceName.indexOf(\"oa\") != -1){\n                //使用其他库的判断\n                //log.info(\"使用线程 \" + Thread.currentThread().getName() + \"sybaseoa 添加--执行 \" + \"法院代码---\" + courtNumber + \"--的数据源----\" + dataSourceName + \" 本地线程变量\");\n                log.info(\"使用默认江苏高院OA\");\n\n                String key = \"datasource.oa.3200\";\n                //使用 3200 3201 3202 的办公oa\n                String dataSourceName = env.getProperty(key);\n                DynamicDataSourceHolder.putDataSource(dataSourceName);\n                log.info(\"使用线程 \" + Thread.currentThread().getName() + \"sybaseoa 添加--执行 \" + \"法院代码---\" + courtNumber + \"--的数据源----\" + dataSourceName + \" 本地线程变量\");\n            }\n        } else {\n            //TODO,没有传法院代码的情况默认使用集中库\n            //判断注解上的值,为集中库上的值\n            if (\"sybaseTtre\".equalsIgnoreCase(deafultSourceName)) {\n                DynamicDataSourceHolder.putDataSource(deafultSourceName);\n                log.info(\"使用Sybase集中库线程 \" + Thread.currentThread().getName() + \" 添加数据源到-- \" + deafultSourceName + \" 本地线程变量\");\n            }else{\n                //TODO 当事人测试使用,后期会更改\n                DynamicDataSourceHolder.putDataSource(\"sybaseTtre\");\n                log.info(\"使用Sybase集中库线程 \" + Thread.currentThread().getName() + \" 添加数据源到-- \" + deafultSourceName + \" 本地线程变量\");\n                //TODO,目前不传法院代码,只有一个集中库的情况,后期进行扩展\n            }\n        }\n    }\n\n    private static Map<String, String> obj2Map(Object obj) {\n        Map<String, String> map = new HashMap<String, String>();\n        // System.out.println(obj.getClass());\n        // 获取f对象对应类中的所有属性域\n        Field[] fields = obj.getClass().getDeclaredFields();\n        for (int i = 0, len = fields.length; i < len; i++) {\n            String varName = fields[i].getName();\n            //varName = varName.toLowerCase();//将key置为小写，默认为对象的属性\n            try {\n                // 获取原来的访问控制权限\n                boolean accessFlag = fields[i].isAccessible();\n                // 修改访问控制权限\n                fields[i].setAccessible(true);\n                // 获取在对象f中属性fields[i]对应的对象中的变量\n                Object o = fields[i].get(obj);\n                if (o != null) {\n                    map.put(varName, o.toString());\n                }\n                // System.out.println(\"传入的对象中包含一个如下的变量：\" + varName + \" = \" + o);\n                // 恢复访问控制权限\n                fields[i].setAccessible(accessFlag);\n            } catch (IllegalArgumentException ex) {\n                ex.printStackTrace();\n            } catch (IllegalAccessException ex) {\n                ex.printStackTrace();\n            }\n        }\n        return map;\n    }\n\n    //执行完切面后，将线程共享中的数据源名称清空\n    @After(\"dataSourcePointCut()\")\n    public void after(JoinPoint joinPoint) {\n        DynamicDataSourceHolder.removeDataSource();\n    }\n\n    public static void main(String[] args) {\n        String courtNumer = \"320100\";\n        System.out.println(courtNumer.substring(0, 4));\n    }\n    \n}\n\n```","source":"_posts/springboot多数据源切换注解方式.md","raw":"---\ntitle: springboot多数据源切换注解方式\ndate: 2019-07-03 19:53:54\ntags:\n    -多数据源\n---\n\n# springboot多数据源切换注解方式\n\n## 配置连接数据库信息\n```\nspring.datasource.inner.type=com.alibaba.druid.pool.DruidDataSource\nspring.datasource.inner.url=jdbc:mysql://\nspring.datasource.inner.username=root\nspring.datasource.inner.password=root \n\nspring.datasource.third.type=com.alibaba.druid.pool.DruidDataSource\nspring.datasource.third.url=jdbc:mysql:\nspring.datasource.third.username=root\nspring.datasource.third.password=root \n```\n## 数据源配置\n\n```\n@Configuration\npublic class DbDuridMysqlProperties {\n\n  @Autowired\n  private DataSourceProperties dataSourceProperties;\n\n  @Bean(name = \"innerDataSource\", destroyMethod = \"close\", initMethod = \"init\")\n  @ConfigurationProperties(\"spring.datasource.inner\")\n  public DataSource innerDataSource() throws SQLException {\n    DruidDataSource druidDataSource = new DruidDataSource();\n    setDataSourcePool(druidDataSource);\n    return druidDataSource;\n  }\n\n  @Bean(name = \"thirdDataSource\", destroyMethod = \"close\", initMethod = \"init\")\n  @ConfigurationProperties(\"spring.datasource.third\")\n  public DataSource thirdDataSource() throws SQLException {\n    DruidDataSource druidDataSource = new DruidDataSource();\n    setDataSourcePool(druidDataSource);\n    return druidDataSource;\n  }\n}\n```\n\n## 动态数据源持有者\n```\n/**\n * 动态数据源持有者，负责利用ThreadLocal存取数据源名称\n */\npublic class DynamicDataSourceHolder {\n\n  /**\n   * 本地线程共享对象\n   */\n  private static final ThreadLocal<String> THREAD_LOCAL = new ThreadLocal<>();\n\n  public static void putDataSource(String name) {\n    THREAD_LOCAL.set(name);\n  }\n\n  public static String getDataSource() {\n    return THREAD_LOCAL.get();\n  }\n\n  public static void removeDataSource() {\n    THREAD_LOCAL.remove();\n  }\n}\n```\n\n## 动态数据源实现类\n\n```\n/**\n * 动态数据源实现类\n */\n@Slf4j\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n\n  //数据源路由，此方用于产生要选取的数据源逻辑名称\n  @Override\n  protected Object determineCurrentLookupKey() {\n    //从共享线程中获取数据源名称\n    return DynamicDataSourceHolder.getDataSource();\n  }\n}\n```\n\n## 定于数据源注解,主要用于dao切换数据源\n```\n/**\n * 目标数据源注解，注解在方法上指定数据源的名称\n */\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface TargetDataSource {\n\n  //此处接收的是数据源的名称\n  String value();\n}\n```\n## 数据源配置,加载配置的数据源，形成key - 数据源\n```\npackage com.bmsoft.newborn.config.datasource;\n\nimport com.bmsoft.newborn.config.dds.DynamicDataSource;\nimport java.sql.SQLException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport lombok.extern.slf4j.Slf4j;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n * 数据源配置\n */\n@Configuration\n@Slf4j\n@MapperScan({\"com.bmsoft.newborn.mapper.inner\", \"com.bmsoft.newborn.mapper.third\"})\npublic class DataSourceConfig {\n\n\n  @Autowired\n  private DbDuridMysqlProperties duridMysqlProperties;\n\n\n  /**\n   * @Primary 该注解表示在同一个接口有多个实现类可以注入的时候，默认选择哪一个，而不是让@autowire注解报错\n   * @Qualifier 根据名称进行注入，通常是在具有相同的多个类型的实例的一个注入（例如有多个DataSource类型的实例）\n   */\n  @Bean(name = \"dataSource\")\n  @Primary\n  public DynamicDataSource dataSource() throws SQLException {\n    //按照目标数据源名称和目标数据源对象的映射存放在Map中\n    //采用是想AbstractRoutingDataSource的对象包装多数据源\n    DynamicDataSource dynamicDataSource = new DynamicDataSource();\n    Map<Object, Object> targetDataSources = new HashMap<>();\n    targetDataSources.put(\"inner\", duridMysqlProperties.innerDataSource());\n    targetDataSources.put(\"third\", duridMysqlProperties.thirdDataSource());\n\n    dynamicDataSource.setTargetDataSources(targetDataSources);\n    //设置默认的数据源，当拿不到数据源时，使用此配置\n    dynamicDataSource.setDefaultTargetDataSource(duridMysqlProperties.innerDataSource());\n    return dynamicDataSource;\n  }\n\n  //开启事务\n  @Bean\n  public PlatformTransactionManager txManager() throws SQLException {\n    return new DataSourceTransactionManager(dataSource());\n  }\n\n\n}\n```\n\n##  数据源AOP切面定义\n```\npackage com.bmsoft.newborn.config.datasource;\n\nimport com.bmsoft.newborn.annotation.TargetDataSource;\nimport com.bmsoft.newborn.config.dds.DynamicDataSourceHolder;\nimport java.lang.reflect.Method;\nimport lombok.extern.slf4j.Slf4j;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.env.Environment;\nimport org.springframework.stereotype.Component;\n\n/**\n * 数据源AOP切面定义\n */\n@Component\n@Aspect\n@Slf4j\n@Order(4)\npublic class DataSourceAspect {\n\n  @Autowired\n  private Environment env;\n\n\n  //切换放在mapper接口的方法上，所以这里要配置AOP切面的切入点\n  @Pointcut(\"execution( * com.bmsoft.newborn.mapper.*.*.*(..))\")\n  public void dataSourcePointCut() {\n  }\n\n  @Before(\"dataSourcePointCut()\")\n  public void before(JoinPoint joinPoint) throws Exception {\n    Object target = joinPoint.getTarget();\n    /**\n     * Signature 包含了方法名、申明类型以及地址等信息\n     */\n    //方法名称\n    String method = joinPoint.getSignature().getName();\n    //参数值\n    Object[] paramValues = joinPoint.getArgs();\n    Class<?>[] clazz = target.getClass().getInterfaces();\n    Class<?>[] parameterTypes = ((MethodSignature) joinPoint.getSignature()).getMethod()\n        .getParameterTypes();\n    //获取参数类型\n    try {\n      //类上或者方法上存在注解\n      Method m = clazz[0].getMethod(method, parameterTypes);\n      Class<?> declaringClass = m.getDeclaringClass();\n      if (declaringClass.isAnnotationPresent(TargetDataSource.class)) {\n        TargetDataSource data = declaringClass.getAnnotation(TargetDataSource.class);\n        changeDataSource(data);\n      } else if (m.isAnnotationPresent(TargetDataSource.class)) {\n        TargetDataSource data = m.getAnnotation(TargetDataSource.class);\n        //可以根据参数获取当前数据源\n        changeDataSource(data);\n      }\n    } catch (Exception e) {\n      log.error(\"当前线程 \" + Thread.currentThread().getName() + \" 添加数据源失败\", e);\n    }\n  }\n\n  private void changeDataSource(TargetDataSource data) {\n    //可以根据参数获取当前数据源\n    String deafultSourceName = data.value();\n    log.info(\n            \"使用数据源 \" + Thread.currentThread().getName() + \" 添加数据源到-- \" + deafultSourceName\n                    + \" 本地线程变量\");\n    DynamicDataSourceHolder.putDataSource(deafultSourceName);\n  }\n\n  private void changeDataSource(Object[] paramValues, TargetDataSource data) {\n    //可以根据参数获取当前数据源\n    String deafultSourceName = data.value();\n    if (paramValues != null && paramValues.length > 0) {\n      log.info(\n          \"使用数据源 \" + Thread.currentThread().getName() + \" 添加数据源到-- \" + deafultSourceName\n              + \" 本地线程变量\");\n      DynamicDataSourceHolder.putDataSource(deafultSourceName);\n    }\n  }\n\n\n  //执行完切面后，将线程共享中的数据源名称清空\n  @After(\"dataSourcePointCut()\")\n  public void after(JoinPoint joinPoint) {\n    DynamicDataSourceHolder.removeDataSource();\n  }\n\n\n}\n```\n## springboot 关闭数据源自动配置，改为手动配置\n```\npackage com.bmsoft.newborn;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)\npublic class MicroNewbornServiceApplication {\n\n  @Bean\n  public BCryptPasswordEncoder bCryptPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n\n  public static void main(String[] args) {\n    SpringApplication.run(MicroNewbornServiceApplication.class, args);\n  }\n\n}\n```\n\n## 在mapper接口上使用数据源注解到目标数据源\n```\npackage com.bmsoft.newborn.mapper.inner;\n\n\nimport com.bmsoft.newborn.annotation.TargetDataSource;\nimport com.bmsoft.newborn.domain.inner.Dict;\nimport org.apache.ibatis.annotations.Param;\n\nimport java.util.List;\n\n@TargetDataSource(\"inner\")\npublic interface DictMapper  {\n\n  Dict selectById(@Param(\"code\") String code);\n\n  List<Dict> selectAllDict();\n\n}\n```\n## 注意\n1、同一个service中如果启动事务注解@Transaction，数据源切换将不起作用，需要改为分布式事务\n2、需要注意配置默认的数据源，不然在非注解的情况下，查询SQL会报错\n3、在aop 切换数据源时，可以在mapper中传入固定的参数，解析参数可以做切换数据源处理,利用反射获取主键方法的方法传参值进行切换\n```\n\n/**\n * 数据源AOP切面定义\n */\n@Component\n@Aspect\n@Slf4j\n@Order(4)\n@PropertySource(\"classpath:datasource.properties\")//这是多数据源属性文件路径\npublic class DataSourceAspect {\n\n    @Autowired\n    private Environment env;\n\n\n    //切换放在mapper接口的方法上，所以这里要配置AOP切面的切入点\n    @Pointcut(\"execution( * com.bmsoft.wfy.mapper.*.*.*(..))\")\n    public void dataSourcePointCut() {\n    }\n\n    @Before(\"dataSourcePointCut()\")\n    public void before(JoinPoint joinPoint) throws Exception {\n        Object target = joinPoint.getTarget();\n        /**\n         * Signature 包含了方法名、申明类型以及地址等信息\n         */\n        String class_name = joinPoint.getTarget().getClass().getName();\n\n        //方法名称\n        String method = joinPoint.getSignature().getName();\n        //参数值\n        Object[] paramValues = joinPoint.getArgs();\n        Class<?>[] clazz = target.getClass().getInterfaces();\n        Class<?>[] parameterTypes = ((MethodSignature) joinPoint.getSignature()).getMethod().getParameterTypes();\n        //获取参数类型\n        try {\n            Method m = clazz[0].getMethod(method, parameterTypes);\n            //如果方法上存在切换数据源的注解，则根据注解内容进行数据源切换\n            if (m != null && m.isAnnotationPresent(TargetDataSource.class)) {\n                TargetDataSource data = m.getAnnotation(TargetDataSource.class);\n                //可以根据参数获取当前数据源\n                String deafultSourceName = data.value();\n                if (paramValues != null && paramValues.length > 0) {\n                    for (int i = 0; i < paramValues.length; i++) {\n                        log.info(\"数据源方法\" + method);\n                        log.info(\"请求参数类型\" + parameterTypes[i]);\n                        if (parameterTypes[i] == Map.class) {\n                            log.info(\"Map类型值\" + paramValues[i]);\n                            Map<String, Object> map = (HashMap) paramValues[i];\n                            log.info(\"转换之后的Map类型值\" + map);\n                            //获取法院代码\n                            Object courtNumber = map.get(\"courtNumber\");\n                            String court =\"\";\n                            if(courtNumber!=null){\n                                court =String.valueOf(courtNumber);\n                            }\n                            changeDataSource(deafultSourceName, courtNumber, court);\n\n                        } else if (parameterTypes[i] == List.class) {\n                            log.info(\"List类型值\" + paramValues[i]);\n                        } else {\n                            log.info(\"对象类型值\" + paramValues[i]);\n                            final Map<String, String> stringStringMap = obj2Map(paramValues[i]);\n                            log.info(\"对象转为map后的值\" + stringStringMap);\n                            Object courtNumber = stringStringMap.get(\"courtNumber\");\n                            String court =\"\";\n                            if(courtNumber!=null){\n                                court =String.valueOf(courtNumber);\n                            }\n                            changeDataSource(deafultSourceName, courtNumber, court);\n                        }\n\n                    }\n                }\n            } else {\n                //TODO,默认MySQL数据源的处理\n                //mapper 接口没有数据源注解,使用MySQL数据库\n                log.info(\"使用默认mysql数据源\");\n            }\n        } catch (Exception e) {\n            log.error(\"当前线程 \" + Thread.currentThread().getName() + \" 添加数据源失败\", e);\n        }\n    }\n\n    //更换连接的数据源\n    private void changeDataSource(String deafultSourceName, Object courtNumber, String court) {\n        if (StringUtils.isNotBlank(court)&& !\"\".equals(court) &&!\"null\".equalsIgnoreCase(court)&&court.length()>=4) {\n            court = court.substring(0, 4);\n            //TODO,当前只有一个Sybase数据库,后期多个进行扩展\n            if ( StringUtils.isNotBlank(deafultSourceName)&&deafultSourceName.indexOf(\"sybase\") != -1) {\n                String key = \"datasource.sybase.\" + court;\n                //使用 3200 3201 3202  \n                String dataSourceName = env.getProperty(key);\n                DynamicDataSourceHolder.putDataSource(dataSourceName);\n                log.info(\"使用线程 \" + Thread.currentThread().getName() + \" sybase添加--案件 \" + \"法院代码---\" + courtNumber + \"--的数据源----\" + dataSourceName + \" 本地线程变量\");\n\n            } else if( StringUtils.isNotBlank(deafultSourceName)&&deafultSourceName.indexOf(\"mysql\") != -1){\n                //使用其他库的判断\n                String key = \"datasource.mysql.\" + court;\n                //使用 3200 3201 3202  \n                String dataSourceName = env.getProperty(key);\n                DynamicDataSourceHolder.putDataSource(dataSourceName);\n                log.info(\"使用线程 \" + Thread.currentThread().getName() + \"mysql 添加--执行 \" + \"法院代码---\" + courtNumber + \"--的数据源----\" + dataSourceName + \" 本地线程变量\");\n\n            }else if( StringUtils.isNotBlank(deafultSourceName)&&deafultSourceName.indexOf(\"oa\") != -1){\n                //使用其他库的判断\n                //log.info(\"使用线程 \" + Thread.currentThread().getName() + \"sybaseoa 添加--执行 \" + \"法院代码---\" + courtNumber + \"--的数据源----\" + dataSourceName + \" 本地线程变量\");\n                log.info(\"使用默认江苏高院OA\");\n\n                String key = \"datasource.oa.3200\";\n                //使用 3200 3201 3202 的办公oa\n                String dataSourceName = env.getProperty(key);\n                DynamicDataSourceHolder.putDataSource(dataSourceName);\n                log.info(\"使用线程 \" + Thread.currentThread().getName() + \"sybaseoa 添加--执行 \" + \"法院代码---\" + courtNumber + \"--的数据源----\" + dataSourceName + \" 本地线程变量\");\n            }\n        } else {\n            //TODO,没有传法院代码的情况默认使用集中库\n            //判断注解上的值,为集中库上的值\n            if (\"sybaseTtre\".equalsIgnoreCase(deafultSourceName)) {\n                DynamicDataSourceHolder.putDataSource(deafultSourceName);\n                log.info(\"使用Sybase集中库线程 \" + Thread.currentThread().getName() + \" 添加数据源到-- \" + deafultSourceName + \" 本地线程变量\");\n            }else{\n                //TODO 当事人测试使用,后期会更改\n                DynamicDataSourceHolder.putDataSource(\"sybaseTtre\");\n                log.info(\"使用Sybase集中库线程 \" + Thread.currentThread().getName() + \" 添加数据源到-- \" + deafultSourceName + \" 本地线程变量\");\n                //TODO,目前不传法院代码,只有一个集中库的情况,后期进行扩展\n            }\n        }\n    }\n\n    private static Map<String, String> obj2Map(Object obj) {\n        Map<String, String> map = new HashMap<String, String>();\n        // System.out.println(obj.getClass());\n        // 获取f对象对应类中的所有属性域\n        Field[] fields = obj.getClass().getDeclaredFields();\n        for (int i = 0, len = fields.length; i < len; i++) {\n            String varName = fields[i].getName();\n            //varName = varName.toLowerCase();//将key置为小写，默认为对象的属性\n            try {\n                // 获取原来的访问控制权限\n                boolean accessFlag = fields[i].isAccessible();\n                // 修改访问控制权限\n                fields[i].setAccessible(true);\n                // 获取在对象f中属性fields[i]对应的对象中的变量\n                Object o = fields[i].get(obj);\n                if (o != null) {\n                    map.put(varName, o.toString());\n                }\n                // System.out.println(\"传入的对象中包含一个如下的变量：\" + varName + \" = \" + o);\n                // 恢复访问控制权限\n                fields[i].setAccessible(accessFlag);\n            } catch (IllegalArgumentException ex) {\n                ex.printStackTrace();\n            } catch (IllegalAccessException ex) {\n                ex.printStackTrace();\n            }\n        }\n        return map;\n    }\n\n    //执行完切面后，将线程共享中的数据源名称清空\n    @After(\"dataSourcePointCut()\")\n    public void after(JoinPoint joinPoint) {\n        DynamicDataSourceHolder.removeDataSource();\n    }\n\n    public static void main(String[] args) {\n        String courtNumer = \"320100\";\n        System.out.println(courtNumer.substring(0, 4));\n    }\n    \n}\n\n```","slug":"springboot多数据源切换注解方式","published":1,"updated":"2019-07-04T06:00:17.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxoddk2l000als74z406yz7h","content":"<h1 id=\"springboot多数据源切换注解方式\"><a href=\"#springboot多数据源切换注解方式\" class=\"headerlink\" title=\"springboot多数据源切换注解方式\"></a>springboot多数据源切换注解方式</h1><h2 id=\"配置连接数据库信息\"><a href=\"#配置连接数据库信息\" class=\"headerlink\" title=\"配置连接数据库信息\"></a>配置连接数据库信息</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.inner</span><span class=\"selector-class\">.type</span>=com<span class=\"selector-class\">.alibaba</span><span class=\"selector-class\">.druid</span><span class=\"selector-class\">.pool</span><span class=\"selector-class\">.DruidDataSource</span></span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.inner</span><span class=\"selector-class\">.url</span>=jdbc:mysql:<span class=\"comment\">//</span></span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.inner</span><span class=\"selector-class\">.username</span>=root</span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.inner</span><span class=\"selector-class\">.password</span>=root </span><br><span class=\"line\"></span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.third</span><span class=\"selector-class\">.type</span>=com<span class=\"selector-class\">.alibaba</span><span class=\"selector-class\">.druid</span><span class=\"selector-class\">.pool</span><span class=\"selector-class\">.DruidDataSource</span></span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.third</span><span class=\"selector-class\">.url</span>=jdbc:mysql:</span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.third</span><span class=\"selector-class\">.username</span>=root</span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.third</span><span class=\"selector-class\">.password</span>=root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据源配置\"><a href=\"#数据源配置\" class=\"headerlink\" title=\"数据源配置\"></a>数据源配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DbDuridMysqlProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> DataSourceProperties dataSourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"innerDataSource\"</span>, destroyMethod = <span class=\"string\">\"close\"</span>, initMethod = <span class=\"string\">\"init\"</span>)</span><br><span class=\"line\">  <span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"spring.datasource.inner\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">innerDataSource</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    setDataSourcePool(druidDataSource);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"thirdDataSource\"</span>, destroyMethod = <span class=\"string\">\"close\"</span>, initMethod = <span class=\"string\">\"init\"</span>)</span><br><span class=\"line\">  <span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"spring.datasource.third\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">thirdDataSource</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    setDataSourcePool(druidDataSource);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态数据源持有者\"><a href=\"#动态数据源持有者\" class=\"headerlink\" title=\"动态数据源持有者\"></a>动态数据源持有者</h2><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态数据源持有者，负责利用ThreadLocal存取数据源名称</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DynamicDataSourceHolder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 本地线程共享对象</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> final ThreadLocal&lt;String&gt; THREAD_LOCAL = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">putDataSource</span>(<span class=\"params\">String name</span>)</span> &#123;</span><br><span class=\"line\">    THREAD_LOCAL.<span class=\"keyword\">set</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDataSource</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> THREAD_LOCAL.<span class=\"keyword\">get</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">removeDataSource</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    THREAD_LOCAL.<span class=\"keyword\">remove</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态数据源实现类\"><a href=\"#动态数据源实现类\" class=\"headerlink\" title=\"动态数据源实现类\"></a>动态数据源实现类</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态数据源实现类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicDataSource</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//数据源路由，此方用于产生要选取的数据源逻辑名称</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"type\">Object</span> determineCurrentLookupKey() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//从共享线程中获取数据源名称</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">DynamicDataSourceHolder</span>.getDataSource();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定于数据源注解-主要用于dao切换数据源\"><a href=\"#定于数据源注解-主要用于dao切换数据源\" class=\"headerlink\" title=\"定于数据源注解,主要用于dao切换数据源\"></a>定于数据源注解,主要用于dao切换数据源</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标数据源注解，注解在方法上指定数据源的名称</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class=\"line\"><span class=\"variable\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"variable\">@Documented</span></span><br><span class=\"line\">public <span class=\"variable\">@interface</span> TargetDataSource &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//此处接收的是数据源的名称</span></span><br><span class=\"line\">  <span class=\"selector-tag\">String</span> <span class=\"selector-tag\">value</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据源配置-加载配置的数据源，形成key-数据源\"><a href=\"#数据源配置-加载配置的数据源，形成key-数据源\" class=\"headerlink\" title=\"数据源配置,加载配置的数据源，形成key - 数据源\"></a>数据源配置,加载配置的数据源，形成key - 数据源</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bmsoft.newborn.config.datasource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.bmsoft.newborn.config.dds.DynamicDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.<span class=\"keyword\">annotation</span>.MapperScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.<span class=\"keyword\">annotation</span>.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Primary;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据源配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&#123;<span class=\"meta-string\">\"com.bmsoft.newborn.mapper.inner\"</span>, <span class=\"meta-string\">\"com.bmsoft.newborn.mapper.third\"</span>&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> DbDuridMysqlProperties duridMysqlProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Primary</span> 该注解表示在同一个接口有多个实现类可以注入的时候，默认选择哪一个，而不是让<span class=\"doctag\">@autowire</span>注解报错</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Qualifier</span> 根据名称进行注入，通常是在具有相同的多个类型的实例的一个注入（例如有多个DataSource类型的实例）</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Bean(name = <span class=\"meta-string\">\"dataSource\"</span>)</span></span><br><span class=\"line\">  <span class=\"meta\">@Primary</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> DynamicDataSource dataSource() throws SQLException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//按照目标数据源名称和目标数据源对象的映射存放在Map中</span></span><br><span class=\"line\">    <span class=\"comment\">//采用是想AbstractRoutingDataSource的对象包装多数据源</span></span><br><span class=\"line\">    DynamicDataSource dynamicDataSource = new DynamicDataSource();</span><br><span class=\"line\">    Map&lt;Object, Object&gt; targetDataSources = new HashMap&lt;&gt;();</span><br><span class=\"line\">    targetDataSources.put(<span class=\"string\">\"inner\"</span>, duridMysqlProperties.innerDataSource());</span><br><span class=\"line\">    targetDataSources.put(<span class=\"string\">\"third\"</span>, duridMysqlProperties.thirdDataSource());</span><br><span class=\"line\"></span><br><span class=\"line\">    dynamicDataSource.setTargetDataSources(targetDataSources);</span><br><span class=\"line\">    <span class=\"comment\">//设置默认的数据源，当拿不到数据源时，使用此配置</span></span><br><span class=\"line\">    dynamicDataSource.setDefaultTargetDataSource(duridMysqlProperties.innerDataSource());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dynamicDataSource;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> PlatformTransactionManager txManager() throws SQLException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new DataSourceTransactionManager(dataSource());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据源AOP切面定义\"><a href=\"#数据源AOP切面定义\" class=\"headerlink\" title=\"数据源AOP切面定义\"></a>数据源AOP切面定义</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bmsoft.newborn.config.datasource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.bmsoft.newborn.<span class=\"keyword\">annotation</span>.TargetDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.bmsoft.newborn.config.dds.DynamicDataSourceHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.<span class=\"keyword\">annotation</span>.After;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.<span class=\"keyword\">annotation</span>.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.<span class=\"keyword\">annotation</span>.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.<span class=\"keyword\">annotation</span>.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.<span class=\"keyword\">annotation</span>.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.<span class=\"keyword\">annotation</span>.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.env.Environment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据源AOP切面定义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Order(4)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Environment env;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//切换放在mapper接口的方法上，所以这里要配置AOP切面的切入点</span></span><br><span class=\"line\">  <span class=\"meta\">@Pointcut(<span class=\"meta-string\">\"execution( * com.bmsoft.newborn.mapper.*.*.*(..))\"</span>)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> void dataSourcePointCut() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Before(<span class=\"meta-string\">\"dataSourcePointCut()\"</span>)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> void before(JoinPoint joinPoint) throws Exception &#123;</span><br><span class=\"line\">    Object target = joinPoint.getTarget();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Signature 包含了方法名、申明类型以及地址等信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//方法名称</span></span><br><span class=\"line\">    String method = joinPoint.getSignature().getName();</span><br><span class=\"line\">    <span class=\"comment\">//参数值</span></span><br><span class=\"line\">    Object[] paramValues = joinPoint.getArgs();</span><br><span class=\"line\">    Class&lt;?&gt;[] clazz = target.getClass().getInterfaces();</span><br><span class=\"line\">    Class&lt;?&gt;[] parameterTypes = ((MethodSignature) joinPoint.getSignature()).getMethod()</span><br><span class=\"line\">        .getParameterTypes();</span><br><span class=\"line\">    <span class=\"comment\">//获取参数类型</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//类上或者方法上存在注解</span></span><br><span class=\"line\">      Method m = clazz[<span class=\"number\">0</span>].getMethod(method, parameterTypes);</span><br><span class=\"line\">      Class&lt;?&gt; declaringClass = m.getDeclaringClass();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (declaringClass.isAnnotationPresent(TargetDataSource.<span class=\"keyword\">class</span>)) &#123;</span><br><span class=\"line\">        TargetDataSource <span class=\"keyword\">data</span> = declaringClass.getAnnotation(TargetDataSource.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">        changeDataSource(<span class=\"keyword\">data</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (m.isAnnotationPresent(TargetDataSource.<span class=\"keyword\">class</span>)) &#123;</span><br><span class=\"line\">        TargetDataSource <span class=\"keyword\">data</span> = m.getAnnotation(TargetDataSource.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">        <span class=\"comment\">//可以根据参数获取当前数据源</span></span><br><span class=\"line\">        changeDataSource(<span class=\"keyword\">data</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      log.error(<span class=\"string\">\"当前线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" 添加数据源失败\"</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> void changeDataSource(TargetDataSource <span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以根据参数获取当前数据源</span></span><br><span class=\"line\">    String deafultSourceName = <span class=\"keyword\">data</span>.value();</span><br><span class=\"line\">    log.info(</span><br><span class=\"line\">            <span class=\"string\">\"使用数据源 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" 添加数据源到-- \"</span> + deafultSourceName</span><br><span class=\"line\">                    + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\">    DynamicDataSourceHolder.putDataSource(deafultSourceName);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> void changeDataSource(Object[] paramValues, TargetDataSource <span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以根据参数获取当前数据源</span></span><br><span class=\"line\">    String deafultSourceName = <span class=\"keyword\">data</span>.value();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (paramValues != <span class=\"literal\">null</span> &amp;&amp; paramValues.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      log.info(</span><br><span class=\"line\">          <span class=\"string\">\"使用数据源 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" 添加数据源到-- \"</span> + deafultSourceName</span><br><span class=\"line\">              + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\">      DynamicDataSourceHolder.putDataSource(deafultSourceName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//执行完切面后，将线程共享中的数据源名称清空</span></span><br><span class=\"line\">  <span class=\"meta\">@After(<span class=\"meta-string\">\"dataSourcePointCut()\"</span>)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> void after(JoinPoint joinPoint) &#123;</span><br><span class=\"line\">    DynamicDataSourceHolder.removeDataSource();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"springboot-关闭数据源自动配置，改为手动配置\"><a href=\"#springboot-关闭数据源自动配置，改为手动配置\" class=\"headerlink\" title=\"springboot 关闭数据源自动配置，改为手动配置\"></a>springboot 关闭数据源自动配置，改为手动配置</h2><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bmsoft.newborn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span>(exclude = DataSourceAutoConfiguration.<span class=\"keyword\">class</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MicroNewbornServiceApplication</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> BCryptPasswordEncoder bCryptPasswordEncoder() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BCryptPasswordEncoder();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</span><br><span class=\"line\">    SpringApplication.run(MicroNewbornServiceApplication.<span class=\"keyword\">class</span>, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在mapper接口上使用数据源注解到目标数据源\"><a href=\"#在mapper接口上使用数据源注解到目标数据源\" class=\"headerlink\" title=\"在mapper接口上使用数据源注解到目标数据源\"></a>在mapper接口上使用数据源注解到目标数据源</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">package</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.bmsoft</span><span class=\"selector-class\">.newborn</span><span class=\"selector-class\">.mapper</span><span class=\"selector-class\">.inner</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.bmsoft</span><span class=\"selector-class\">.newborn</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.TargetDataSource</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.bmsoft</span><span class=\"selector-class\">.newborn</span><span class=\"selector-class\">.domain</span><span class=\"selector-class\">.inner</span><span class=\"selector-class\">.Dict</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.apache</span><span class=\"selector-class\">.ibatis</span><span class=\"selector-class\">.annotations</span><span class=\"selector-class\">.Param</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">java</span><span class=\"selector-class\">.util</span><span class=\"selector-class\">.List</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">TargetDataSource</span>(\"<span class=\"keyword\">inner</span>\")</span><br><span class=\"line\"><span class=\"keyword\">public</span> interface DictMapper  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">Dict</span> <span class=\"selector-tag\">selectById</span>(@<span class=\"keyword\">Param</span>(\"<span class=\"keyword\">code</span>\") String code);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">List</span>&lt;<span class=\"selector-tag\">Dict</span>&gt; <span class=\"selector-tag\">selectAllDict</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>1、同一个service中如果启动事务注解@Transaction，数据源切换将不起作用，需要改为分布式事务<br>2、需要注意配置默认的数据源，不然在非注解的情况下，查询SQL会报错<br>3、在aop 切换数据源时，可以在mapper中传入固定的参数，解析参数可以做切换数据源处理,利用反射获取主键方法的方法传参值进行切换</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据源AOP切面定义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@Component</span><br><span class=\"line\">@Aspect</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@Order(<span class=\"number\">4</span>)</span><br><span class=\"line\">@PropertySource(<span class=\"string\">\"classpath:datasource.properties\"</span>)<span class=\"comment\">//这是多数据源属性文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> class DataSourceAspect &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment env;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//切换放在mapper接口的方法上，所以这里要配置AOP切面的切入点</span></span><br><span class=\"line\">    @Pointcut(<span class=\"string\">\"execution( * com.bmsoft.wfy.mapper.*.*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> dataSourcePointCut() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before(<span class=\"string\">\"dataSourcePointCut()\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> before(JoinPoint joinPoint) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Object</span> target = joinPoint.getTarget();</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Signature 包含了方法名、申明类型以及地址等信息</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">String</span> class_name = joinPoint.getTarget().getClass().getName();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方法名称</span></span><br><span class=\"line\">        <span class=\"keyword\">String</span> method = joinPoint.getSignature().getName();</span><br><span class=\"line\">        <span class=\"comment\">//参数值</span></span><br><span class=\"line\">        <span class=\"keyword\">Object</span>[] paramValues = joinPoint.getArgs();</span><br><span class=\"line\">        Class&lt;?&gt;[] clazz = target.getClass().getInterfaces();</span><br><span class=\"line\">        Class&lt;?&gt;[] parameterTypes = ((MethodSignature) joinPoint.getSignature()).getMethod().getParameterTypes();</span><br><span class=\"line\">        <span class=\"comment\">//获取参数类型</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Method m = clazz[<span class=\"number\">0</span>].getMethod(method, parameterTypes);</span><br><span class=\"line\">            <span class=\"comment\">//如果方法上存在切换数据源的注解，则根据注解内容进行数据源切换</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m != <span class=\"keyword\">null</span> &amp;&amp; m.isAnnotationPresent(TargetDataSource.class)) &#123;</span><br><span class=\"line\">                TargetDataSource data = m.getAnnotation(TargetDataSource.class);</span><br><span class=\"line\">                <span class=\"comment\">//可以根据参数获取当前数据源</span></span><br><span class=\"line\">                <span class=\"keyword\">String</span> deafultSourceName = data.value();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (paramValues != <span class=\"keyword\">null</span> &amp;&amp; paramValues.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; paramValues.length; i++) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">log</span>.info(<span class=\"string\">\"数据源方法\"</span> + method);</span><br><span class=\"line\">                        <span class=\"built_in\">log</span>.info(<span class=\"string\">\"请求参数类型\"</span> + parameterTypes[i]);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (parameterTypes[i] == Map.class) &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">log</span>.info(<span class=\"string\">\"Map类型值\"</span> + paramValues[i]);</span><br><span class=\"line\">                            Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt; <span class=\"built_in\">map</span> = (<span class=\"keyword\">HashMap</span>) paramValues[i];</span><br><span class=\"line\">                            <span class=\"built_in\">log</span>.info(<span class=\"string\">\"转换之后的Map类型值\"</span> + <span class=\"built_in\">map</span>);</span><br><span class=\"line\">                            <span class=\"comment\">//获取法院代码</span></span><br><span class=\"line\">                            <span class=\"keyword\">Object</span> courtNumber = <span class=\"built_in\">map</span>.<span class=\"built_in\">get</span>(<span class=\"string\">\"courtNumber\"</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">String</span> court =<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(courtNumber!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                                court =<span class=\"keyword\">String</span>.valueOf(courtNumber);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            changeDataSource(deafultSourceName, courtNumber, court);</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parameterTypes[i] == List.class) &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">log</span>.info(<span class=\"string\">\"List类型值\"</span> + paramValues[i]);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">log</span>.info(<span class=\"string\">\"对象类型值\"</span> + paramValues[i]);</span><br><span class=\"line\">                            <span class=\"keyword\">final</span> Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; stringStringMap = obj2Map(paramValues[i]);</span><br><span class=\"line\">                            <span class=\"built_in\">log</span>.info(<span class=\"string\">\"对象转为map后的值\"</span> + stringStringMap);</span><br><span class=\"line\">                            <span class=\"keyword\">Object</span> courtNumber = stringStringMap.<span class=\"built_in\">get</span>(<span class=\"string\">\"courtNumber\"</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">String</span> court =<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(courtNumber!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                                court =<span class=\"keyword\">String</span>.valueOf(courtNumber);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            changeDataSource(deafultSourceName, courtNumber, court);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//TODO,默认MySQL数据源的处理</span></span><br><span class=\"line\">                <span class=\"comment\">//mapper 接口没有数据源注解,使用MySQL数据库</span></span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用默认mysql数据源\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">log</span>.error(<span class=\"string\">\"当前线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" 添加数据源失败\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更换连接的数据源</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> changeDataSource(<span class=\"keyword\">String</span> deafultSourceName, <span class=\"keyword\">Object</span> courtNumber, <span class=\"keyword\">String</span> court) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(court)&amp;&amp; !<span class=\"string\">\"\"</span>.equals(court) &amp;&amp;!<span class=\"string\">\"null\"</span>.equalsIgnoreCase(court)&amp;&amp;court.length()&gt;=<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            court = court.substring(<span class=\"number\">0</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">            <span class=\"comment\">//TODO,当前只有一个Sybase数据库,后期多个进行扩展</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( StringUtils.isNotBlank(deafultSourceName)&amp;&amp;deafultSourceName.indexOf(<span class=\"string\">\"sybase\"</span>) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">String</span> <span class=\"built_in\">key</span> = <span class=\"string\">\"datasource.sybase.\"</span> + court;</span><br><span class=\"line\">                <span class=\"comment\">//使用 3200 3201 3202  </span></span><br><span class=\"line\">                <span class=\"keyword\">String</span> dataSourceName = env.getProperty(<span class=\"built_in\">key</span>);</span><br><span class=\"line\">                DynamicDataSourceHolder.putDataSource(dataSourceName);</span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" sybase添加--案件 \"</span> + <span class=\"string\">\"法院代码---\"</span> + courtNumber + <span class=\"string\">\"--的数据源----\"</span> + dataSourceName + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( StringUtils.isNotBlank(deafultSourceName)&amp;&amp;deafultSourceName.indexOf(<span class=\"string\">\"mysql\"</span>) != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//使用其他库的判断</span></span><br><span class=\"line\">                <span class=\"keyword\">String</span> <span class=\"built_in\">key</span> = <span class=\"string\">\"datasource.mysql.\"</span> + court;</span><br><span class=\"line\">                <span class=\"comment\">//使用 3200 3201 3202  </span></span><br><span class=\"line\">                <span class=\"keyword\">String</span> dataSourceName = env.getProperty(<span class=\"built_in\">key</span>);</span><br><span class=\"line\">                DynamicDataSourceHolder.putDataSource(dataSourceName);</span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\"mysql 添加--执行 \"</span> + <span class=\"string\">\"法院代码---\"</span> + courtNumber + <span class=\"string\">\"--的数据源----\"</span> + dataSourceName + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( StringUtils.isNotBlank(deafultSourceName)&amp;&amp;deafultSourceName.indexOf(<span class=\"string\">\"oa\"</span>) != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//使用其他库的判断</span></span><br><span class=\"line\">                <span class=\"comment\">//log.info(\"使用线程 \" + Thread.currentThread().getName() + \"sybaseoa 添加--执行 \" + \"法院代码---\" + courtNumber + \"--的数据源----\" + dataSourceName + \" 本地线程变量\");</span></span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用默认江苏高院OA\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">String</span> <span class=\"built_in\">key</span> = <span class=\"string\">\"datasource.oa.3200\"</span>;</span><br><span class=\"line\">                <span class=\"comment\">//使用 3200 3201 3202 的办公oa</span></span><br><span class=\"line\">                <span class=\"keyword\">String</span> dataSourceName = env.getProperty(<span class=\"built_in\">key</span>);</span><br><span class=\"line\">                DynamicDataSourceHolder.putDataSource(dataSourceName);</span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\"sybaseoa 添加--执行 \"</span> + <span class=\"string\">\"法院代码---\"</span> + courtNumber + <span class=\"string\">\"--的数据源----\"</span> + dataSourceName + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//TODO,没有传法院代码的情况默认使用集中库</span></span><br><span class=\"line\">            <span class=\"comment\">//判断注解上的值,为集中库上的值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"sybaseTtre\"</span>.equalsIgnoreCase(deafultSourceName)) &#123;</span><br><span class=\"line\">                DynamicDataSourceHolder.putDataSource(deafultSourceName);</span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用Sybase集中库线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" 添加数据源到-- \"</span> + deafultSourceName + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//TODO 当事人测试使用,后期会更改</span></span><br><span class=\"line\">                DynamicDataSourceHolder.putDataSource(<span class=\"string\">\"sybaseTtre\"</span>);</span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用Sybase集中库线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" 添加数据源到-- \"</span> + deafultSourceName + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">//TODO,目前不传法院代码,只有一个集中库的情况,后期进行扩展</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; obj2Map(<span class=\"keyword\">Object</span> obj) &#123;</span><br><span class=\"line\">        Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; <span class=\"built_in\">map</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">HashMap</span>&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(obj.getClass());</span></span><br><span class=\"line\">        <span class=\"comment\">// 获取f对象对应类中的所有属性域</span></span><br><span class=\"line\">        Field[] fields = obj.getClass().getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>, len = fields.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">String</span> varName = fields[i].getName();</span><br><span class=\"line\">            <span class=\"comment\">//varName = varName.toLowerCase();//将key置为小写，默认为对象的属性</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取原来的访问控制权限</span></span><br><span class=\"line\">                <span class=\"built_in\">boolean</span> accessFlag = fields[i].isAccessible();</span><br><span class=\"line\">                <span class=\"comment\">// 修改访问控制权限</span></span><br><span class=\"line\">                fields[i].setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 获取在对象f中属性fields[i]对应的对象中的变量</span></span><br><span class=\"line\">                <span class=\"keyword\">Object</span> o = fields[i].<span class=\"built_in\">get</span>(obj);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (o != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">map</span>.put(varName, o.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// System.out.println(\"传入的对象中包含一个如下的变量：\" + varName + \" = \" + o);</span></span><br><span class=\"line\">                <span class=\"comment\">// 恢复访问控制权限</span></span><br><span class=\"line\">                fields[i].setAccessible(accessFlag);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class=\"line\">                ex.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IllegalAccessException ex) &#123;</span><br><span class=\"line\">                ex.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">map</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行完切面后，将线程共享中的数据源名称清空</span></span><br><span class=\"line\">    @After(<span class=\"string\">\"dataSourcePointCut()\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> after(JoinPoint joinPoint) &#123;</span><br><span class=\"line\">        DynamicDataSourceHolder.removeDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">String</span> courtNumer = <span class=\"string\">\"320100\"</span>;</span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(courtNumer.substring(<span class=\"number\">0</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"springboot多数据源切换注解方式\"><a href=\"#springboot多数据源切换注解方式\" class=\"headerlink\" title=\"springboot多数据源切换注解方式\"></a>springboot多数据源切换注解方式</h1><h2 id=\"配置连接数据库信息\"><a href=\"#配置连接数据库信息\" class=\"headerlink\" title=\"配置连接数据库信息\"></a>配置连接数据库信息</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.inner</span><span class=\"selector-class\">.type</span>=com<span class=\"selector-class\">.alibaba</span><span class=\"selector-class\">.druid</span><span class=\"selector-class\">.pool</span><span class=\"selector-class\">.DruidDataSource</span></span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.inner</span><span class=\"selector-class\">.url</span>=jdbc:mysql:<span class=\"comment\">//</span></span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.inner</span><span class=\"selector-class\">.username</span>=root</span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.inner</span><span class=\"selector-class\">.password</span>=root </span><br><span class=\"line\"></span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.third</span><span class=\"selector-class\">.type</span>=com<span class=\"selector-class\">.alibaba</span><span class=\"selector-class\">.druid</span><span class=\"selector-class\">.pool</span><span class=\"selector-class\">.DruidDataSource</span></span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.third</span><span class=\"selector-class\">.url</span>=jdbc:mysql:</span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.third</span><span class=\"selector-class\">.username</span>=root</span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.third</span><span class=\"selector-class\">.password</span>=root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据源配置\"><a href=\"#数据源配置\" class=\"headerlink\" title=\"数据源配置\"></a>数据源配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DbDuridMysqlProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> DataSourceProperties dataSourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"innerDataSource\"</span>, destroyMethod = <span class=\"string\">\"close\"</span>, initMethod = <span class=\"string\">\"init\"</span>)</span><br><span class=\"line\">  <span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"spring.datasource.inner\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">innerDataSource</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    setDataSourcePool(druidDataSource);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"thirdDataSource\"</span>, destroyMethod = <span class=\"string\">\"close\"</span>, initMethod = <span class=\"string\">\"init\"</span>)</span><br><span class=\"line\">  <span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"spring.datasource.third\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">thirdDataSource</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    setDataSourcePool(druidDataSource);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态数据源持有者\"><a href=\"#动态数据源持有者\" class=\"headerlink\" title=\"动态数据源持有者\"></a>动态数据源持有者</h2><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态数据源持有者，负责利用ThreadLocal存取数据源名称</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DynamicDataSourceHolder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 本地线程共享对象</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> final ThreadLocal&lt;String&gt; THREAD_LOCAL = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">putDataSource</span>(<span class=\"params\">String name</span>)</span> &#123;</span><br><span class=\"line\">    THREAD_LOCAL.<span class=\"keyword\">set</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDataSource</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> THREAD_LOCAL.<span class=\"keyword\">get</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">removeDataSource</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    THREAD_LOCAL.<span class=\"keyword\">remove</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态数据源实现类\"><a href=\"#动态数据源实现类\" class=\"headerlink\" title=\"动态数据源实现类\"></a>动态数据源实现类</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态数据源实现类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicDataSource</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//数据源路由，此方用于产生要选取的数据源逻辑名称</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"type\">Object</span> determineCurrentLookupKey() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//从共享线程中获取数据源名称</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">DynamicDataSourceHolder</span>.getDataSource();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定于数据源注解-主要用于dao切换数据源\"><a href=\"#定于数据源注解-主要用于dao切换数据源\" class=\"headerlink\" title=\"定于数据源注解,主要用于dao切换数据源\"></a>定于数据源注解,主要用于dao切换数据源</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标数据源注解，注解在方法上指定数据源的名称</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable\">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class=\"line\"><span class=\"variable\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"variable\">@Documented</span></span><br><span class=\"line\">public <span class=\"variable\">@interface</span> TargetDataSource &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//此处接收的是数据源的名称</span></span><br><span class=\"line\">  <span class=\"selector-tag\">String</span> <span class=\"selector-tag\">value</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据源配置-加载配置的数据源，形成key-数据源\"><a href=\"#数据源配置-加载配置的数据源，形成key-数据源\" class=\"headerlink\" title=\"数据源配置,加载配置的数据源，形成key - 数据源\"></a>数据源配置,加载配置的数据源，形成key - 数据源</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bmsoft.newborn.config.datasource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.bmsoft.newborn.config.dds.DynamicDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.<span class=\"keyword\">annotation</span>.MapperScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.<span class=\"keyword\">annotation</span>.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Primary;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据源配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&#123;<span class=\"meta-string\">\"com.bmsoft.newborn.mapper.inner\"</span>, <span class=\"meta-string\">\"com.bmsoft.newborn.mapper.third\"</span>&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> DbDuridMysqlProperties duridMysqlProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Primary</span> 该注解表示在同一个接口有多个实现类可以注入的时候，默认选择哪一个，而不是让<span class=\"doctag\">@autowire</span>注解报错</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Qualifier</span> 根据名称进行注入，通常是在具有相同的多个类型的实例的一个注入（例如有多个DataSource类型的实例）</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Bean(name = <span class=\"meta-string\">\"dataSource\"</span>)</span></span><br><span class=\"line\">  <span class=\"meta\">@Primary</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> DynamicDataSource dataSource() throws SQLException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//按照目标数据源名称和目标数据源对象的映射存放在Map中</span></span><br><span class=\"line\">    <span class=\"comment\">//采用是想AbstractRoutingDataSource的对象包装多数据源</span></span><br><span class=\"line\">    DynamicDataSource dynamicDataSource = new DynamicDataSource();</span><br><span class=\"line\">    Map&lt;Object, Object&gt; targetDataSources = new HashMap&lt;&gt;();</span><br><span class=\"line\">    targetDataSources.put(<span class=\"string\">\"inner\"</span>, duridMysqlProperties.innerDataSource());</span><br><span class=\"line\">    targetDataSources.put(<span class=\"string\">\"third\"</span>, duridMysqlProperties.thirdDataSource());</span><br><span class=\"line\"></span><br><span class=\"line\">    dynamicDataSource.setTargetDataSources(targetDataSources);</span><br><span class=\"line\">    <span class=\"comment\">//设置默认的数据源，当拿不到数据源时，使用此配置</span></span><br><span class=\"line\">    dynamicDataSource.setDefaultTargetDataSource(duridMysqlProperties.innerDataSource());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dynamicDataSource;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> PlatformTransactionManager txManager() throws SQLException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new DataSourceTransactionManager(dataSource());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据源AOP切面定义\"><a href=\"#数据源AOP切面定义\" class=\"headerlink\" title=\"数据源AOP切面定义\"></a>数据源AOP切面定义</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bmsoft.newborn.config.datasource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.bmsoft.newborn.<span class=\"keyword\">annotation</span>.TargetDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.bmsoft.newborn.config.dds.DynamicDataSourceHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.<span class=\"keyword\">annotation</span>.After;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.<span class=\"keyword\">annotation</span>.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.<span class=\"keyword\">annotation</span>.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.<span class=\"keyword\">annotation</span>.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.<span class=\"keyword\">annotation</span>.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.<span class=\"keyword\">annotation</span>.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.env.Environment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据源AOP切面定义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Order(4)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Environment env;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//切换放在mapper接口的方法上，所以这里要配置AOP切面的切入点</span></span><br><span class=\"line\">  <span class=\"meta\">@Pointcut(<span class=\"meta-string\">\"execution( * com.bmsoft.newborn.mapper.*.*.*(..))\"</span>)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> void dataSourcePointCut() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Before(<span class=\"meta-string\">\"dataSourcePointCut()\"</span>)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> void before(JoinPoint joinPoint) throws Exception &#123;</span><br><span class=\"line\">    Object target = joinPoint.getTarget();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Signature 包含了方法名、申明类型以及地址等信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//方法名称</span></span><br><span class=\"line\">    String method = joinPoint.getSignature().getName();</span><br><span class=\"line\">    <span class=\"comment\">//参数值</span></span><br><span class=\"line\">    Object[] paramValues = joinPoint.getArgs();</span><br><span class=\"line\">    Class&lt;?&gt;[] clazz = target.getClass().getInterfaces();</span><br><span class=\"line\">    Class&lt;?&gt;[] parameterTypes = ((MethodSignature) joinPoint.getSignature()).getMethod()</span><br><span class=\"line\">        .getParameterTypes();</span><br><span class=\"line\">    <span class=\"comment\">//获取参数类型</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//类上或者方法上存在注解</span></span><br><span class=\"line\">      Method m = clazz[<span class=\"number\">0</span>].getMethod(method, parameterTypes);</span><br><span class=\"line\">      Class&lt;?&gt; declaringClass = m.getDeclaringClass();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (declaringClass.isAnnotationPresent(TargetDataSource.<span class=\"keyword\">class</span>)) &#123;</span><br><span class=\"line\">        TargetDataSource <span class=\"keyword\">data</span> = declaringClass.getAnnotation(TargetDataSource.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">        changeDataSource(<span class=\"keyword\">data</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (m.isAnnotationPresent(TargetDataSource.<span class=\"keyword\">class</span>)) &#123;</span><br><span class=\"line\">        TargetDataSource <span class=\"keyword\">data</span> = m.getAnnotation(TargetDataSource.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">        <span class=\"comment\">//可以根据参数获取当前数据源</span></span><br><span class=\"line\">        changeDataSource(<span class=\"keyword\">data</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      log.error(<span class=\"string\">\"当前线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" 添加数据源失败\"</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> void changeDataSource(TargetDataSource <span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以根据参数获取当前数据源</span></span><br><span class=\"line\">    String deafultSourceName = <span class=\"keyword\">data</span>.value();</span><br><span class=\"line\">    log.info(</span><br><span class=\"line\">            <span class=\"string\">\"使用数据源 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" 添加数据源到-- \"</span> + deafultSourceName</span><br><span class=\"line\">                    + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\">    DynamicDataSourceHolder.putDataSource(deafultSourceName);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> void changeDataSource(Object[] paramValues, TargetDataSource <span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以根据参数获取当前数据源</span></span><br><span class=\"line\">    String deafultSourceName = <span class=\"keyword\">data</span>.value();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (paramValues != <span class=\"literal\">null</span> &amp;&amp; paramValues.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      log.info(</span><br><span class=\"line\">          <span class=\"string\">\"使用数据源 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" 添加数据源到-- \"</span> + deafultSourceName</span><br><span class=\"line\">              + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\">      DynamicDataSourceHolder.putDataSource(deafultSourceName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//执行完切面后，将线程共享中的数据源名称清空</span></span><br><span class=\"line\">  <span class=\"meta\">@After(<span class=\"meta-string\">\"dataSourcePointCut()\"</span>)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> void after(JoinPoint joinPoint) &#123;</span><br><span class=\"line\">    DynamicDataSourceHolder.removeDataSource();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"springboot-关闭数据源自动配置，改为手动配置\"><a href=\"#springboot-关闭数据源自动配置，改为手动配置\" class=\"headerlink\" title=\"springboot 关闭数据源自动配置，改为手动配置\"></a>springboot 关闭数据源自动配置，改为手动配置</h2><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bmsoft.newborn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span>(exclude = DataSourceAutoConfiguration.<span class=\"keyword\">class</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MicroNewbornServiceApplication</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> BCryptPasswordEncoder bCryptPasswordEncoder() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BCryptPasswordEncoder();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</span><br><span class=\"line\">    SpringApplication.run(MicroNewbornServiceApplication.<span class=\"keyword\">class</span>, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在mapper接口上使用数据源注解到目标数据源\"><a href=\"#在mapper接口上使用数据源注解到目标数据源\" class=\"headerlink\" title=\"在mapper接口上使用数据源注解到目标数据源\"></a>在mapper接口上使用数据源注解到目标数据源</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">package</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.bmsoft</span><span class=\"selector-class\">.newborn</span><span class=\"selector-class\">.mapper</span><span class=\"selector-class\">.inner</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.bmsoft</span><span class=\"selector-class\">.newborn</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.TargetDataSource</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.bmsoft</span><span class=\"selector-class\">.newborn</span><span class=\"selector-class\">.domain</span><span class=\"selector-class\">.inner</span><span class=\"selector-class\">.Dict</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.apache</span><span class=\"selector-class\">.ibatis</span><span class=\"selector-class\">.annotations</span><span class=\"selector-class\">.Param</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">java</span><span class=\"selector-class\">.util</span><span class=\"selector-class\">.List</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">TargetDataSource</span>(\"<span class=\"keyword\">inner</span>\")</span><br><span class=\"line\"><span class=\"keyword\">public</span> interface DictMapper  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">Dict</span> <span class=\"selector-tag\">selectById</span>(@<span class=\"keyword\">Param</span>(\"<span class=\"keyword\">code</span>\") String code);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">List</span>&lt;<span class=\"selector-tag\">Dict</span>&gt; <span class=\"selector-tag\">selectAllDict</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>1、同一个service中如果启动事务注解@Transaction，数据源切换将不起作用，需要改为分布式事务<br>2、需要注意配置默认的数据源，不然在非注解的情况下，查询SQL会报错<br>3、在aop 切换数据源时，可以在mapper中传入固定的参数，解析参数可以做切换数据源处理,利用反射获取主键方法的方法传参值进行切换</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据源AOP切面定义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@Component</span><br><span class=\"line\">@Aspect</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">@Order(<span class=\"number\">4</span>)</span><br><span class=\"line\">@PropertySource(<span class=\"string\">\"classpath:datasource.properties\"</span>)<span class=\"comment\">//这是多数据源属性文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> class DataSourceAspect &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment env;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//切换放在mapper接口的方法上，所以这里要配置AOP切面的切入点</span></span><br><span class=\"line\">    @Pointcut(<span class=\"string\">\"execution( * com.bmsoft.wfy.mapper.*.*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> dataSourcePointCut() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before(<span class=\"string\">\"dataSourcePointCut()\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> before(JoinPoint joinPoint) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Object</span> target = joinPoint.getTarget();</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Signature 包含了方法名、申明类型以及地址等信息</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">String</span> class_name = joinPoint.getTarget().getClass().getName();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方法名称</span></span><br><span class=\"line\">        <span class=\"keyword\">String</span> method = joinPoint.getSignature().getName();</span><br><span class=\"line\">        <span class=\"comment\">//参数值</span></span><br><span class=\"line\">        <span class=\"keyword\">Object</span>[] paramValues = joinPoint.getArgs();</span><br><span class=\"line\">        Class&lt;?&gt;[] clazz = target.getClass().getInterfaces();</span><br><span class=\"line\">        Class&lt;?&gt;[] parameterTypes = ((MethodSignature) joinPoint.getSignature()).getMethod().getParameterTypes();</span><br><span class=\"line\">        <span class=\"comment\">//获取参数类型</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Method m = clazz[<span class=\"number\">0</span>].getMethod(method, parameterTypes);</span><br><span class=\"line\">            <span class=\"comment\">//如果方法上存在切换数据源的注解，则根据注解内容进行数据源切换</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m != <span class=\"keyword\">null</span> &amp;&amp; m.isAnnotationPresent(TargetDataSource.class)) &#123;</span><br><span class=\"line\">                TargetDataSource data = m.getAnnotation(TargetDataSource.class);</span><br><span class=\"line\">                <span class=\"comment\">//可以根据参数获取当前数据源</span></span><br><span class=\"line\">                <span class=\"keyword\">String</span> deafultSourceName = data.value();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (paramValues != <span class=\"keyword\">null</span> &amp;&amp; paramValues.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; paramValues.length; i++) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">log</span>.info(<span class=\"string\">\"数据源方法\"</span> + method);</span><br><span class=\"line\">                        <span class=\"built_in\">log</span>.info(<span class=\"string\">\"请求参数类型\"</span> + parameterTypes[i]);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (parameterTypes[i] == Map.class) &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">log</span>.info(<span class=\"string\">\"Map类型值\"</span> + paramValues[i]);</span><br><span class=\"line\">                            Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt; <span class=\"built_in\">map</span> = (<span class=\"keyword\">HashMap</span>) paramValues[i];</span><br><span class=\"line\">                            <span class=\"built_in\">log</span>.info(<span class=\"string\">\"转换之后的Map类型值\"</span> + <span class=\"built_in\">map</span>);</span><br><span class=\"line\">                            <span class=\"comment\">//获取法院代码</span></span><br><span class=\"line\">                            <span class=\"keyword\">Object</span> courtNumber = <span class=\"built_in\">map</span>.<span class=\"built_in\">get</span>(<span class=\"string\">\"courtNumber\"</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">String</span> court =<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(courtNumber!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                                court =<span class=\"keyword\">String</span>.valueOf(courtNumber);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            changeDataSource(deafultSourceName, courtNumber, court);</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parameterTypes[i] == List.class) &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">log</span>.info(<span class=\"string\">\"List类型值\"</span> + paramValues[i]);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">log</span>.info(<span class=\"string\">\"对象类型值\"</span> + paramValues[i]);</span><br><span class=\"line\">                            <span class=\"keyword\">final</span> Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; stringStringMap = obj2Map(paramValues[i]);</span><br><span class=\"line\">                            <span class=\"built_in\">log</span>.info(<span class=\"string\">\"对象转为map后的值\"</span> + stringStringMap);</span><br><span class=\"line\">                            <span class=\"keyword\">Object</span> courtNumber = stringStringMap.<span class=\"built_in\">get</span>(<span class=\"string\">\"courtNumber\"</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">String</span> court =<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(courtNumber!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                                court =<span class=\"keyword\">String</span>.valueOf(courtNumber);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            changeDataSource(deafultSourceName, courtNumber, court);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//TODO,默认MySQL数据源的处理</span></span><br><span class=\"line\">                <span class=\"comment\">//mapper 接口没有数据源注解,使用MySQL数据库</span></span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用默认mysql数据源\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">log</span>.error(<span class=\"string\">\"当前线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" 添加数据源失败\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更换连接的数据源</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> changeDataSource(<span class=\"keyword\">String</span> deafultSourceName, <span class=\"keyword\">Object</span> courtNumber, <span class=\"keyword\">String</span> court) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(court)&amp;&amp; !<span class=\"string\">\"\"</span>.equals(court) &amp;&amp;!<span class=\"string\">\"null\"</span>.equalsIgnoreCase(court)&amp;&amp;court.length()&gt;=<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            court = court.substring(<span class=\"number\">0</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">            <span class=\"comment\">//TODO,当前只有一个Sybase数据库,后期多个进行扩展</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( StringUtils.isNotBlank(deafultSourceName)&amp;&amp;deafultSourceName.indexOf(<span class=\"string\">\"sybase\"</span>) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">String</span> <span class=\"built_in\">key</span> = <span class=\"string\">\"datasource.sybase.\"</span> + court;</span><br><span class=\"line\">                <span class=\"comment\">//使用 3200 3201 3202  </span></span><br><span class=\"line\">                <span class=\"keyword\">String</span> dataSourceName = env.getProperty(<span class=\"built_in\">key</span>);</span><br><span class=\"line\">                DynamicDataSourceHolder.putDataSource(dataSourceName);</span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" sybase添加--案件 \"</span> + <span class=\"string\">\"法院代码---\"</span> + courtNumber + <span class=\"string\">\"--的数据源----\"</span> + dataSourceName + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( StringUtils.isNotBlank(deafultSourceName)&amp;&amp;deafultSourceName.indexOf(<span class=\"string\">\"mysql\"</span>) != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//使用其他库的判断</span></span><br><span class=\"line\">                <span class=\"keyword\">String</span> <span class=\"built_in\">key</span> = <span class=\"string\">\"datasource.mysql.\"</span> + court;</span><br><span class=\"line\">                <span class=\"comment\">//使用 3200 3201 3202  </span></span><br><span class=\"line\">                <span class=\"keyword\">String</span> dataSourceName = env.getProperty(<span class=\"built_in\">key</span>);</span><br><span class=\"line\">                DynamicDataSourceHolder.putDataSource(dataSourceName);</span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\"mysql 添加--执行 \"</span> + <span class=\"string\">\"法院代码---\"</span> + courtNumber + <span class=\"string\">\"--的数据源----\"</span> + dataSourceName + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( StringUtils.isNotBlank(deafultSourceName)&amp;&amp;deafultSourceName.indexOf(<span class=\"string\">\"oa\"</span>) != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//使用其他库的判断</span></span><br><span class=\"line\">                <span class=\"comment\">//log.info(\"使用线程 \" + Thread.currentThread().getName() + \"sybaseoa 添加--执行 \" + \"法院代码---\" + courtNumber + \"--的数据源----\" + dataSourceName + \" 本地线程变量\");</span></span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用默认江苏高院OA\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">String</span> <span class=\"built_in\">key</span> = <span class=\"string\">\"datasource.oa.3200\"</span>;</span><br><span class=\"line\">                <span class=\"comment\">//使用 3200 3201 3202 的办公oa</span></span><br><span class=\"line\">                <span class=\"keyword\">String</span> dataSourceName = env.getProperty(<span class=\"built_in\">key</span>);</span><br><span class=\"line\">                DynamicDataSourceHolder.putDataSource(dataSourceName);</span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\"sybaseoa 添加--执行 \"</span> + <span class=\"string\">\"法院代码---\"</span> + courtNumber + <span class=\"string\">\"--的数据源----\"</span> + dataSourceName + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//TODO,没有传法院代码的情况默认使用集中库</span></span><br><span class=\"line\">            <span class=\"comment\">//判断注解上的值,为集中库上的值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"sybaseTtre\"</span>.equalsIgnoreCase(deafultSourceName)) &#123;</span><br><span class=\"line\">                DynamicDataSourceHolder.putDataSource(deafultSourceName);</span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用Sybase集中库线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" 添加数据源到-- \"</span> + deafultSourceName + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//TODO 当事人测试使用,后期会更改</span></span><br><span class=\"line\">                DynamicDataSourceHolder.putDataSource(<span class=\"string\">\"sybaseTtre\"</span>);</span><br><span class=\"line\">                <span class=\"built_in\">log</span>.info(<span class=\"string\">\"使用Sybase集中库线程 \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" 添加数据源到-- \"</span> + deafultSourceName + <span class=\"string\">\" 本地线程变量\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">//TODO,目前不传法院代码,只有一个集中库的情况,后期进行扩展</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; obj2Map(<span class=\"keyword\">Object</span> obj) &#123;</span><br><span class=\"line\">        Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; <span class=\"built_in\">map</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">HashMap</span>&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(obj.getClass());</span></span><br><span class=\"line\">        <span class=\"comment\">// 获取f对象对应类中的所有属性域</span></span><br><span class=\"line\">        Field[] fields = obj.getClass().getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>, len = fields.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">String</span> varName = fields[i].getName();</span><br><span class=\"line\">            <span class=\"comment\">//varName = varName.toLowerCase();//将key置为小写，默认为对象的属性</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取原来的访问控制权限</span></span><br><span class=\"line\">                <span class=\"built_in\">boolean</span> accessFlag = fields[i].isAccessible();</span><br><span class=\"line\">                <span class=\"comment\">// 修改访问控制权限</span></span><br><span class=\"line\">                fields[i].setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 获取在对象f中属性fields[i]对应的对象中的变量</span></span><br><span class=\"line\">                <span class=\"keyword\">Object</span> o = fields[i].<span class=\"built_in\">get</span>(obj);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (o != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">map</span>.put(varName, o.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// System.out.println(\"传入的对象中包含一个如下的变量：\" + varName + \" = \" + o);</span></span><br><span class=\"line\">                <span class=\"comment\">// 恢复访问控制权限</span></span><br><span class=\"line\">                fields[i].setAccessible(accessFlag);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class=\"line\">                ex.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IllegalAccessException ex) &#123;</span><br><span class=\"line\">                ex.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">map</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行完切面后，将线程共享中的数据源名称清空</span></span><br><span class=\"line\">    @After(<span class=\"string\">\"dataSourcePointCut()\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> after(JoinPoint joinPoint) &#123;</span><br><span class=\"line\">        DynamicDataSourceHolder.removeDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">String</span> courtNumer = <span class=\"string\">\"320100\"</span>;</span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(courtNumer.substring(<span class=\"number\">0</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"windows批处理操作指令","date":"2019-07-02T10:38:12.000Z","_content":"\n## Windows环境下运行bat指令\n\n-Windows下 初始化MySQL SQL 文件\n\n```\n@echo off　\nstart  cmd /k   \"echo initmysql  &&  title init-mysql  && cd/d  D:\\soft\\mysql-5.7.26-winx64\\bin && mysql -h localhost  -uroot -pnrqzdhlscx2 -Dtest < D:\\soft\\initmysql.sql\"\n\n```\n\n-windows 下，打开多个窗口运行springboot jar包\n\n```\n@echo off　\nstart  cmd /c   \"echo Starting graph-eureka-server &&  title graph-eureka-server &&  java -jar   D:\\soft\\java-service\\graph-eureka-server.jar \"\n\nstart  cmd /c  \"echo Starting link-excel &&  title link-excel &&  java -Dfile.encoding=UTF-8  -jar  D:\\soft\\java-service\\link-excel.jar\" \n\nstart  cmd /c  \"echo Starting link-web  &&  title link-web &&  java -jar   D:\\soft\\java-service\\link-web.jar\" \n\nstart  cmd /c  \"echo Starting link-graph1  &&  title link-graph1 &&  java -jar D:\\soft\\java-service\\link-graph1.jar\"\n```\n\n-Windows 下关闭多个Java 虚拟机\n\n```\ntaskkill /f /t /fi  \"imagename eq java.exe\" \n```\n\n ## 备注\n\n 1、echo 命令 \n 打开回显或关闭请求回显功能，或显示消息。如果没有任何参数，echo 命令将显示当前回显设置。\n语法\necho [{ on|off }] [message]\n\n\n2、rem 命令，注释，代表此行不会执行\n\nrem 这是一个注释\n\n3、pause 命令\n    这是一个暂停指令，按任意键继续\n\n4、start 命令\n\nStart语法\nstart [\"title\"] [/dPath] [/min] [/max] [{/separate |/shared}] [{/low | /normal | /high | /realtime | /abovenormal | belownormal}][/wait] [/B] [FileName] [parameters]\n\n启动单独的“命令提示符”窗口来运行指定程序或命令。如果在没有参数的情况下使用，start 将打开第二个命令提示符窗口。\n\nstart cmd/c 打开新窗口执行指令后关闭窗口\n\nstart cmd/k 打开新窗口执行指令后,保持新窗口\n\ntitle 新窗口的标题名称\n\n5、taskkill 指令，使用该工具按照进程 ID (PID) 或映像名称终止任务。\n\n```\nTASKKILL [/S system [/U username [/P [password]]]]   \n         { [/FI filter] [/PID processid | /IM imagename] } [/T] [/F]\n\n```\n```\n1. /S    system    指定要连接的远程系统。  \n\n2. /U    [domain\\]user    指定应该在哪个用户上下文执行这个命令。\n\n3. /P    [password]       为提供的用户上下文指定密码。如果忽略，提示输入。\n\n4. /FI   filter           应用筛选器以选择一组任务。允许使用 \"*\"。例如，映像名称 eq acme*\n\n5. /PID  processid        指定要终止的进程的 PID。使用 TaskList 取得 PID。\n\n6. /IM   imagename        指定要终止的进程的映像名称。通配符 '*'可用来 指定所有任务或映像名称。\n\n7. /T                     终止指定的进程和由它启用的子进程。\n\n8. /F                     指定强制终止进程。\n\n9. /?                     显示帮助消息\n\n```\n例子，杀死对应进程：\ntaskkill /pid pid  \n\ntaskkill /im xxx.exe  \n\ntaskkill /fi \"imagename eq xxx.exe\"  \n\ntaskkill /fi \"pid eq pid\"  ","source":"_posts/windows批处理操作指令.md","raw":"---\ntitle: windows批处理操作指令\ndate: 2019-07-02 18:38:12\ntags:\n    -Windows批处理\n---\n\n## Windows环境下运行bat指令\n\n-Windows下 初始化MySQL SQL 文件\n\n```\n@echo off　\nstart  cmd /k   \"echo initmysql  &&  title init-mysql  && cd/d  D:\\soft\\mysql-5.7.26-winx64\\bin && mysql -h localhost  -uroot -pnrqzdhlscx2 -Dtest < D:\\soft\\initmysql.sql\"\n\n```\n\n-windows 下，打开多个窗口运行springboot jar包\n\n```\n@echo off　\nstart  cmd /c   \"echo Starting graph-eureka-server &&  title graph-eureka-server &&  java -jar   D:\\soft\\java-service\\graph-eureka-server.jar \"\n\nstart  cmd /c  \"echo Starting link-excel &&  title link-excel &&  java -Dfile.encoding=UTF-8  -jar  D:\\soft\\java-service\\link-excel.jar\" \n\nstart  cmd /c  \"echo Starting link-web  &&  title link-web &&  java -jar   D:\\soft\\java-service\\link-web.jar\" \n\nstart  cmd /c  \"echo Starting link-graph1  &&  title link-graph1 &&  java -jar D:\\soft\\java-service\\link-graph1.jar\"\n```\n\n-Windows 下关闭多个Java 虚拟机\n\n```\ntaskkill /f /t /fi  \"imagename eq java.exe\" \n```\n\n ## 备注\n\n 1、echo 命令 \n 打开回显或关闭请求回显功能，或显示消息。如果没有任何参数，echo 命令将显示当前回显设置。\n语法\necho [{ on|off }] [message]\n\n\n2、rem 命令，注释，代表此行不会执行\n\nrem 这是一个注释\n\n3、pause 命令\n    这是一个暂停指令，按任意键继续\n\n4、start 命令\n\nStart语法\nstart [\"title\"] [/dPath] [/min] [/max] [{/separate |/shared}] [{/low | /normal | /high | /realtime | /abovenormal | belownormal}][/wait] [/B] [FileName] [parameters]\n\n启动单独的“命令提示符”窗口来运行指定程序或命令。如果在没有参数的情况下使用，start 将打开第二个命令提示符窗口。\n\nstart cmd/c 打开新窗口执行指令后关闭窗口\n\nstart cmd/k 打开新窗口执行指令后,保持新窗口\n\ntitle 新窗口的标题名称\n\n5、taskkill 指令，使用该工具按照进程 ID (PID) 或映像名称终止任务。\n\n```\nTASKKILL [/S system [/U username [/P [password]]]]   \n         { [/FI filter] [/PID processid | /IM imagename] } [/T] [/F]\n\n```\n```\n1. /S    system    指定要连接的远程系统。  \n\n2. /U    [domain\\]user    指定应该在哪个用户上下文执行这个命令。\n\n3. /P    [password]       为提供的用户上下文指定密码。如果忽略，提示输入。\n\n4. /FI   filter           应用筛选器以选择一组任务。允许使用 \"*\"。例如，映像名称 eq acme*\n\n5. /PID  processid        指定要终止的进程的 PID。使用 TaskList 取得 PID。\n\n6. /IM   imagename        指定要终止的进程的映像名称。通配符 '*'可用来 指定所有任务或映像名称。\n\n7. /T                     终止指定的进程和由它启用的子进程。\n\n8. /F                     指定强制终止进程。\n\n9. /?                     显示帮助消息\n\n```\n例子，杀死对应进程：\ntaskkill /pid pid  \n\ntaskkill /im xxx.exe  \n\ntaskkill /fi \"imagename eq xxx.exe\"  \n\ntaskkill /fi \"pid eq pid\"  ","slug":"windows批处理操作指令","published":1,"updated":"2019-07-04T06:20:37.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxoddk2m000bls74hq4yg38q","content":"<h2 id=\"Windows环境下运行bat指令\"><a href=\"#Windows环境下运行bat指令\" class=\"headerlink\" title=\"Windows环境下运行bat指令\"></a>Windows环境下运行bat指令</h2><p>-Windows下 初始化MySQL SQL 文件</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off　</span><br><span class=\"line\"><span class=\"built_in\">start</span>  <span class=\"built_in\">cmd</span> /k   \"<span class=\"built_in\">echo</span> initmysql  &amp;&amp;  <span class=\"built_in\">title</span> init-mysql  &amp;&amp; <span class=\"built_in\">cd</span>/d  D:\\soft\\mysql-<span class=\"number\">5</span>.<span class=\"number\">7</span>.<span class=\"number\">26</span>-winx64\\bin &amp;&amp; mysql -h localhost  -uroot -pnrqzdhlscx2 -Dtest &lt; D:\\soft\\initmysql.sql\"</span><br></pre></td></tr></table></figure>\n\n<p>-windows 下，打开多个窗口运行springboot jar包</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off　</span><br><span class=\"line\"><span class=\"built_in\">start</span>  <span class=\"built_in\">cmd</span> /c   \"<span class=\"built_in\">echo</span> Starting graph-eureka-server &amp;&amp;  <span class=\"built_in\">title</span> graph-eureka-server &amp;&amp;  java -jar   D:\\soft\\java-service\\graph-eureka-server.jar \"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">start</span>  <span class=\"built_in\">cmd</span> /c  \"<span class=\"built_in\">echo</span> Starting link-excel &amp;&amp;  <span class=\"built_in\">title</span> link-excel &amp;&amp;  java -Dfile.encoding=UTF-<span class=\"number\">8</span>  -jar  D:\\soft\\java-service\\link-excel.jar\" </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">start</span>  <span class=\"built_in\">cmd</span> /c  \"<span class=\"built_in\">echo</span> Starting link-web  &amp;&amp;  <span class=\"built_in\">title</span> link-web &amp;&amp;  java -jar   D:\\soft\\java-service\\link-web.jar\" </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">start</span>  <span class=\"built_in\">cmd</span> /c  \"<span class=\"built_in\">echo</span> Starting link-graph1  &amp;&amp;  <span class=\"built_in\">title</span> link-graph1 &amp;&amp;  java -jar D:\\soft\\java-service\\link-graph1.jar\"</span><br></pre></td></tr></table></figure>\n\n<p>-Windows 下关闭多个Java 虚拟机</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskkill <span class=\"string\">/f</span> <span class=\"string\">/t</span> <span class=\"string\">/fi</span>  <span class=\"string\">\"imagename eq java.exe\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p> 1、echo 命令<br> 打开回显或关闭请求回显功能，或显示消息。如果没有任何参数，echo 命令将显示当前回显设置。<br>语法<br>echo [{ on|off }] [message]</p>\n<p>2、rem 命令，注释，代表此行不会执行</p>\n<p>rem 这是一个注释</p>\n<p>3、pause 命令<br>    这是一个暂停指令，按任意键继续</p>\n<p>4、start 命令</p>\n<p>Start语法<br>start [“title”] [/dPath] [/min] [/max] [{/separate |/shared}] [{/low | /normal | /high | /realtime | /abovenormal | belownormal}][/wait] [/B] [FileName] [parameters]</p>\n<p>启动单独的“命令提示符”窗口来运行指定程序或命令。如果在没有参数的情况下使用，start 将打开第二个命令提示符窗口。</p>\n<p>start cmd/c 打开新窗口执行指令后关闭窗口</p>\n<p>start cmd/k 打开新窗口执行指令后,保持新窗口</p>\n<p>title 新窗口的标题名称</p>\n<p>5、taskkill 指令，使用该工具按照进程 ID (PID) 或映像名称终止任务。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TASKKILL [/S<span class=\"built_in\"> system </span>[/U username [/P [password]]]]   </span><br><span class=\"line\">         &#123; [/FI filter] [/PID processid | /IM imagename] &#125; [/T] [/F]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>/S    system    指定要连接的远程系统。  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">2. </span>/U    [domain\\]user    指定应该在哪个用户上下文执行这个命令。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">3. </span>/P    [password]       为提供的用户上下文指定密码。如果忽略，提示输入。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">4. </span>/FI   filter           应用筛选器以选择一组任务。允许使用 \"<span class=\"emphasis\">*\"。例如，映像名称 eq acme*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">5. </span>/PID  processid        指定要终止的进程的 PID。使用 TaskList 取得 PID。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">6. </span>/IM   imagename        指定要终止的进程的映像名称。通配符 '*'可用来 指定所有任务或映像名称。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">7. </span>/T                     终止指定的进程和由它启用的子进程。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">8. </span>/F                     指定强制终止进程。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">9. </span>/?                     显示帮助消息</span><br></pre></td></tr></table></figure>\n\n<p>例子，杀死对应进程：<br>taskkill /pid pid  </p>\n<p>taskkill /im xxx.exe  </p>\n<p>taskkill /fi “imagename eq xxx.exe”  </p>\n<p>taskkill /fi “pid eq pid”  </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Windows环境下运行bat指令\"><a href=\"#Windows环境下运行bat指令\" class=\"headerlink\" title=\"Windows环境下运行bat指令\"></a>Windows环境下运行bat指令</h2><p>-Windows下 初始化MySQL SQL 文件</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off　</span><br><span class=\"line\"><span class=\"built_in\">start</span>  <span class=\"built_in\">cmd</span> /k   \"<span class=\"built_in\">echo</span> initmysql  &amp;&amp;  <span class=\"built_in\">title</span> init-mysql  &amp;&amp; <span class=\"built_in\">cd</span>/d  D:\\soft\\mysql-<span class=\"number\">5</span>.<span class=\"number\">7</span>.<span class=\"number\">26</span>-winx64\\bin &amp;&amp; mysql -h localhost  -uroot -pnrqzdhlscx2 -Dtest &lt; D:\\soft\\initmysql.sql\"</span><br></pre></td></tr></table></figure>\n\n<p>-windows 下，打开多个窗口运行springboot jar包</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off　</span><br><span class=\"line\"><span class=\"built_in\">start</span>  <span class=\"built_in\">cmd</span> /c   \"<span class=\"built_in\">echo</span> Starting graph-eureka-server &amp;&amp;  <span class=\"built_in\">title</span> graph-eureka-server &amp;&amp;  java -jar   D:\\soft\\java-service\\graph-eureka-server.jar \"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">start</span>  <span class=\"built_in\">cmd</span> /c  \"<span class=\"built_in\">echo</span> Starting link-excel &amp;&amp;  <span class=\"built_in\">title</span> link-excel &amp;&amp;  java -Dfile.encoding=UTF-<span class=\"number\">8</span>  -jar  D:\\soft\\java-service\\link-excel.jar\" </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">start</span>  <span class=\"built_in\">cmd</span> /c  \"<span class=\"built_in\">echo</span> Starting link-web  &amp;&amp;  <span class=\"built_in\">title</span> link-web &amp;&amp;  java -jar   D:\\soft\\java-service\\link-web.jar\" </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">start</span>  <span class=\"built_in\">cmd</span> /c  \"<span class=\"built_in\">echo</span> Starting link-graph1  &amp;&amp;  <span class=\"built_in\">title</span> link-graph1 &amp;&amp;  java -jar D:\\soft\\java-service\\link-graph1.jar\"</span><br></pre></td></tr></table></figure>\n\n<p>-Windows 下关闭多个Java 虚拟机</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskkill <span class=\"string\">/f</span> <span class=\"string\">/t</span> <span class=\"string\">/fi</span>  <span class=\"string\">\"imagename eq java.exe\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p> 1、echo 命令<br> 打开回显或关闭请求回显功能，或显示消息。如果没有任何参数，echo 命令将显示当前回显设置。<br>语法<br>echo [{ on|off }] [message]</p>\n<p>2、rem 命令，注释，代表此行不会执行</p>\n<p>rem 这是一个注释</p>\n<p>3、pause 命令<br>    这是一个暂停指令，按任意键继续</p>\n<p>4、start 命令</p>\n<p>Start语法<br>start [“title”] [/dPath] [/min] [/max] [{/separate |/shared}] [{/low | /normal | /high | /realtime | /abovenormal | belownormal}][/wait] [/B] [FileName] [parameters]</p>\n<p>启动单独的“命令提示符”窗口来运行指定程序或命令。如果在没有参数的情况下使用，start 将打开第二个命令提示符窗口。</p>\n<p>start cmd/c 打开新窗口执行指令后关闭窗口</p>\n<p>start cmd/k 打开新窗口执行指令后,保持新窗口</p>\n<p>title 新窗口的标题名称</p>\n<p>5、taskkill 指令，使用该工具按照进程 ID (PID) 或映像名称终止任务。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TASKKILL [/S<span class=\"built_in\"> system </span>[/U username [/P [password]]]]   </span><br><span class=\"line\">         &#123; [/FI filter] [/PID processid | /IM imagename] &#125; [/T] [/F]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>/S    system    指定要连接的远程系统。  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">2. </span>/U    [domain\\]user    指定应该在哪个用户上下文执行这个命令。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">3. </span>/P    [password]       为提供的用户上下文指定密码。如果忽略，提示输入。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">4. </span>/FI   filter           应用筛选器以选择一组任务。允许使用 \"<span class=\"emphasis\">*\"。例如，映像名称 eq acme*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">5. </span>/PID  processid        指定要终止的进程的 PID。使用 TaskList 取得 PID。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">6. </span>/IM   imagename        指定要终止的进程的映像名称。通配符 '*'可用来 指定所有任务或映像名称。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">7. </span>/T                     终止指定的进程和由它启用的子进程。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">8. </span>/F                     指定强制终止进程。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">9. </span>/?                     显示帮助消息</span><br></pre></td></tr></table></figure>\n\n<p>例子，杀死对应进程：<br>taskkill /pid pid  </p>\n<p>taskkill /im xxx.exe  </p>\n<p>taskkill /fi “imagename eq xxx.exe”  </p>\n<p>taskkill /fi “pid eq pid”  </p>\n"},{"title":"过滤器、拦截器、监听器区别","date":"2019-07-04T07:26:34.000Z","_content":"1.过滤器\n\nServlet中的过滤器Filter是实现了javax.servlet.Filter接口的服务器端程序，主要的用途是过滤字符编码、做一些业务逻辑判断等。\n其工作原理是，只要你在web.xml文件配置好要拦截的客户端请求，它都会帮你拦截到请求，此时你就可以对请求或响应(Request、Response)统一设置编码，简化操作；同时还可进行逻辑判断，如用户是否已经登陆、有没有权限访问该页面等等工作。\n它是随你的web应用启动而启动的，只初始化一次，以后就可以拦截相关请求，只有当你的web应用停止或重新部署的时候才销毁。\n \n```\n \n MyCharsetFilter.java 编码过滤器 \n \n// 主要目的：过滤字符编码；其次，做一些应用逻辑判断等. \n// Filter跟web应用一起启动 \n// 当web应用重新启动或销毁时，Filter也被销毁 \npublic class MyCharsetFilter implements Filter { \n     private FilterConfig config = null; \n     public void destroy() { \n         System.out.println(\"MyCharsetFilter准备销毁...\"); \n     } \n  \n     public void doFilter(ServletRequest arg0, ServletResponse arg1, FilterChain chain) throws IOException, ServletException { \n         // 强制类型转换 \n         HttpServletRequest request = (HttpServletRequest)arg0; \n         HttpServletResponse response = (HttpServletResponse)arg1; \n         // 获取web.xm设置的编码集，设置到Request、Response中         \n　　　　  //request.setCharacterEncoding(config.getInitParameter(\"charset\"));          \n　　　　  //response.setContentType(config.getInitParameter(\"contentType\"));        \n 　　　　 //response.setCharacterEncoding(config.getInitParameter(\"charset\"));          \n        // 将请求转发到目的地 \n         chain.doFilter(request, response); \n     } \n  \n     public void init(FilterConfig arg0) throws ServletException { \n         this.config = arg0; \n         System.out.println(\"MyCharsetFilter初始化...\"); \n     } \n } \n ```\n以下是 MyCharsetFilter.Java 在web.xml 中配置:\n```\n <filter> \n       <filter-name>filter</filter-name> \n       <filter-class>dc.gz.filters.MyCharsetFilter</filter-class> \n       <init-param> \n           <param-name>charset</param-name> \n           <param-value>UTF-8</param-value> \n       </init-param> \n       <init-param> \n           <param-name>contentType</param-name> \n           <param-value>text/html;charset=UTF-8</param-value> \n       </init-param> \n   </filter> \n   <filter-mapping> \n       <filter-name>filter</filter-name> \n       <!-- * 代表截获所有的请求  或指定请求/test.do  /xxx.do --> \n       <url-pattern>/*</url-pattern> \n   </filter-mapping> \n```\n \n\n2.监听器\n\n现在来说说Servlet的监听器Listener，它是实现了javax.servlet.ServletContextListener 接口的服务器端程序，它也是随web应用的启动而启动，只初始化一次，随web应用的停止而销毁。\n主要作用是： 做一些初始化的内容添加工作、设置一些基本的内容、比如一些参数或者是一些固定的对象等等。他会对特定的事件产生一个处理。监听在很多模式下用到。比如说观察者模式，就是一个监听来的。又比如struts2 可 以用监听来启动。\nServlet监听器用于监听一些重要事件的发生，监听器对象可以在事情发生前、发生后可以做一些必要的处理。好比如果说Servlet 的监听器Listene。\n在web.xml中配置。\n```\nMyServletContextListener.java \n package dc.gz.listeners; \n import javax.servlet.ServletContext; \n import javax.servlet.ServletContextEvent; \n import javax.servlet.ServletContextListener; \n import org.apache.commons.dbcp.BasicDataSource; \n  \n  /** \n  * Web应用监听器 \n  */ \n public class MyServletContextListener implements ServletContextListener {   \n     // 应用监听器的销毁方法 \n     public void contextDestroyed(ServletContextEvent event) { \n         ServletContext sc = event.getServletContext(); \n         // 在整个web应用销毁之前调用，将所有应用空间所设置的内容清空 \n         sc.removeAttribute(\"dataSource\"); \n        System.out.println(\"销毁工作完成...\"); \n     } \n  \n     // 应用监听器的初始化方法 \n     public void contextInitialized(ServletContextEvent event) { \n         // 通过这个事件可以获取整个应用的空间 \n         // 在整个web应用下面启动的时候做一些初始化的内容添加工作 \n         ServletContext sc = event.getServletContext(); \n         // 设置一些基本的内容；比如一些参数或者是一些固定的对象 \n         // 创建DataSource对象，连接池技术 dbcp \n         BasicDataSource bds = new BasicDataSource(); \n         bds.setDriverClassName(\"com.mysql.jdbc.Driver\");                      \n         bds.setUrl(\"jdbc:mysql://localhost:3306/hibernate\"); \n         bds.setUsername(\"root\"); \n         bds.setPassword(\"root\"); \n         bds.setMaxActive(10);//最大连接数 \n         bds.setMaxIdle(5);//最大管理数 \n         //bds.setMaxWait(maxWait); 最大等待时间 \n         // 把 DataSource 放入ServletContext空间中， \n         // 供整个web应用的使用(获取数据库连接) \n         sc.setAttribute(\"dataSource\", bds); \n         System.out.println(\"应用监听器初始化工作完成...\"); \n         System.out.println(\"已经创建DataSource...\"); \n     } \n } \n```\n \n```\nweb.xml中配置如下，很简单：\n\n <!-- 配置应用监听器  --> \n   <listener> \n       <listener-class>dc.gz.listeners.MyServletContextListener</listener-class> \n   </listener> \n \n```\n \n\n3.拦截器\n\n拦截器是在面向切面编程中应用的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用。是基于JAVA的反射机制。\n \n ```\n\n PermissionInterceptor权限控制类\npublic class PermissionInterceptor extends MethodFilterInterceptor {\n\n    private static final long serialVersionUID = -5360035516489852006L;\n\n    /**拦截每一个action请求\n     * @see com.opensymphony.xwork2.interceptor.MethodFilterInterceptor#doIntercept(com.opensymphony.xwork2.ActionInvocation)\n     */\n    @Override\n    protected String doIntercept(ActionInvocation invocation) throws Exception {\n\n        System.out.println(\"进入MyMethodInterceptor方法权限拦截器!!!!!!!!!!!!!\");\n\n        // 获取当前action的类\n        // final Class objClass=invocation.getAction().getClass();\n\n        // 获取当前用户session\n        Map<String, Object> session = invocation.getInvocationContext().getSession();\n\n        // 从session获取用户等信息\n        // User user = (User) session.get(\"login_\");\n        // String name=user.getUName();\n        // 判断当前用户权限，是否可以操作，struts.xml配置的方法，如果有权限就通过\n        //(Integer) ServletActionContext.getRequest().getSession().getAttribute(\"UAuth\")==1\n         if (Util.isHavePermission()) {\n            System.out.println(\"有权限，并且请求成功\");\n            // 表示通过验证，可以执行该action\n            return invocation.invoke();\n        }\n        // Object actionObj=objClass.newInstance();\n        // objClass.getDeclaredField(\"opMsg\").set(actionObj,\n        // \"对不起，您的权限不够，无法进行该操作！\");\n        // objClass.getDeclaredMethod(\"setOpMsg\",\n        // String.class).invoke(actionObj, \"对不起，您的权限不够，无法进行该操作！\");\n        invocation.getInvocationContext().put(\"msg\", \"对不起，您的权限不够，无法进行该操作！\");\n        session.put(\"msg\", \"对不起，您的权限不够，无法进行该操作！\");\n        System.out.println(\"权限不够被拒绝\");\n        return \"error\";\n    }\n\n}\n ```\n\nstruts2配置文件：\n\n```\n<!--</package> -->\n    <!-- 定义包，名字basePackage，继承struts默认包 -->\n    <package name=\"basePackage\" extends=\"struts-default\">\n        <!--struts 拦截器实现 -->\n        <interceptors>\n            <!-- 配置权限拦截器 -->\n            <interceptor name=\"permission\"\n                class=\"com.xx.interceptor.PermissionInterceptor\">\n                <!-- 需要拦截的方法 -->\n                <!-- execludeMethods：该参数指定拦截器拒绝拦截的方法列表，多个方法用“，”隔开（支持通配符*，例如add*，表示所有以add开头的方法），\n                 如果指定了这个参数拦截器不会拦截指定列表中的方法，就是所谓的黑名单 \n                    includeMethods： 该参数指定拦截器需要拦截的方法列表，多个方法用“，”隔开（支持通配符*，例如add*，表示所有以add开头的方法），\n                 如果指定了参数，则指定的Action在执行前会被拦截，即白名单。 -->\n                <param name=\"includeMethods\">deleteUser,deleteAccount,deleteRecord</param>\n                <!-- 不需要拦截的方法 -->\n                <param name=\"excludeMethods\">query*</param>\n            </interceptor>\n\n            <!-- 定义拦截器栈 -->\n            <interceptor-stack name=\"permissionStack\">\n                <interceptor-ref name=\"permission\" />\n                <interceptor-ref name=\"defaultStack\" />\n            </interceptor-stack>\n        </interceptors>\n        <!-- 定义默认拦截器 -->\n        <default-interceptor-ref name=\"permissionStack\"></default-interceptor-ref>\n    </package>\n```\n \n\n \n\n4.下面再详谈过滤器、拦截器的区别：\n\n1、拦截器是基于java反射机制的，而过滤器是基于函数回调的。\n\n2、过滤器依赖于servlet容器，而拦截器不依赖于servlet容器。\n\n3、拦截器只能对Action请求起作用，而过滤器则可以对几乎所有请求起作用。\n\n4、拦截器可以访问Action上下文、值栈里的对象，而过滤器不能。\n5、在Action的生命周期中，拦截器可以多次调用，而过滤器只能在容器初始化时被调用一次。\n\n6、过滤器：取你需要的东西，忽视那些不需要的东西！在程序中，你希望选择中一篇文章中的所有数字，你就可以针对性的挑选数字！\n\n7、拦截器：针对你不要的东西进行拦截，比如说，在一个BBS里面你希望人家不要留“小乌鸦”的这个词，那你就可能采用拦截器!\n\n8、过滤器，是在Java web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或者struts2的 action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者 struts2的action前统一设置字符集，或者去除掉一些非法字符\n\n9、拦截器，是在面向切面编程的就是在你的service或者一个方法，前调用一个方法，或者在方法后调用一个方法比如动态代理就是拦截器的简单实现，在你调用方法前打印出字符串（或者做其它业务逻辑的操作），也可以在你调用方法后打印出字符串，甚至在你抛出异常的时候做业务逻辑的操作。\n\n10、执行顺序 ：过滤前 - 拦截前 - Action处理 - 拦截后 -过滤后。个人认为过滤是一个横向的过程，首先把客户端提交的内容进行过滤(例如未登录用户不能访问内部页面的处理)；过滤通过后，拦截器将检查用户提交数据的验证，做一些前期的数据处理，接着把处理后的数据发给对应的Action；Action处理完成返回后，拦截器还可以做其他过程，再向上返回到过滤器的后续操作。","source":"_posts/过滤器、拦截器、监听器区别.md","raw":"---\ntitle: 过滤器、拦截器、监听器区别\ndate: 2019-07-04 15:26:34\ntags:\n---\n1.过滤器\n\nServlet中的过滤器Filter是实现了javax.servlet.Filter接口的服务器端程序，主要的用途是过滤字符编码、做一些业务逻辑判断等。\n其工作原理是，只要你在web.xml文件配置好要拦截的客户端请求，它都会帮你拦截到请求，此时你就可以对请求或响应(Request、Response)统一设置编码，简化操作；同时还可进行逻辑判断，如用户是否已经登陆、有没有权限访问该页面等等工作。\n它是随你的web应用启动而启动的，只初始化一次，以后就可以拦截相关请求，只有当你的web应用停止或重新部署的时候才销毁。\n \n```\n \n MyCharsetFilter.java 编码过滤器 \n \n// 主要目的：过滤字符编码；其次，做一些应用逻辑判断等. \n// Filter跟web应用一起启动 \n// 当web应用重新启动或销毁时，Filter也被销毁 \npublic class MyCharsetFilter implements Filter { \n     private FilterConfig config = null; \n     public void destroy() { \n         System.out.println(\"MyCharsetFilter准备销毁...\"); \n     } \n  \n     public void doFilter(ServletRequest arg0, ServletResponse arg1, FilterChain chain) throws IOException, ServletException { \n         // 强制类型转换 \n         HttpServletRequest request = (HttpServletRequest)arg0; \n         HttpServletResponse response = (HttpServletResponse)arg1; \n         // 获取web.xm设置的编码集，设置到Request、Response中         \n　　　　  //request.setCharacterEncoding(config.getInitParameter(\"charset\"));          \n　　　　  //response.setContentType(config.getInitParameter(\"contentType\"));        \n 　　　　 //response.setCharacterEncoding(config.getInitParameter(\"charset\"));          \n        // 将请求转发到目的地 \n         chain.doFilter(request, response); \n     } \n  \n     public void init(FilterConfig arg0) throws ServletException { \n         this.config = arg0; \n         System.out.println(\"MyCharsetFilter初始化...\"); \n     } \n } \n ```\n以下是 MyCharsetFilter.Java 在web.xml 中配置:\n```\n <filter> \n       <filter-name>filter</filter-name> \n       <filter-class>dc.gz.filters.MyCharsetFilter</filter-class> \n       <init-param> \n           <param-name>charset</param-name> \n           <param-value>UTF-8</param-value> \n       </init-param> \n       <init-param> \n           <param-name>contentType</param-name> \n           <param-value>text/html;charset=UTF-8</param-value> \n       </init-param> \n   </filter> \n   <filter-mapping> \n       <filter-name>filter</filter-name> \n       <!-- * 代表截获所有的请求  或指定请求/test.do  /xxx.do --> \n       <url-pattern>/*</url-pattern> \n   </filter-mapping> \n```\n \n\n2.监听器\n\n现在来说说Servlet的监听器Listener，它是实现了javax.servlet.ServletContextListener 接口的服务器端程序，它也是随web应用的启动而启动，只初始化一次，随web应用的停止而销毁。\n主要作用是： 做一些初始化的内容添加工作、设置一些基本的内容、比如一些参数或者是一些固定的对象等等。他会对特定的事件产生一个处理。监听在很多模式下用到。比如说观察者模式，就是一个监听来的。又比如struts2 可 以用监听来启动。\nServlet监听器用于监听一些重要事件的发生，监听器对象可以在事情发生前、发生后可以做一些必要的处理。好比如果说Servlet 的监听器Listene。\n在web.xml中配置。\n```\nMyServletContextListener.java \n package dc.gz.listeners; \n import javax.servlet.ServletContext; \n import javax.servlet.ServletContextEvent; \n import javax.servlet.ServletContextListener; \n import org.apache.commons.dbcp.BasicDataSource; \n  \n  /** \n  * Web应用监听器 \n  */ \n public class MyServletContextListener implements ServletContextListener {   \n     // 应用监听器的销毁方法 \n     public void contextDestroyed(ServletContextEvent event) { \n         ServletContext sc = event.getServletContext(); \n         // 在整个web应用销毁之前调用，将所有应用空间所设置的内容清空 \n         sc.removeAttribute(\"dataSource\"); \n        System.out.println(\"销毁工作完成...\"); \n     } \n  \n     // 应用监听器的初始化方法 \n     public void contextInitialized(ServletContextEvent event) { \n         // 通过这个事件可以获取整个应用的空间 \n         // 在整个web应用下面启动的时候做一些初始化的内容添加工作 \n         ServletContext sc = event.getServletContext(); \n         // 设置一些基本的内容；比如一些参数或者是一些固定的对象 \n         // 创建DataSource对象，连接池技术 dbcp \n         BasicDataSource bds = new BasicDataSource(); \n         bds.setDriverClassName(\"com.mysql.jdbc.Driver\");                      \n         bds.setUrl(\"jdbc:mysql://localhost:3306/hibernate\"); \n         bds.setUsername(\"root\"); \n         bds.setPassword(\"root\"); \n         bds.setMaxActive(10);//最大连接数 \n         bds.setMaxIdle(5);//最大管理数 \n         //bds.setMaxWait(maxWait); 最大等待时间 \n         // 把 DataSource 放入ServletContext空间中， \n         // 供整个web应用的使用(获取数据库连接) \n         sc.setAttribute(\"dataSource\", bds); \n         System.out.println(\"应用监听器初始化工作完成...\"); \n         System.out.println(\"已经创建DataSource...\"); \n     } \n } \n```\n \n```\nweb.xml中配置如下，很简单：\n\n <!-- 配置应用监听器  --> \n   <listener> \n       <listener-class>dc.gz.listeners.MyServletContextListener</listener-class> \n   </listener> \n \n```\n \n\n3.拦截器\n\n拦截器是在面向切面编程中应用的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用。是基于JAVA的反射机制。\n \n ```\n\n PermissionInterceptor权限控制类\npublic class PermissionInterceptor extends MethodFilterInterceptor {\n\n    private static final long serialVersionUID = -5360035516489852006L;\n\n    /**拦截每一个action请求\n     * @see com.opensymphony.xwork2.interceptor.MethodFilterInterceptor#doIntercept(com.opensymphony.xwork2.ActionInvocation)\n     */\n    @Override\n    protected String doIntercept(ActionInvocation invocation) throws Exception {\n\n        System.out.println(\"进入MyMethodInterceptor方法权限拦截器!!!!!!!!!!!!!\");\n\n        // 获取当前action的类\n        // final Class objClass=invocation.getAction().getClass();\n\n        // 获取当前用户session\n        Map<String, Object> session = invocation.getInvocationContext().getSession();\n\n        // 从session获取用户等信息\n        // User user = (User) session.get(\"login_\");\n        // String name=user.getUName();\n        // 判断当前用户权限，是否可以操作，struts.xml配置的方法，如果有权限就通过\n        //(Integer) ServletActionContext.getRequest().getSession().getAttribute(\"UAuth\")==1\n         if (Util.isHavePermission()) {\n            System.out.println(\"有权限，并且请求成功\");\n            // 表示通过验证，可以执行该action\n            return invocation.invoke();\n        }\n        // Object actionObj=objClass.newInstance();\n        // objClass.getDeclaredField(\"opMsg\").set(actionObj,\n        // \"对不起，您的权限不够，无法进行该操作！\");\n        // objClass.getDeclaredMethod(\"setOpMsg\",\n        // String.class).invoke(actionObj, \"对不起，您的权限不够，无法进行该操作！\");\n        invocation.getInvocationContext().put(\"msg\", \"对不起，您的权限不够，无法进行该操作！\");\n        session.put(\"msg\", \"对不起，您的权限不够，无法进行该操作！\");\n        System.out.println(\"权限不够被拒绝\");\n        return \"error\";\n    }\n\n}\n ```\n\nstruts2配置文件：\n\n```\n<!--</package> -->\n    <!-- 定义包，名字basePackage，继承struts默认包 -->\n    <package name=\"basePackage\" extends=\"struts-default\">\n        <!--struts 拦截器实现 -->\n        <interceptors>\n            <!-- 配置权限拦截器 -->\n            <interceptor name=\"permission\"\n                class=\"com.xx.interceptor.PermissionInterceptor\">\n                <!-- 需要拦截的方法 -->\n                <!-- execludeMethods：该参数指定拦截器拒绝拦截的方法列表，多个方法用“，”隔开（支持通配符*，例如add*，表示所有以add开头的方法），\n                 如果指定了这个参数拦截器不会拦截指定列表中的方法，就是所谓的黑名单 \n                    includeMethods： 该参数指定拦截器需要拦截的方法列表，多个方法用“，”隔开（支持通配符*，例如add*，表示所有以add开头的方法），\n                 如果指定了参数，则指定的Action在执行前会被拦截，即白名单。 -->\n                <param name=\"includeMethods\">deleteUser,deleteAccount,deleteRecord</param>\n                <!-- 不需要拦截的方法 -->\n                <param name=\"excludeMethods\">query*</param>\n            </interceptor>\n\n            <!-- 定义拦截器栈 -->\n            <interceptor-stack name=\"permissionStack\">\n                <interceptor-ref name=\"permission\" />\n                <interceptor-ref name=\"defaultStack\" />\n            </interceptor-stack>\n        </interceptors>\n        <!-- 定义默认拦截器 -->\n        <default-interceptor-ref name=\"permissionStack\"></default-interceptor-ref>\n    </package>\n```\n \n\n \n\n4.下面再详谈过滤器、拦截器的区别：\n\n1、拦截器是基于java反射机制的，而过滤器是基于函数回调的。\n\n2、过滤器依赖于servlet容器，而拦截器不依赖于servlet容器。\n\n3、拦截器只能对Action请求起作用，而过滤器则可以对几乎所有请求起作用。\n\n4、拦截器可以访问Action上下文、值栈里的对象，而过滤器不能。\n5、在Action的生命周期中，拦截器可以多次调用，而过滤器只能在容器初始化时被调用一次。\n\n6、过滤器：取你需要的东西，忽视那些不需要的东西！在程序中，你希望选择中一篇文章中的所有数字，你就可以针对性的挑选数字！\n\n7、拦截器：针对你不要的东西进行拦截，比如说，在一个BBS里面你希望人家不要留“小乌鸦”的这个词，那你就可能采用拦截器!\n\n8、过滤器，是在Java web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或者struts2的 action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者 struts2的action前统一设置字符集，或者去除掉一些非法字符\n\n9、拦截器，是在面向切面编程的就是在你的service或者一个方法，前调用一个方法，或者在方法后调用一个方法比如动态代理就是拦截器的简单实现，在你调用方法前打印出字符串（或者做其它业务逻辑的操作），也可以在你调用方法后打印出字符串，甚至在你抛出异常的时候做业务逻辑的操作。\n\n10、执行顺序 ：过滤前 - 拦截前 - Action处理 - 拦截后 -过滤后。个人认为过滤是一个横向的过程，首先把客户端提交的内容进行过滤(例如未登录用户不能访问内部页面的处理)；过滤通过后，拦截器将检查用户提交数据的验证，做一些前期的数据处理，接着把处理后的数据发给对应的Action；Action处理完成返回后，拦截器还可以做其他过程，再向上返回到过滤器的后续操作。","slug":"过滤器、拦截器、监听器区别","published":1,"updated":"2019-07-04T07:29:03.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxoddk2o000dls743fh2m1im","content":"<p>1.过滤器</p>\n<p>Servlet中的过滤器Filter是实现了javax.servlet.Filter接口的服务器端程序，主要的用途是过滤字符编码、做一些业务逻辑判断等。<br>其工作原理是，只要你在web.xml文件配置好要拦截的客户端请求，它都会帮你拦截到请求，此时你就可以对请求或响应(Request、Response)统一设置编码，简化操作；同时还可进行逻辑判断，如用户是否已经登陆、有没有权限访问该页面等等工作。<br>它是随你的web应用启动而启动的，只初始化一次，以后就可以拦截相关请求，只有当你的web应用停止或重新部署的时候才销毁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> MyCharsetFilter.java 编码过滤器 </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 主要目的：过滤字符编码；其次，做一些应用逻辑判断等. </span></span><br><span class=\"line\"><span class=\"comment\">// Filter跟web应用一起启动 </span></span><br><span class=\"line\"><span class=\"comment\">// 当web应用重新启动或销毁时，Filter也被销毁 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCharsetFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123; </span><br><span class=\"line\">     <span class=\"keyword\">private</span> FilterConfig config = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"MyCharsetFilter准备销毁...\"</span>); </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest arg0, ServletResponse arg1, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123; </span><br><span class=\"line\">         <span class=\"comment\">// 强制类型转换 </span></span><br><span class=\"line\">         HttpServletRequest request = (HttpServletRequest)arg0; </span><br><span class=\"line\">         HttpServletResponse response = (HttpServletResponse)arg1; </span><br><span class=\"line\">         <span class=\"comment\">// 获取web.xm设置的编码集，设置到Request、Response中         </span></span><br><span class=\"line\">　　　　  <span class=\"comment\">//request.setCharacterEncoding(config.getInitParameter(\"charset\"));          </span></span><br><span class=\"line\">　　　　  <span class=\"comment\">//response.setContentType(config.getInitParameter(\"contentType\"));        </span></span><br><span class=\"line\"> 　　　　 <span class=\"comment\">//response.setCharacterEncoding(config.getInitParameter(\"charset\"));          </span></span><br><span class=\"line\">        <span class=\"comment\">// 将请求转发到目的地 </span></span><br><span class=\"line\">         chain.doFilter(request, response); </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig arg0)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123; </span><br><span class=\"line\">         <span class=\"keyword\">this</span>.config = arg0; </span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"MyCharsetFilter初始化...\"</span>); </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下是 MyCharsetFilter.Java 在web.xml 中配置:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>dc.gz.filters.MyCharsetFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span> </span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>charset<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span> </span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span> </span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contentType<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span> </span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>text/html;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- * 代表截获所有的请求  或指定请求/test.do  /xxx.do --&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2.监听器</p>\n<p>现在来说说Servlet的监听器Listener，它是实现了javax.servlet.ServletContextListener 接口的服务器端程序，它也是随web应用的启动而启动，只初始化一次，随web应用的停止而销毁。<br>主要作用是： 做一些初始化的内容添加工作、设置一些基本的内容、比如一些参数或者是一些固定的对象等等。他会对特定的事件产生一个处理。监听在很多模式下用到。比如说观察者模式，就是一个监听来的。又比如struts2 可 以用监听来启动。<br>Servlet监听器用于监听一些重要事件的发生，监听器对象可以在事情发生前、发生后可以做一些必要的处理。好比如果说Servlet 的监听器Listene。<br>在web.xml中配置。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyServletContextListener.java </span><br><span class=\"line\"> package dc.gz.listeners; </span><br><span class=\"line\"> import javax.servlet.ServletContext; </span><br><span class=\"line\"> import javax.servlet.ServletContextEvent; </span><br><span class=\"line\"> import javax.servlet.ServletContextListener; </span><br><span class=\"line\"> import org.apache.commons.dbcp.BasicDataSource; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">  * Web应用监听器 </span></span><br><span class=\"line\"><span class=\"comment\">  */</span> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyServletContextListener</span> <span class=\"title\">implements</span> <span class=\"title\">ServletContextListener</span> &#123;   </span><br><span class=\"line\">     <span class=\"comment\">// 应用监听器的销毁方法 </span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextDestroyed</span>(<span class=\"params\">ServletContextEvent <span class=\"keyword\">event</span></span>)</span> &#123; </span><br><span class=\"line\">         ServletContext sc = <span class=\"keyword\">event</span>.getServletContext(); </span><br><span class=\"line\">         <span class=\"comment\">// 在整个web应用销毁之前调用，将所有应用空间所设置的内容清空 </span></span><br><span class=\"line\">         sc.removeAttribute(<span class=\"string\">\"dataSource\"</span>); </span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"销毁工作完成...\"</span>); </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"comment\">// 应用监听器的初始化方法 </span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextInitialized</span>(<span class=\"params\">ServletContextEvent <span class=\"keyword\">event</span></span>)</span> &#123; </span><br><span class=\"line\">         <span class=\"comment\">// 通过这个事件可以获取整个应用的空间 </span></span><br><span class=\"line\">         <span class=\"comment\">// 在整个web应用下面启动的时候做一些初始化的内容添加工作 </span></span><br><span class=\"line\">         ServletContext sc = <span class=\"keyword\">event</span>.getServletContext(); </span><br><span class=\"line\">         <span class=\"comment\">// 设置一些基本的内容；比如一些参数或者是一些固定的对象 </span></span><br><span class=\"line\">         <span class=\"comment\">// 创建DataSource对象，连接池技术 dbcp </span></span><br><span class=\"line\">         BasicDataSource bds = <span class=\"keyword\">new</span> BasicDataSource(); </span><br><span class=\"line\">         bds.setDriverClassName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);                      </span><br><span class=\"line\">         bds.setUrl(<span class=\"string\">\"jdbc:mysql://localhost:3306/hibernate\"</span>); </span><br><span class=\"line\">         bds.setUsername(<span class=\"string\">\"root\"</span>); </span><br><span class=\"line\">         bds.setPassword(<span class=\"string\">\"root\"</span>); </span><br><span class=\"line\">         bds.setMaxActive(<span class=\"number\">10</span>);<span class=\"comment\">//最大连接数 </span></span><br><span class=\"line\">         bds.setMaxIdle(<span class=\"number\">5</span>);<span class=\"comment\">//最大管理数 </span></span><br><span class=\"line\">         <span class=\"comment\">//bds.setMaxWait(maxWait); 最大等待时间 </span></span><br><span class=\"line\">         <span class=\"comment\">// 把 DataSource 放入ServletContext空间中， </span></span><br><span class=\"line\">         <span class=\"comment\">// 供整个web应用的使用(获取数据库连接) </span></span><br><span class=\"line\">         sc.setAttribute(<span class=\"string\">\"dataSource\"</span>, bds); </span><br><span class=\"line\">         System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"应用监听器初始化工作完成...\"</span>); </span><br><span class=\"line\">         System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"已经创建DataSource...\"</span>); </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web.xml中配置如下，很简单：</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- 配置应用监听器  --&gt;</span> </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span> </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>dc.gz.listeners.MyServletContextListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span> </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.拦截器</p>\n<p>拦截器是在面向切面编程中应用的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用。是基于JAVA的反射机制。</p>\n <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">PermissionInterceptor</span>权限控制类</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PermissionInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">MethodFilterInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> long serialVersionUID = <span class=\"number\">-5360035516489852006</span>L;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**拦截每一个action请求</span></span><br><span class=\"line\"><span class=\"comment\">     * @see com.opensymphony.xwork2.interceptor.MethodFilterInterceptor#doIntercept(com.opensymphony.xwork2.ActionInvocation)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">String</span> doIntercept(<span class=\"type\">ActionInvocation</span> invocation) <span class=\"keyword\">throws</span> <span class=\"type\">Exception</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">System</span>.out.println(<span class=\"string\">\"进入MyMethodInterceptor方法权限拦截器!!!!!!!!!!!!!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取当前action的类</span></span><br><span class=\"line\">        <span class=\"comment\">// final Class objClass=invocation.getAction().getClass();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取当前用户session</span></span><br><span class=\"line\">        <span class=\"type\">Map</span>&lt;<span class=\"type\">String</span>, <span class=\"type\">Object</span>&gt; session = invocation.getInvocationContext().getSession();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从session获取用户等信息</span></span><br><span class=\"line\">        <span class=\"comment\">// User user = (User) session.get(\"login_\");</span></span><br><span class=\"line\">        <span class=\"comment\">// String name=user.getUName();</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断当前用户权限，是否可以操作，struts.xml配置的方法，如果有权限就通过</span></span><br><span class=\"line\">        <span class=\"comment\">//(Integer) ServletActionContext.getRequest().getSession().getAttribute(\"UAuth\")==1</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (<span class=\"type\">Util</span>.isHavePermission()) &#123;</span><br><span class=\"line\">            <span class=\"type\">System</span>.out.println(<span class=\"string\">\"有权限，并且请求成功\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 表示通过验证，可以执行该action</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> invocation.invoke();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Object actionObj=objClass.newInstance();</span></span><br><span class=\"line\">        <span class=\"comment\">// objClass.getDeclaredField(\"opMsg\").set(actionObj,</span></span><br><span class=\"line\">        <span class=\"comment\">// \"对不起，您的权限不够，无法进行该操作！\");</span></span><br><span class=\"line\">        <span class=\"comment\">// objClass.getDeclaredMethod(\"setOpMsg\",</span></span><br><span class=\"line\">        <span class=\"comment\">// String.class).invoke(actionObj, \"对不起，您的权限不够，无法进行该操作！\");</span></span><br><span class=\"line\">        invocation.getInvocationContext().put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"对不起，您的权限不够，无法进行该操作！\"</span>);</span><br><span class=\"line\">        session.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"对不起，您的权限不够，无法进行该操作！\"</span>);</span><br><span class=\"line\">        <span class=\"type\">System</span>.out.println(<span class=\"string\">\"权限不够被拒绝\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>struts2配置文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--&lt;/package&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 定义包，名字basePackage，继承struts默认包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--struts 拦截器实现 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">interceptors</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 配置权限拦截器 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">interceptor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"permission\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">class</span>=<span class=\"string\">\"com.xx.interceptor.PermissionInterceptor\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 需要拦截的方法 --&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- execludeMethods：该参数指定拦截器拒绝拦截的方法列表，多个方法用“，”隔开（支持通配符*，例如add*，表示所有以add开头的方法），</span></span><br><span class=\"line\"><span class=\"comment\">                 如果指定了这个参数拦截器不会拦截指定列表中的方法，就是所谓的黑名单 </span></span><br><span class=\"line\"><span class=\"comment\">                    includeMethods： 该参数指定拦截器需要拦截的方法列表，多个方法用“，”隔开（支持通配符*，例如add*，表示所有以add开头的方法），</span></span><br><span class=\"line\"><span class=\"comment\">                 如果指定了参数，则指定的Action在执行前会被拦截，即白名单。 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"includeMethods\"</span>&gt;</span>deleteUser,deleteAccount,deleteRecord<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 不需要拦截的方法 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"excludeMethods\"</span>&gt;</span>query*<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">interceptor</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 定义拦截器栈 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">interceptor-stack</span> <span class=\"attr\">name</span>=<span class=\"string\">\"permissionStack\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"permission\"</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultStack\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">interceptor-stack</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">interceptors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 定义默认拦截器 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">default-interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"permissionStack\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">default-interceptor-ref</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>4.下面再详谈过滤器、拦截器的区别：</p>\n<p>1、拦截器是基于java反射机制的，而过滤器是基于函数回调的。</p>\n<p>2、过滤器依赖于servlet容器，而拦截器不依赖于servlet容器。</p>\n<p>3、拦截器只能对Action请求起作用，而过滤器则可以对几乎所有请求起作用。</p>\n<p>4、拦截器可以访问Action上下文、值栈里的对象，而过滤器不能。<br>5、在Action的生命周期中，拦截器可以多次调用，而过滤器只能在容器初始化时被调用一次。</p>\n<p>6、过滤器：取你需要的东西，忽视那些不需要的东西！在程序中，你希望选择中一篇文章中的所有数字，你就可以针对性的挑选数字！</p>\n<p>7、拦截器：针对你不要的东西进行拦截，比如说，在一个BBS里面你希望人家不要留“小乌鸦”的这个词，那你就可能采用拦截器!</p>\n<p>8、过滤器，是在Java web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或者struts2的 action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者 struts2的action前统一设置字符集，或者去除掉一些非法字符</p>\n<p>9、拦截器，是在面向切面编程的就是在你的service或者一个方法，前调用一个方法，或者在方法后调用一个方法比如动态代理就是拦截器的简单实现，在你调用方法前打印出字符串（或者做其它业务逻辑的操作），也可以在你调用方法后打印出字符串，甚至在你抛出异常的时候做业务逻辑的操作。</p>\n<p>10、执行顺序 ：过滤前 - 拦截前 - Action处理 - 拦截后 -过滤后。个人认为过滤是一个横向的过程，首先把客户端提交的内容进行过滤(例如未登录用户不能访问内部页面的处理)；过滤通过后，拦截器将检查用户提交数据的验证，做一些前期的数据处理，接着把处理后的数据发给对应的Action；Action处理完成返回后，拦截器还可以做其他过程，再向上返回到过滤器的后续操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.过滤器</p>\n<p>Servlet中的过滤器Filter是实现了javax.servlet.Filter接口的服务器端程序，主要的用途是过滤字符编码、做一些业务逻辑判断等。<br>其工作原理是，只要你在web.xml文件配置好要拦截的客户端请求，它都会帮你拦截到请求，此时你就可以对请求或响应(Request、Response)统一设置编码，简化操作；同时还可进行逻辑判断，如用户是否已经登陆、有没有权限访问该页面等等工作。<br>它是随你的web应用启动而启动的，只初始化一次，以后就可以拦截相关请求，只有当你的web应用停止或重新部署的时候才销毁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> MyCharsetFilter.java 编码过滤器 </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 主要目的：过滤字符编码；其次，做一些应用逻辑判断等. </span></span><br><span class=\"line\"><span class=\"comment\">// Filter跟web应用一起启动 </span></span><br><span class=\"line\"><span class=\"comment\">// 当web应用重新启动或销毁时，Filter也被销毁 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCharsetFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123; </span><br><span class=\"line\">     <span class=\"keyword\">private</span> FilterConfig config = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"MyCharsetFilter准备销毁...\"</span>); </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest arg0, ServletResponse arg1, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123; </span><br><span class=\"line\">         <span class=\"comment\">// 强制类型转换 </span></span><br><span class=\"line\">         HttpServletRequest request = (HttpServletRequest)arg0; </span><br><span class=\"line\">         HttpServletResponse response = (HttpServletResponse)arg1; </span><br><span class=\"line\">         <span class=\"comment\">// 获取web.xm设置的编码集，设置到Request、Response中         </span></span><br><span class=\"line\">　　　　  <span class=\"comment\">//request.setCharacterEncoding(config.getInitParameter(\"charset\"));          </span></span><br><span class=\"line\">　　　　  <span class=\"comment\">//response.setContentType(config.getInitParameter(\"contentType\"));        </span></span><br><span class=\"line\"> 　　　　 <span class=\"comment\">//response.setCharacterEncoding(config.getInitParameter(\"charset\"));          </span></span><br><span class=\"line\">        <span class=\"comment\">// 将请求转发到目的地 </span></span><br><span class=\"line\">         chain.doFilter(request, response); </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig arg0)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123; </span><br><span class=\"line\">         <span class=\"keyword\">this</span>.config = arg0; </span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"MyCharsetFilter初始化...\"</span>); </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下是 MyCharsetFilter.Java 在web.xml 中配置:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>dc.gz.filters.MyCharsetFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span> </span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>charset<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span> </span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span> </span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contentType<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span> </span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>text/html;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- * 代表截获所有的请求  或指定请求/test.do  /xxx.do --&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2.监听器</p>\n<p>现在来说说Servlet的监听器Listener，它是实现了javax.servlet.ServletContextListener 接口的服务器端程序，它也是随web应用的启动而启动，只初始化一次，随web应用的停止而销毁。<br>主要作用是： 做一些初始化的内容添加工作、设置一些基本的内容、比如一些参数或者是一些固定的对象等等。他会对特定的事件产生一个处理。监听在很多模式下用到。比如说观察者模式，就是一个监听来的。又比如struts2 可 以用监听来启动。<br>Servlet监听器用于监听一些重要事件的发生，监听器对象可以在事情发生前、发生后可以做一些必要的处理。好比如果说Servlet 的监听器Listene。<br>在web.xml中配置。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyServletContextListener.java </span><br><span class=\"line\"> package dc.gz.listeners; </span><br><span class=\"line\"> import javax.servlet.ServletContext; </span><br><span class=\"line\"> import javax.servlet.ServletContextEvent; </span><br><span class=\"line\"> import javax.servlet.ServletContextListener; </span><br><span class=\"line\"> import org.apache.commons.dbcp.BasicDataSource; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">  * Web应用监听器 </span></span><br><span class=\"line\"><span class=\"comment\">  */</span> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyServletContextListener</span> <span class=\"title\">implements</span> <span class=\"title\">ServletContextListener</span> &#123;   </span><br><span class=\"line\">     <span class=\"comment\">// 应用监听器的销毁方法 </span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextDestroyed</span>(<span class=\"params\">ServletContextEvent <span class=\"keyword\">event</span></span>)</span> &#123; </span><br><span class=\"line\">         ServletContext sc = <span class=\"keyword\">event</span>.getServletContext(); </span><br><span class=\"line\">         <span class=\"comment\">// 在整个web应用销毁之前调用，将所有应用空间所设置的内容清空 </span></span><br><span class=\"line\">         sc.removeAttribute(<span class=\"string\">\"dataSource\"</span>); </span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"销毁工作完成...\"</span>); </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"comment\">// 应用监听器的初始化方法 </span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextInitialized</span>(<span class=\"params\">ServletContextEvent <span class=\"keyword\">event</span></span>)</span> &#123; </span><br><span class=\"line\">         <span class=\"comment\">// 通过这个事件可以获取整个应用的空间 </span></span><br><span class=\"line\">         <span class=\"comment\">// 在整个web应用下面启动的时候做一些初始化的内容添加工作 </span></span><br><span class=\"line\">         ServletContext sc = <span class=\"keyword\">event</span>.getServletContext(); </span><br><span class=\"line\">         <span class=\"comment\">// 设置一些基本的内容；比如一些参数或者是一些固定的对象 </span></span><br><span class=\"line\">         <span class=\"comment\">// 创建DataSource对象，连接池技术 dbcp </span></span><br><span class=\"line\">         BasicDataSource bds = <span class=\"keyword\">new</span> BasicDataSource(); </span><br><span class=\"line\">         bds.setDriverClassName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);                      </span><br><span class=\"line\">         bds.setUrl(<span class=\"string\">\"jdbc:mysql://localhost:3306/hibernate\"</span>); </span><br><span class=\"line\">         bds.setUsername(<span class=\"string\">\"root\"</span>); </span><br><span class=\"line\">         bds.setPassword(<span class=\"string\">\"root\"</span>); </span><br><span class=\"line\">         bds.setMaxActive(<span class=\"number\">10</span>);<span class=\"comment\">//最大连接数 </span></span><br><span class=\"line\">         bds.setMaxIdle(<span class=\"number\">5</span>);<span class=\"comment\">//最大管理数 </span></span><br><span class=\"line\">         <span class=\"comment\">//bds.setMaxWait(maxWait); 最大等待时间 </span></span><br><span class=\"line\">         <span class=\"comment\">// 把 DataSource 放入ServletContext空间中， </span></span><br><span class=\"line\">         <span class=\"comment\">// 供整个web应用的使用(获取数据库连接) </span></span><br><span class=\"line\">         sc.setAttribute(<span class=\"string\">\"dataSource\"</span>, bds); </span><br><span class=\"line\">         System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"应用监听器初始化工作完成...\"</span>); </span><br><span class=\"line\">         System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"已经创建DataSource...\"</span>); </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web.xml中配置如下，很简单：</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- 配置应用监听器  --&gt;</span> </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span> </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>dc.gz.listeners.MyServletContextListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span> </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.拦截器</p>\n<p>拦截器是在面向切面编程中应用的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用。是基于JAVA的反射机制。</p>\n <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">PermissionInterceptor</span>权限控制类</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PermissionInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">MethodFilterInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> long serialVersionUID = <span class=\"number\">-5360035516489852006</span>L;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**拦截每一个action请求</span></span><br><span class=\"line\"><span class=\"comment\">     * @see com.opensymphony.xwork2.interceptor.MethodFilterInterceptor#doIntercept(com.opensymphony.xwork2.ActionInvocation)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">String</span> doIntercept(<span class=\"type\">ActionInvocation</span> invocation) <span class=\"keyword\">throws</span> <span class=\"type\">Exception</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">System</span>.out.println(<span class=\"string\">\"进入MyMethodInterceptor方法权限拦截器!!!!!!!!!!!!!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取当前action的类</span></span><br><span class=\"line\">        <span class=\"comment\">// final Class objClass=invocation.getAction().getClass();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取当前用户session</span></span><br><span class=\"line\">        <span class=\"type\">Map</span>&lt;<span class=\"type\">String</span>, <span class=\"type\">Object</span>&gt; session = invocation.getInvocationContext().getSession();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从session获取用户等信息</span></span><br><span class=\"line\">        <span class=\"comment\">// User user = (User) session.get(\"login_\");</span></span><br><span class=\"line\">        <span class=\"comment\">// String name=user.getUName();</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断当前用户权限，是否可以操作，struts.xml配置的方法，如果有权限就通过</span></span><br><span class=\"line\">        <span class=\"comment\">//(Integer) ServletActionContext.getRequest().getSession().getAttribute(\"UAuth\")==1</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (<span class=\"type\">Util</span>.isHavePermission()) &#123;</span><br><span class=\"line\">            <span class=\"type\">System</span>.out.println(<span class=\"string\">\"有权限，并且请求成功\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 表示通过验证，可以执行该action</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> invocation.invoke();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Object actionObj=objClass.newInstance();</span></span><br><span class=\"line\">        <span class=\"comment\">// objClass.getDeclaredField(\"opMsg\").set(actionObj,</span></span><br><span class=\"line\">        <span class=\"comment\">// \"对不起，您的权限不够，无法进行该操作！\");</span></span><br><span class=\"line\">        <span class=\"comment\">// objClass.getDeclaredMethod(\"setOpMsg\",</span></span><br><span class=\"line\">        <span class=\"comment\">// String.class).invoke(actionObj, \"对不起，您的权限不够，无法进行该操作！\");</span></span><br><span class=\"line\">        invocation.getInvocationContext().put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"对不起，您的权限不够，无法进行该操作！\"</span>);</span><br><span class=\"line\">        session.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"对不起，您的权限不够，无法进行该操作！\"</span>);</span><br><span class=\"line\">        <span class=\"type\">System</span>.out.println(<span class=\"string\">\"权限不够被拒绝\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>struts2配置文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--&lt;/package&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 定义包，名字basePackage，继承struts默认包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--struts 拦截器实现 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">interceptors</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 配置权限拦截器 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">interceptor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"permission\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">class</span>=<span class=\"string\">\"com.xx.interceptor.PermissionInterceptor\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 需要拦截的方法 --&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- execludeMethods：该参数指定拦截器拒绝拦截的方法列表，多个方法用“，”隔开（支持通配符*，例如add*，表示所有以add开头的方法），</span></span><br><span class=\"line\"><span class=\"comment\">                 如果指定了这个参数拦截器不会拦截指定列表中的方法，就是所谓的黑名单 </span></span><br><span class=\"line\"><span class=\"comment\">                    includeMethods： 该参数指定拦截器需要拦截的方法列表，多个方法用“，”隔开（支持通配符*，例如add*，表示所有以add开头的方法），</span></span><br><span class=\"line\"><span class=\"comment\">                 如果指定了参数，则指定的Action在执行前会被拦截，即白名单。 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"includeMethods\"</span>&gt;</span>deleteUser,deleteAccount,deleteRecord<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 不需要拦截的方法 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"excludeMethods\"</span>&gt;</span>query*<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">interceptor</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 定义拦截器栈 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">interceptor-stack</span> <span class=\"attr\">name</span>=<span class=\"string\">\"permissionStack\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"permission\"</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultStack\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">interceptor-stack</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">interceptors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 定义默认拦截器 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">default-interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"permissionStack\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">default-interceptor-ref</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>4.下面再详谈过滤器、拦截器的区别：</p>\n<p>1、拦截器是基于java反射机制的，而过滤器是基于函数回调的。</p>\n<p>2、过滤器依赖于servlet容器，而拦截器不依赖于servlet容器。</p>\n<p>3、拦截器只能对Action请求起作用，而过滤器则可以对几乎所有请求起作用。</p>\n<p>4、拦截器可以访问Action上下文、值栈里的对象，而过滤器不能。<br>5、在Action的生命周期中，拦截器可以多次调用，而过滤器只能在容器初始化时被调用一次。</p>\n<p>6、过滤器：取你需要的东西，忽视那些不需要的东西！在程序中，你希望选择中一篇文章中的所有数字，你就可以针对性的挑选数字！</p>\n<p>7、拦截器：针对你不要的东西进行拦截，比如说，在一个BBS里面你希望人家不要留“小乌鸦”的这个词，那你就可能采用拦截器!</p>\n<p>8、过滤器，是在Java web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或者struts2的 action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者 struts2的action前统一设置字符集，或者去除掉一些非法字符</p>\n<p>9、拦截器，是在面向切面编程的就是在你的service或者一个方法，前调用一个方法，或者在方法后调用一个方法比如动态代理就是拦截器的简单实现，在你调用方法前打印出字符串（或者做其它业务逻辑的操作），也可以在你调用方法后打印出字符串，甚至在你抛出异常的时候做业务逻辑的操作。</p>\n<p>10、执行顺序 ：过滤前 - 拦截前 - Action处理 - 拦截后 -过滤后。个人认为过滤是一个横向的过程，首先把客户端提交的内容进行过滤(例如未登录用户不能访问内部页面的处理)；过滤通过后，拦截器将检查用户提交数据的验证，做一些前期的数据处理，接着把处理后的数据发给对应的Action；Action处理完成返回后，拦截器还可以做其他过程，再向上返回到过滤器的后续操作。</p>\n"},{"title":"springboot项目混淆方案","date":"2019-07-02T08:28:54.000Z","_content":"\n# springboot 项目混淆\n\nproguard简单来说是为了防止反编译，更准确的说，进行业务代码的混淆，是使得代码易读性变差。\n\n## 引入proguard-maven-plugin\n\n```\n<plugin>\n        <groupId>com.github.wvengen</groupId>\n        <artifactId>proguard-maven-plugin</artifactId>\n        <version>2.0.14</version>\n        <executions>\n          <execution>\n            <phase>package</phase>\n            <goals>\n              <goal>proguard</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <proguardVersion>6.0.3</proguardVersion>\n          <injar>${project.build.finalName}.jar</injar>\n          <!-- <injar>classes</injar> -->\n          <outjar>${project.build.finalName}.jar</outjar>\n          <!--\n                    <outjar>${project.build.finalName}.jar</outjar>\n          -->\n          <obfuscate>true</obfuscate>\n          <options>\n            <!--# JDK目标版本1.8-->\n            <option>-target 1.8</option>\n            <!-- 不做收缩（删除注释、未被引用代码）-->\n            <option>-dontshrink</option>\n            <!-- 不做优化（变更代码实现逻辑）-->\n            <option>-dontoptimize</option>\n            <!--  ##对于类成员的命名的混淆采取唯一策略-->\n            <option>-useuniqueclassmembernames</option>\n            <!--## 混淆类名之后，对使用Class.forName('className')之类的地方进行相应替代-->\n            <option>-adaptclassstrings</option>\n            <!--混淆时不生成大小写混合的类名，默认是可以大小写混合-->\n            <option>-dontusemixedcaseclassnames</option>\n            <!--忽略警告-->\n            <option>-ignorewarnings</option>\n            <!-- This option will replace all strings in reflections method invocations with new class names.\n                 For example, invokes Class.forName('className')-->\n            <!-- <option>-adaptclassstrings</option> -->\n            <!-- This option will save all original annotations and etc. Otherwise all we be removed from files.-->\n            <!-- 不混淆所有特殊的类-->\n            <option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,\n              SourceFile,LineNumberTable,*Annotation*,EnclosingMethod\n            </option>\n            <!-- This option will save all original names in interfaces (without obfuscate).-->\n            <!--\n                         <option>-keepnames interface **</option>\n            -->\n            <!-- This option will save all original methods parameters in files defined in -keep sections,\n                 otherwise all parameter names will be obfuscate.-->\n\n            <!--保留参数名字-->\n            <option>-keepparameternames</option>\n            <!--保留主程序入口-->\n            <!--\n                        <option>-keep @org.springframework.boot.autoconfigure.SpringBootApplication class * {*;}</option>\n            -->\n            <!-- <option>-libraryjars **</option> -->\n            <!-- This option will save all original class files (without obfuscate) but obfuscate all in domain package.-->\n            <!--<option>-keep class !com.slm.proguard.example.spring.boot.domain.** { *; }</option>-->\n\n<!--\n            <option>-keep class !com.bmsoft.graph.** { *; }</option>\n-->\n            <option>-keep class com.bmsoft.graph.config.** { *; }</option>\n            <option>-keep class com.bmsoft.graph.LinkGraphApplication { *; }</option>\n            <option>-keep class com.bmsoft.graph.mapper.** { *; }</option>\n<!--\n            <option>-keep class com.bmsoft.graph.auth.filter.** { *; }</option>\n-->\n            <option>-keep class com.bmsoft.graph.aspect.** { *; }</option>\n            <option>-keep class com.bmsoft.graph.domain.** { *; }</option>\n            <option>-keep class com.bmsoft.graph.controller.** { *; }</option>\n<!--\n            <option>-keep interface * extends * { *; }</option>\n-->\n             <!--##保留枚举成员及方法-->\n            <option> -keepclassmembers enum * { *; }</option>\n            <option>-keepclassmembers class * {\n              <!-- @org.springframework.beans.factory.annotation.Autowired *; -->\n              @org.springframework.beans.factory.annotation.Autowired *;\n              @org.springframework.beans.factory.annotation.Value *;\n              }\n            </option>\n          </options>\n          <libs>\n            <!-- Include main JAVA library required.-->\n            <lib>${java.home}/lib/rt.jar</lib>\n            <lib>${java.home}/lib/jce.jar</lib>\n            <!-- <lib>${java.home}/lib/spring-boot-starter-web-1.4.1.RELEASE.jar</lib> -->\n          </libs>\n        </configuration>\n        <dependencies>\n          <dependency>\n            <groupId>net.sf.proguard</groupId>\n            <artifactId>proguard-base</artifactId>\n            <version>6.0.3</version>\n          </dependency>\n        </dependencies>\n      </plugin>\n```\n\n这里引用了com.github.wvengen的proguard-maven-plugin插件，使用的proguard-base版本是6.0.3\n这里使用java8，因为libs那里照常配置rt.jar，jce.jar，如果是java9的话，则需要换成相应的模块。\n\n另外指定proguard的阶段为package，springboot打包在repackage阶段\n\n```\n<plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n        <executions>\n          <execution>\n            <!-- <phase>none</phase> -->\n            <goals>\n              <goal>repackage</goal>\n            </goals>\n            <configuration>\n              <mainClass>com.bmsoft.graph.LinkGraphApplication</mainClass>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n```\n\n## bean命名重复异常\n\n由于proguard混淆貌似不能指定混淆的类名在basePackages下面类名混淆后唯一，不同包名经常有a.class，b.class,c.class之类重复的类名，因此spring容器初始化bean的时候会报错。\n\n异常信息如下\n```\norg.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [com.example.demo.MvcDemoApplication]; nested exception is org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'a' for bean class [com.example.demo.c.a] conflicts with existing, non-compatible bean definition of same name and class [com.example.demo.b.a]\n    at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:181) ~[spring-context-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]\n```\n\n需要在\b更改bean 命名\b\b\n```\npublic class LinkGraphApplication {\n\n  public static class CustomGenerator implements BeanNameGenerator {\n\n    @Override\n    public String generateBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {\n      return definition.getBeanClassName();\n    }\n  }\n\n  public static void main(String[] args) {\n    new SpringApplicationBuilder(LinkGraphApplication.class)\n        .beanNameGenerator(new CustomGenerator())\n        .run(args);\n  }\n}\n```\n\n## 执行maven命令,打成jar包\n\n```\nclean package -DskipTests\n```\n\n## 运行jar包\n\nnohup java -jar  jar包名.jar -&\n \n### 可能出现的问题\n\b项目中引入了swagger 插件，需要在打包的时候，不进行bean的初始化配置\n\n```\n@Configuration\n@ConditionalOnProperty(prefix = \"swagger\", value = {\"enable\"}, havingValue = \"true\")\n@EnableSwagger2\npublic class SwaggerConfig {\n   @Bean\n  public Docket createRestApi() {\n    ParameterBuilder tokenParam = new ParameterBuilder();\n    List<Parameter> params = new ArrayList<Parameter>();\n    tokenParam.name(\"Authorization\").description(\"令牌标识\").modelRef(new ModelRef(\"string\"))\n        .parameterType(\"header\").required(false).defaultValue(TOKEN).build();\n    params.add(tokenParam.build());\n    return new Docket(DocumentationType.SWAGGER_2)\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(\"com.bmsoft.graph.controller\"))\n        .paths(PathSelectors.any())\n        .build()\n        .globalOperationParameters(params)\n        .apiInfo(apiInfo())\n        .pathMapping(\"\");\n        .new ResponseMessageBuilder().code(403).message(\"Forbidden!!\").build()));\n  }\n\n\n  private ApiInfo apiInfo() {\n    return new ApiInfoBuilder()\n        .title(\"图服务的 API\")\n        .description(\"图服务\")\n        .contact(\"图服务\")\n        .version(\"1.0.0\")\n        .build();\n  }\n}\n```\n\n## 反编译\n\nWindows下，直接解压jar 包，可以查看jar包\b内的文件形式，Mac 可以使用 unarchiver 进行解压jar包，要查看字节码文件的话，可以\b直接把class文件放到idea进行查看\n\n## 注意\n\n-keep class 类/包.**  表示保留类名\n\n-keepclassmembers class 类/包.**{ *;} 表示保留类下边的所有变量，均不混淆\n\n\n参考链接 \nhttps://blog.csdn.net/songluyi/article/details/79554928\n\nhttps://www.jianshu.com/p/8f6c72def69d","source":"_posts/springboot项目混淆方案.md","raw":"---\ntitle: springboot项目混淆方案\ndate: 2019-07-02 16:28:54\ntags:\n    - springboot混淆\n---\n\n# springboot 项目混淆\n\nproguard简单来说是为了防止反编译，更准确的说，进行业务代码的混淆，是使得代码易读性变差。\n\n## 引入proguard-maven-plugin\n\n```\n<plugin>\n        <groupId>com.github.wvengen</groupId>\n        <artifactId>proguard-maven-plugin</artifactId>\n        <version>2.0.14</version>\n        <executions>\n          <execution>\n            <phase>package</phase>\n            <goals>\n              <goal>proguard</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <proguardVersion>6.0.3</proguardVersion>\n          <injar>${project.build.finalName}.jar</injar>\n          <!-- <injar>classes</injar> -->\n          <outjar>${project.build.finalName}.jar</outjar>\n          <!--\n                    <outjar>${project.build.finalName}.jar</outjar>\n          -->\n          <obfuscate>true</obfuscate>\n          <options>\n            <!--# JDK目标版本1.8-->\n            <option>-target 1.8</option>\n            <!-- 不做收缩（删除注释、未被引用代码）-->\n            <option>-dontshrink</option>\n            <!-- 不做优化（变更代码实现逻辑）-->\n            <option>-dontoptimize</option>\n            <!--  ##对于类成员的命名的混淆采取唯一策略-->\n            <option>-useuniqueclassmembernames</option>\n            <!--## 混淆类名之后，对使用Class.forName('className')之类的地方进行相应替代-->\n            <option>-adaptclassstrings</option>\n            <!--混淆时不生成大小写混合的类名，默认是可以大小写混合-->\n            <option>-dontusemixedcaseclassnames</option>\n            <!--忽略警告-->\n            <option>-ignorewarnings</option>\n            <!-- This option will replace all strings in reflections method invocations with new class names.\n                 For example, invokes Class.forName('className')-->\n            <!-- <option>-adaptclassstrings</option> -->\n            <!-- This option will save all original annotations and etc. Otherwise all we be removed from files.-->\n            <!-- 不混淆所有特殊的类-->\n            <option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,\n              SourceFile,LineNumberTable,*Annotation*,EnclosingMethod\n            </option>\n            <!-- This option will save all original names in interfaces (without obfuscate).-->\n            <!--\n                         <option>-keepnames interface **</option>\n            -->\n            <!-- This option will save all original methods parameters in files defined in -keep sections,\n                 otherwise all parameter names will be obfuscate.-->\n\n            <!--保留参数名字-->\n            <option>-keepparameternames</option>\n            <!--保留主程序入口-->\n            <!--\n                        <option>-keep @org.springframework.boot.autoconfigure.SpringBootApplication class * {*;}</option>\n            -->\n            <!-- <option>-libraryjars **</option> -->\n            <!-- This option will save all original class files (without obfuscate) but obfuscate all in domain package.-->\n            <!--<option>-keep class !com.slm.proguard.example.spring.boot.domain.** { *; }</option>-->\n\n<!--\n            <option>-keep class !com.bmsoft.graph.** { *; }</option>\n-->\n            <option>-keep class com.bmsoft.graph.config.** { *; }</option>\n            <option>-keep class com.bmsoft.graph.LinkGraphApplication { *; }</option>\n            <option>-keep class com.bmsoft.graph.mapper.** { *; }</option>\n<!--\n            <option>-keep class com.bmsoft.graph.auth.filter.** { *; }</option>\n-->\n            <option>-keep class com.bmsoft.graph.aspect.** { *; }</option>\n            <option>-keep class com.bmsoft.graph.domain.** { *; }</option>\n            <option>-keep class com.bmsoft.graph.controller.** { *; }</option>\n<!--\n            <option>-keep interface * extends * { *; }</option>\n-->\n             <!--##保留枚举成员及方法-->\n            <option> -keepclassmembers enum * { *; }</option>\n            <option>-keepclassmembers class * {\n              <!-- @org.springframework.beans.factory.annotation.Autowired *; -->\n              @org.springframework.beans.factory.annotation.Autowired *;\n              @org.springframework.beans.factory.annotation.Value *;\n              }\n            </option>\n          </options>\n          <libs>\n            <!-- Include main JAVA library required.-->\n            <lib>${java.home}/lib/rt.jar</lib>\n            <lib>${java.home}/lib/jce.jar</lib>\n            <!-- <lib>${java.home}/lib/spring-boot-starter-web-1.4.1.RELEASE.jar</lib> -->\n          </libs>\n        </configuration>\n        <dependencies>\n          <dependency>\n            <groupId>net.sf.proguard</groupId>\n            <artifactId>proguard-base</artifactId>\n            <version>6.0.3</version>\n          </dependency>\n        </dependencies>\n      </plugin>\n```\n\n这里引用了com.github.wvengen的proguard-maven-plugin插件，使用的proguard-base版本是6.0.3\n这里使用java8，因为libs那里照常配置rt.jar，jce.jar，如果是java9的话，则需要换成相应的模块。\n\n另外指定proguard的阶段为package，springboot打包在repackage阶段\n\n```\n<plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n        <executions>\n          <execution>\n            <!-- <phase>none</phase> -->\n            <goals>\n              <goal>repackage</goal>\n            </goals>\n            <configuration>\n              <mainClass>com.bmsoft.graph.LinkGraphApplication</mainClass>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n```\n\n## bean命名重复异常\n\n由于proguard混淆貌似不能指定混淆的类名在basePackages下面类名混淆后唯一，不同包名经常有a.class，b.class,c.class之类重复的类名，因此spring容器初始化bean的时候会报错。\n\n异常信息如下\n```\norg.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [com.example.demo.MvcDemoApplication]; nested exception is org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'a' for bean class [com.example.demo.c.a] conflicts with existing, non-compatible bean definition of same name and class [com.example.demo.b.a]\n    at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:181) ~[spring-context-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]\n```\n\n需要在\b更改bean 命名\b\b\n```\npublic class LinkGraphApplication {\n\n  public static class CustomGenerator implements BeanNameGenerator {\n\n    @Override\n    public String generateBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {\n      return definition.getBeanClassName();\n    }\n  }\n\n  public static void main(String[] args) {\n    new SpringApplicationBuilder(LinkGraphApplication.class)\n        .beanNameGenerator(new CustomGenerator())\n        .run(args);\n  }\n}\n```\n\n## 执行maven命令,打成jar包\n\n```\nclean package -DskipTests\n```\n\n## 运行jar包\n\nnohup java -jar  jar包名.jar -&\n \n### 可能出现的问题\n\b项目中引入了swagger 插件，需要在打包的时候，不进行bean的初始化配置\n\n```\n@Configuration\n@ConditionalOnProperty(prefix = \"swagger\", value = {\"enable\"}, havingValue = \"true\")\n@EnableSwagger2\npublic class SwaggerConfig {\n   @Bean\n  public Docket createRestApi() {\n    ParameterBuilder tokenParam = new ParameterBuilder();\n    List<Parameter> params = new ArrayList<Parameter>();\n    tokenParam.name(\"Authorization\").description(\"令牌标识\").modelRef(new ModelRef(\"string\"))\n        .parameterType(\"header\").required(false).defaultValue(TOKEN).build();\n    params.add(tokenParam.build());\n    return new Docket(DocumentationType.SWAGGER_2)\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(\"com.bmsoft.graph.controller\"))\n        .paths(PathSelectors.any())\n        .build()\n        .globalOperationParameters(params)\n        .apiInfo(apiInfo())\n        .pathMapping(\"\");\n        .new ResponseMessageBuilder().code(403).message(\"Forbidden!!\").build()));\n  }\n\n\n  private ApiInfo apiInfo() {\n    return new ApiInfoBuilder()\n        .title(\"图服务的 API\")\n        .description(\"图服务\")\n        .contact(\"图服务\")\n        .version(\"1.0.0\")\n        .build();\n  }\n}\n```\n\n## 反编译\n\nWindows下，直接解压jar 包，可以查看jar包\b内的文件形式，Mac 可以使用 unarchiver 进行解压jar包，要查看字节码文件的话，可以\b直接把class文件放到idea进行查看\n\n## 注意\n\n-keep class 类/包.**  表示保留类名\n\n-keepclassmembers class 类/包.**{ *;} 表示保留类下边的所有变量，均不混淆\n\n\n参考链接 \nhttps://blog.csdn.net/songluyi/article/details/79554928\n\nhttps://www.jianshu.com/p/8f6c72def69d","slug":"springboot项目混淆方案","published":1,"updated":"2019-07-02T09:43:17.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxoddk2p000fls74fdytbkwl","content":"<h1 id=\"springboot-项目混淆\"><a href=\"#springboot-项目混淆\" class=\"headerlink\" title=\"springboot 项目混淆\"></a>springboot 项目混淆</h1><p>proguard简单来说是为了防止反编译，更准确的说，进行业务代码的混淆，是使得代码易读性变差。</p>\n<h2 id=\"引入proguard-maven-plugin\"><a href=\"#引入proguard-maven-plugin\" class=\"headerlink\" title=\"引入proguard-maven-plugin\"></a>引入proguard-maven-plugin</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.wvengen<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>proguard-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>proguard<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">proguardVersion</span>&gt;</span>6.0.3<span class=\"tag\">&lt;/<span class=\"name\">proguardVersion</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">injar</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">injar</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- &lt;injar&gt;classes&lt;/injar&gt; --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">outjar</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">outjar</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;outjar&gt;$&#123;project.build.finalName&#125;.jar&lt;/outjar&gt;</span></span><br><span class=\"line\"><span class=\"comment\">          --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">obfuscate</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">obfuscate</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">options</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--# JDK目标版本1.8--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-target 1.8<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 不做收缩（删除注释、未被引用代码）--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-dontshrink<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 不做优化（变更代码实现逻辑）--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-dontoptimize<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--  ##对于类成员的命名的混淆采取唯一策略--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-useuniqueclassmembernames<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--## 混淆类名之后，对使用Class.forName('className')之类的地方进行相应替代--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-adaptclassstrings<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--混淆时不生成大小写混合的类名，默认是可以大小写混合--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-dontusemixedcaseclassnames<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--忽略警告--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-ignorewarnings<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- This option will replace all strings in reflections method invocations with new class names.</span></span><br><span class=\"line\"><span class=\"comment\">                 For example, invokes Class.forName('className')--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;option&gt;-adaptclassstrings&lt;/option&gt; --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- This option will save all original annotations and etc. Otherwise all we be removed from files.--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 不混淆所有特殊的类--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,</span><br><span class=\"line\">              SourceFile,LineNumberTable,*Annotation*,EnclosingMethod</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- This option will save all original names in interfaces (without obfuscate).--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">                         &lt;option&gt;-keepnames interface **&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- This option will save all original methods parameters in files defined in -keep sections,</span></span><br><span class=\"line\"><span class=\"comment\">                 otherwise all parameter names will be obfuscate.--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--保留参数名字--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keepparameternames<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--保留主程序入口--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;option&gt;-keep @org.springframework.boot.autoconfigure.SpringBootApplication class * &#123;*;&#125;&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;option&gt;-libraryjars **&lt;/option&gt; --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- This option will save all original class files (without obfuscate) but obfuscate all in domain package.--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;option&gt;-keep class !com.slm.proguard.example.spring.boot.domain.** &#123; *; &#125;&lt;/option&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;option&gt;-keep class !com.bmsoft.graph.** &#123; *; &#125;&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keep class com.bmsoft.graph.config.** &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keep class com.bmsoft.graph.LinkGraphApplication &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keep class com.bmsoft.graph.mapper.** &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;option&gt;-keep class com.bmsoft.graph.auth.filter.** &#123; *; &#125;&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keep class com.bmsoft.graph.aspect.** &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keep class com.bmsoft.graph.domain.** &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keep class com.bmsoft.graph.controller.** &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;option&gt;-keep interface * extends * &#123; *; &#125;&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">             <span class=\"comment\">&lt;!--##保留枚举成员及方法--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span> -keepclassmembers enum * &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keepclassmembers class * &#123;</span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- @org.springframework.beans.factory.annotation.Autowired *; --&gt;</span></span><br><span class=\"line\">              @org.springframework.beans.factory.annotation.Autowired *;</span><br><span class=\"line\">              @org.springframework.beans.factory.annotation.Value *;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">options</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">libs</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- Include main JAVA library required.--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">lib</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class=\"tag\">&lt;/<span class=\"name\">lib</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">lib</span>&gt;</span>$&#123;java.home&#125;/lib/jce.jar<span class=\"tag\">&lt;/<span class=\"name\">lib</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;lib&gt;$&#123;java.home&#125;/lib/spring-boot-starter-web-1.4.1.RELEASE.jar&lt;/lib&gt; --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">libs</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.sf.proguard<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>proguard-base<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.0.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里引用了com.github.wvengen的proguard-maven-plugin插件，使用的proguard-base版本是6.0.3<br>这里使用java8，因为libs那里照常配置rt.jar，jce.jar，如果是java9的话，则需要换成相应的模块。</p>\n<p>另外指定proguard的阶段为package，springboot打包在repackage阶段</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;phase&gt;none&lt;/phase&gt; --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>repackage<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>com.bmsoft.graph.LinkGraphApplication<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bean命名重复异常\"><a href=\"#bean命名重复异常\" class=\"headerlink\" title=\"bean命名重复异常\"></a>bean命名重复异常</h2><p>由于proguard混淆貌似不能指定混淆的类名在basePackages下面类名混淆后唯一，不同包名经常有a.class，b.class,c.class之类重复的类名，因此spring容器初始化bean的时候会报错。</p>\n<p>异常信息如下</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.beans.factory.<span class=\"type\">BeanDefinitionStoreException</span>: <span class=\"type\">Failed</span> to parse configuration <span class=\"class\"><span class=\"keyword\">class</span> [com.example.demo.<span class=\"type\">MvcDemoApplication</span>]</span>; nested exception is org.springframework.context.annotation.<span class=\"type\">ConflictingBeanDefinitionException</span>: <span class=\"type\">Annotation</span>-specified bean name 'a' <span class=\"keyword\">for</span> bean <span class=\"class\"><span class=\"keyword\">class</span> [com.example.demo.c.a] <span class=\"title\">conflicts</span> <span class=\"keyword\">with</span> <span class=\"title\">existing</span>, <span class=\"title\">non-compatible</span> <span class=\"title\">bean</span> <span class=\"title\">definition</span> <span class=\"title\">of</span> <span class=\"title\">same</span> <span class=\"title\">name</span> <span class=\"title\">and</span> <span class=\"title\">class</span> [com.example.demo.b.a]</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">at</span> <span class=\"title\">org</span>.<span class=\"title\">springframework</span>.<span class=\"title\">context</span>.<span class=\"title\">annotation</span>.<span class=\"title\">ConfigurationClassParser</span>.<span class=\"title\">parse</span>(<span class=\"params\"><span class=\"type\">ConfigurationClassParser</span>.java:181</span>) <span class=\"title\">~</span>[spring-context-4.3.10.<span class=\"type\">RELEASE</span>.jar!/:4.3.10.<span class=\"type\">RELEASE</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>需要在\b更改bean 命名\b\b</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkGraphApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomGenerator</span> <span class=\"keyword\"><span class=\"keyword\">implements</span> <span class=\"type\">BeanNameGenerator</span></span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">String</span> generateBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> definition.getBeanClassName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"type\">SpringApplicationBuilder</span>(LinkGraphApplication.class)</span><br><span class=\"line\">        .beanNameGenerator(<span class=\"keyword\">new</span> <span class=\"type\">CustomGenerator</span>())</span><br><span class=\"line\">        .run(args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行maven命令-打成jar包\"><a href=\"#执行maven命令-打成jar包\" class=\"headerlink\" title=\"执行maven命令,打成jar包\"></a>执行maven命令,打成jar包</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean <span class=\"keyword\">package</span> <span class=\"title\">-DskipTests</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行jar包\"><a href=\"#运行jar包\" class=\"headerlink\" title=\"运行jar包\"></a>运行jar包</h2><p>nohup java -jar  jar包名.jar -&amp;</p>\n<h3 id=\"可能出现的问题\"><a href=\"#可能出现的问题\" class=\"headerlink\" title=\"可能出现的问题\"></a>可能出现的问题</h3><p>\b项目中引入了swagger 插件，需要在打包的时候，不进行bean的初始化配置</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@ConditionalOnProperty(prefix = <span class=\"string\">\"swagger\"</span>, <span class=\"keyword\">value</span> = &#123;<span class=\"string\">\"enable\"</span>&#125;, havingValue = <span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">@EnableSwagger2</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> &#123;</span><br><span class=\"line\">   @Bean</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">createRestApi</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    ParameterBuilder tokenParam = <span class=\"keyword\">new</span> ParameterBuilder();</span><br><span class=\"line\">    List&lt;Parameter&gt; <span class=\"keyword\">params</span> = <span class=\"keyword\">new</span> ArrayList&lt;Parameter&gt;();</span><br><span class=\"line\">    tokenParam.name(<span class=\"string\">\"Authorization\"</span>).description(<span class=\"string\">\"令牌标识\"</span>).modelRef(<span class=\"keyword\">new</span> ModelRef(<span class=\"string\">\"string\"</span>))</span><br><span class=\"line\">        .parameterType(<span class=\"string\">\"header\"</span>).required(<span class=\"literal\">false</span>).defaultValue(TOKEN).build();</span><br><span class=\"line\">    <span class=\"keyword\">params</span>.<span class=\"keyword\">add</span>(tokenParam.build());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">        .<span class=\"keyword\">select</span>()</span><br><span class=\"line\">        .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">\"com.bmsoft.graph.controller\"</span>))</span><br><span class=\"line\">        .paths(PathSelectors.any())</span><br><span class=\"line\">        .build()</span><br><span class=\"line\">        .globalOperationParameters(<span class=\"keyword\">params</span>)</span><br><span class=\"line\">        .apiInfo(apiInfo())</span><br><span class=\"line\">        .pathMapping(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        .new ResponseMessageBuilder().code(<span class=\"number\">403</span>).message(<span class=\"string\">\"Forbidden!!\"</span>).build()));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">        .title(<span class=\"string\">\"图服务的 API\"</span>)</span><br><span class=\"line\">        .description(<span class=\"string\">\"图服务\"</span>)</span><br><span class=\"line\">        .contact(<span class=\"string\">\"图服务\"</span>)</span><br><span class=\"line\">        .version(<span class=\"string\">\"1.0.0\"</span>)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h2><p>Windows下，直接解压jar 包，可以查看jar包\b内的文件形式，Mac 可以使用 unarchiver 进行解压jar包，要查看字节码文件的话，可以\b直接把class文件放到idea进行查看</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>-keep class 类/包.**  表示保留类名</p>\n<p>-keepclassmembers class 类/包.**{ *;} 表示保留类下边的所有变量，均不混淆</p>\n<p>参考链接<br><a href=\"https://blog.csdn.net/songluyi/article/details/79554928\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/songluyi/article/details/79554928</a></p>\n<p><a href=\"https://www.jianshu.com/p/8f6c72def69d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/8f6c72def69d</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"springboot-项目混淆\"><a href=\"#springboot-项目混淆\" class=\"headerlink\" title=\"springboot 项目混淆\"></a>springboot 项目混淆</h1><p>proguard简单来说是为了防止反编译，更准确的说，进行业务代码的混淆，是使得代码易读性变差。</p>\n<h2 id=\"引入proguard-maven-plugin\"><a href=\"#引入proguard-maven-plugin\" class=\"headerlink\" title=\"引入proguard-maven-plugin\"></a>引入proguard-maven-plugin</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.wvengen<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>proguard-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>proguard<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">proguardVersion</span>&gt;</span>6.0.3<span class=\"tag\">&lt;/<span class=\"name\">proguardVersion</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">injar</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">injar</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- &lt;injar&gt;classes&lt;/injar&gt; --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">outjar</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">outjar</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;outjar&gt;$&#123;project.build.finalName&#125;.jar&lt;/outjar&gt;</span></span><br><span class=\"line\"><span class=\"comment\">          --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">obfuscate</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">obfuscate</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">options</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--# JDK目标版本1.8--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-target 1.8<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 不做收缩（删除注释、未被引用代码）--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-dontshrink<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 不做优化（变更代码实现逻辑）--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-dontoptimize<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--  ##对于类成员的命名的混淆采取唯一策略--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-useuniqueclassmembernames<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--## 混淆类名之后，对使用Class.forName('className')之类的地方进行相应替代--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-adaptclassstrings<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--混淆时不生成大小写混合的类名，默认是可以大小写混合--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-dontusemixedcaseclassnames<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--忽略警告--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-ignorewarnings<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- This option will replace all strings in reflections method invocations with new class names.</span></span><br><span class=\"line\"><span class=\"comment\">                 For example, invokes Class.forName('className')--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;option&gt;-adaptclassstrings&lt;/option&gt; --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- This option will save all original annotations and etc. Otherwise all we be removed from files.--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 不混淆所有特殊的类--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,</span><br><span class=\"line\">              SourceFile,LineNumberTable,*Annotation*,EnclosingMethod</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- This option will save all original names in interfaces (without obfuscate).--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">                         &lt;option&gt;-keepnames interface **&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- This option will save all original methods parameters in files defined in -keep sections,</span></span><br><span class=\"line\"><span class=\"comment\">                 otherwise all parameter names will be obfuscate.--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--保留参数名字--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keepparameternames<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--保留主程序入口--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;option&gt;-keep @org.springframework.boot.autoconfigure.SpringBootApplication class * &#123;*;&#125;&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;option&gt;-libraryjars **&lt;/option&gt; --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- This option will save all original class files (without obfuscate) but obfuscate all in domain package.--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;option&gt;-keep class !com.slm.proguard.example.spring.boot.domain.** &#123; *; &#125;&lt;/option&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;option&gt;-keep class !com.bmsoft.graph.** &#123; *; &#125;&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keep class com.bmsoft.graph.config.** &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keep class com.bmsoft.graph.LinkGraphApplication &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keep class com.bmsoft.graph.mapper.** &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;option&gt;-keep class com.bmsoft.graph.auth.filter.** &#123; *; &#125;&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keep class com.bmsoft.graph.aspect.** &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keep class com.bmsoft.graph.domain.** &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keep class com.bmsoft.graph.controller.** &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;option&gt;-keep interface * extends * &#123; *; &#125;&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">             <span class=\"comment\">&lt;!--##保留枚举成员及方法--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span> -keepclassmembers enum * &#123; *; &#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>-keepclassmembers class * &#123;</span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- @org.springframework.beans.factory.annotation.Autowired *; --&gt;</span></span><br><span class=\"line\">              @org.springframework.beans.factory.annotation.Autowired *;</span><br><span class=\"line\">              @org.springframework.beans.factory.annotation.Value *;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">options</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">libs</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- Include main JAVA library required.--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">lib</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class=\"tag\">&lt;/<span class=\"name\">lib</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">lib</span>&gt;</span>$&#123;java.home&#125;/lib/jce.jar<span class=\"tag\">&lt;/<span class=\"name\">lib</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;lib&gt;$&#123;java.home&#125;/lib/spring-boot-starter-web-1.4.1.RELEASE.jar&lt;/lib&gt; --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">libs</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.sf.proguard<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>proguard-base<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.0.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里引用了com.github.wvengen的proguard-maven-plugin插件，使用的proguard-base版本是6.0.3<br>这里使用java8，因为libs那里照常配置rt.jar，jce.jar，如果是java9的话，则需要换成相应的模块。</p>\n<p>另外指定proguard的阶段为package，springboot打包在repackage阶段</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;phase&gt;none&lt;/phase&gt; --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>repackage<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>com.bmsoft.graph.LinkGraphApplication<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bean命名重复异常\"><a href=\"#bean命名重复异常\" class=\"headerlink\" title=\"bean命名重复异常\"></a>bean命名重复异常</h2><p>由于proguard混淆貌似不能指定混淆的类名在basePackages下面类名混淆后唯一，不同包名经常有a.class，b.class,c.class之类重复的类名，因此spring容器初始化bean的时候会报错。</p>\n<p>异常信息如下</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.beans.factory.<span class=\"type\">BeanDefinitionStoreException</span>: <span class=\"type\">Failed</span> to parse configuration <span class=\"class\"><span class=\"keyword\">class</span> [com.example.demo.<span class=\"type\">MvcDemoApplication</span>]</span>; nested exception is org.springframework.context.annotation.<span class=\"type\">ConflictingBeanDefinitionException</span>: <span class=\"type\">Annotation</span>-specified bean name 'a' <span class=\"keyword\">for</span> bean <span class=\"class\"><span class=\"keyword\">class</span> [com.example.demo.c.a] <span class=\"title\">conflicts</span> <span class=\"keyword\">with</span> <span class=\"title\">existing</span>, <span class=\"title\">non-compatible</span> <span class=\"title\">bean</span> <span class=\"title\">definition</span> <span class=\"title\">of</span> <span class=\"title\">same</span> <span class=\"title\">name</span> <span class=\"title\">and</span> <span class=\"title\">class</span> [com.example.demo.b.a]</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">at</span> <span class=\"title\">org</span>.<span class=\"title\">springframework</span>.<span class=\"title\">context</span>.<span class=\"title\">annotation</span>.<span class=\"title\">ConfigurationClassParser</span>.<span class=\"title\">parse</span>(<span class=\"params\"><span class=\"type\">ConfigurationClassParser</span>.java:181</span>) <span class=\"title\">~</span>[spring-context-4.3.10.<span class=\"type\">RELEASE</span>.jar!/:4.3.10.<span class=\"type\">RELEASE</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>需要在\b更改bean 命名\b\b</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkGraphApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomGenerator</span> <span class=\"keyword\"><span class=\"keyword\">implements</span> <span class=\"type\">BeanNameGenerator</span></span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">String</span> generateBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> definition.getBeanClassName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"type\">SpringApplicationBuilder</span>(LinkGraphApplication.class)</span><br><span class=\"line\">        .beanNameGenerator(<span class=\"keyword\">new</span> <span class=\"type\">CustomGenerator</span>())</span><br><span class=\"line\">        .run(args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行maven命令-打成jar包\"><a href=\"#执行maven命令-打成jar包\" class=\"headerlink\" title=\"执行maven命令,打成jar包\"></a>执行maven命令,打成jar包</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean <span class=\"keyword\">package</span> <span class=\"title\">-DskipTests</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行jar包\"><a href=\"#运行jar包\" class=\"headerlink\" title=\"运行jar包\"></a>运行jar包</h2><p>nohup java -jar  jar包名.jar -&amp;</p>\n<h3 id=\"可能出现的问题\"><a href=\"#可能出现的问题\" class=\"headerlink\" title=\"可能出现的问题\"></a>可能出现的问题</h3><p>\b项目中引入了swagger 插件，需要在打包的时候，不进行bean的初始化配置</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@ConditionalOnProperty(prefix = <span class=\"string\">\"swagger\"</span>, <span class=\"keyword\">value</span> = &#123;<span class=\"string\">\"enable\"</span>&#125;, havingValue = <span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">@EnableSwagger2</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> &#123;</span><br><span class=\"line\">   @Bean</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">createRestApi</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    ParameterBuilder tokenParam = <span class=\"keyword\">new</span> ParameterBuilder();</span><br><span class=\"line\">    List&lt;Parameter&gt; <span class=\"keyword\">params</span> = <span class=\"keyword\">new</span> ArrayList&lt;Parameter&gt;();</span><br><span class=\"line\">    tokenParam.name(<span class=\"string\">\"Authorization\"</span>).description(<span class=\"string\">\"令牌标识\"</span>).modelRef(<span class=\"keyword\">new</span> ModelRef(<span class=\"string\">\"string\"</span>))</span><br><span class=\"line\">        .parameterType(<span class=\"string\">\"header\"</span>).required(<span class=\"literal\">false</span>).defaultValue(TOKEN).build();</span><br><span class=\"line\">    <span class=\"keyword\">params</span>.<span class=\"keyword\">add</span>(tokenParam.build());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">        .<span class=\"keyword\">select</span>()</span><br><span class=\"line\">        .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">\"com.bmsoft.graph.controller\"</span>))</span><br><span class=\"line\">        .paths(PathSelectors.any())</span><br><span class=\"line\">        .build()</span><br><span class=\"line\">        .globalOperationParameters(<span class=\"keyword\">params</span>)</span><br><span class=\"line\">        .apiInfo(apiInfo())</span><br><span class=\"line\">        .pathMapping(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        .new ResponseMessageBuilder().code(<span class=\"number\">403</span>).message(<span class=\"string\">\"Forbidden!!\"</span>).build()));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">        .title(<span class=\"string\">\"图服务的 API\"</span>)</span><br><span class=\"line\">        .description(<span class=\"string\">\"图服务\"</span>)</span><br><span class=\"line\">        .contact(<span class=\"string\">\"图服务\"</span>)</span><br><span class=\"line\">        .version(<span class=\"string\">\"1.0.0\"</span>)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h2><p>Windows下，直接解压jar 包，可以查看jar包\b内的文件形式，Mac 可以使用 unarchiver 进行解压jar包，要查看字节码文件的话，可以\b直接把class文件放到idea进行查看</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>-keep class 类/包.**  表示保留类名</p>\n<p>-keepclassmembers class 类/包.**{ *;} 表示保留类下边的所有变量，均不混淆</p>\n<p>参考链接<br><a href=\"https://blog.csdn.net/songluyi/article/details/79554928\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/songluyi/article/details/79554928</a></p>\n<p><a href=\"https://www.jianshu.com/p/8f6c72def69d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/8f6c72def69d</a></p>\n"},{"title":"学习使我快乐","date":"2019-06-25T05:46:48.000Z","_content":"## 知足\n怎么去拥有 一道彩虹</br> \n怎么去拥抱 一夏天的风</br>\n天上的星星 笑地上的人</br>\n总是不能懂 不能觉得足够</br>\n如果我爱上 你的笑容</br>\n要怎么收藏 要怎么拥有</br>\n如果你快乐 不是为我</br>\n会不会放手 其实才是拥有</br>\n当一阵风吹来 风筝飞上天空</br>\n为了你而祈祷 而祝福 而感动</br>\n终于你身影消失在 人海尽头</br>\n才发现 笑着哭 最痛</br>\n那天你和我 那个山丘</br>\n那样的唱着 那一年的歌</br>\n那样的回忆 那么足够</br>\n足够我天天 都品尝着寂寞</br>\n当一阵风吹来 风筝飞上天空</br>\n为了你而祈祷 而祝福 而感动</br>\n终于你身影消失在 人海尽头</br>\n才发现 笑着哭 最痛</br>\n当一阵风吹来 风筝飞上天空</br>\n为了你而祈祷 而祝福 而感动</br>\n终于你身影消失在 人海尽头</br>\n才发现 笑着哭 最痛</br>\n哦……</br>\n如果我爱上 你的笑容</br>\n要怎么收藏 要怎么拥有</br>\n如果你快乐 再不是为我</br>\n会不会放手 其实才是拥有</br>\n知足的快乐</br>\n叫我忍受心痛</br>\n知足的快乐</br>\n叫我忍受心痛</br>","source":"_posts/学习使我快乐.md","raw":"---\ntitle: 学习使我快乐\ndate: 2019-06-25 13:46:48\ntags:\n    -五月天\n---\n## 知足\n怎么去拥有 一道彩虹</br> \n怎么去拥抱 一夏天的风</br>\n天上的星星 笑地上的人</br>\n总是不能懂 不能觉得足够</br>\n如果我爱上 你的笑容</br>\n要怎么收藏 要怎么拥有</br>\n如果你快乐 不是为我</br>\n会不会放手 其实才是拥有</br>\n当一阵风吹来 风筝飞上天空</br>\n为了你而祈祷 而祝福 而感动</br>\n终于你身影消失在 人海尽头</br>\n才发现 笑着哭 最痛</br>\n那天你和我 那个山丘</br>\n那样的唱着 那一年的歌</br>\n那样的回忆 那么足够</br>\n足够我天天 都品尝着寂寞</br>\n当一阵风吹来 风筝飞上天空</br>\n为了你而祈祷 而祝福 而感动</br>\n终于你身影消失在 人海尽头</br>\n才发现 笑着哭 最痛</br>\n当一阵风吹来 风筝飞上天空</br>\n为了你而祈祷 而祝福 而感动</br>\n终于你身影消失在 人海尽头</br>\n才发现 笑着哭 最痛</br>\n哦……</br>\n如果我爱上 你的笑容</br>\n要怎么收藏 要怎么拥有</br>\n如果你快乐 再不是为我</br>\n会不会放手 其实才是拥有</br>\n知足的快乐</br>\n叫我忍受心痛</br>\n知足的快乐</br>\n叫我忍受心痛</br>","slug":"学习使我快乐","published":1,"updated":"2019-07-02T10:58:58.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxoddk2q000hls74vrxqy5gr","content":"<h2 id=\"知足\"><a href=\"#知足\" class=\"headerlink\" title=\"知足\"></a>知足</h2><p>怎么去拥有 一道彩虹<br><br>怎么去拥抱 一夏天的风<br><br>天上的星星 笑地上的人<br><br>总是不能懂 不能觉得足够<br><br>如果我爱上 你的笑容<br><br>要怎么收藏 要怎么拥有<br><br>如果你快乐 不是为我<br><br>会不会放手 其实才是拥有<br><br>当一阵风吹来 风筝飞上天空<br><br>为了你而祈祷 而祝福 而感动<br><br>终于你身影消失在 人海尽头<br><br>才发现 笑着哭 最痛<br><br>那天你和我 那个山丘<br><br>那样的唱着 那一年的歌<br><br>那样的回忆 那么足够<br><br>足够我天天 都品尝着寂寞<br><br>当一阵风吹来 风筝飞上天空<br><br>为了你而祈祷 而祝福 而感动<br><br>终于你身影消失在 人海尽头<br><br>才发现 笑着哭 最痛<br><br>当一阵风吹来 风筝飞上天空<br><br>为了你而祈祷 而祝福 而感动<br><br>终于你身影消失在 人海尽头<br><br>才发现 笑着哭 最痛<br><br>哦……<br><br>如果我爱上 你的笑容<br><br>要怎么收藏 要怎么拥有<br><br>如果你快乐 再不是为我<br><br>会不会放手 其实才是拥有<br><br>知足的快乐<br><br>叫我忍受心痛<br><br>知足的快乐<br><br>叫我忍受心痛<br></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"知足\"><a href=\"#知足\" class=\"headerlink\" title=\"知足\"></a>知足</h2><p>怎么去拥有 一道彩虹<br><br>怎么去拥抱 一夏天的风<br><br>天上的星星 笑地上的人<br><br>总是不能懂 不能觉得足够<br><br>如果我爱上 你的笑容<br><br>要怎么收藏 要怎么拥有<br><br>如果你快乐 不是为我<br><br>会不会放手 其实才是拥有<br><br>当一阵风吹来 风筝飞上天空<br><br>为了你而祈祷 而祝福 而感动<br><br>终于你身影消失在 人海尽头<br><br>才发现 笑着哭 最痛<br><br>那天你和我 那个山丘<br><br>那样的唱着 那一年的歌<br><br>那样的回忆 那么足够<br><br>足够我天天 都品尝着寂寞<br><br>当一阵风吹来 风筝飞上天空<br><br>为了你而祈祷 而祝福 而感动<br><br>终于你身影消失在 人海尽头<br><br>才发现 笑着哭 最痛<br><br>当一阵风吹来 风筝飞上天空<br><br>为了你而祈祷 而祝福 而感动<br><br>终于你身影消失在 人海尽头<br><br>才发现 笑着哭 最痛<br><br>哦……<br><br>如果我爱上 你的笑容<br><br>要怎么收藏 要怎么拥有<br><br>如果你快乐 再不是为我<br><br>会不会放手 其实才是拥有<br><br>知足的快乐<br><br>叫我忍受心痛<br><br>知足的快乐<br><br>叫我忍受心痛<br></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjxoddk2a0000ls74w7su27qe","tag_id":"cjxoddk2g0004ls74jr25sk59","_id":"cjxoddk2l0009ls748bx7k3ha"},{"post_id":"cjxoddk2e0002ls74a7s4p0g8","tag_id":"cjxoddk2k0008ls74o3mxi6u5","_id":"cjxoddk2o000els74p9jrq1pp"},{"post_id":"cjxoddk2h0005ls74f9mqy283","tag_id":"cjxoddk2n000cls740rdbq6nv","_id":"cjxoddk2r000ils74l1wpk04y"},{"post_id":"cjxoddk2i0006ls744vpmfsaf","tag_id":"cjxoddk2q000gls74qwbnxld8","_id":"cjxoddk2s000kls74yzu9xj05"},{"post_id":"cjxoddk2k0007ls74waseu018","tag_id":"cjxoddk2s000jls74x3bg7uyj","_id":"cjxoddk2s000mls74t86u4spa"},{"post_id":"cjxoddk2l000als74z406yz7h","tag_id":"cjxoddk2s000lls74h24xavz2","_id":"cjxoddk2t000ols74arod8ict"},{"post_id":"cjxoddk2m000bls74hq4yg38q","tag_id":"cjxoddk2s000nls74qfow6bss","_id":"cjxoddk2t000qls74pr7rlyep"},{"post_id":"cjxoddk2p000fls74fdytbkwl","tag_id":"cjxoddk2t000pls74b150njhw","_id":"cjxoddk2t000sls74itglf7ee"},{"post_id":"cjxoddk2q000hls74vrxqy5gr","tag_id":"cjxoddk2t000rls74kyabg43t","_id":"cjxoddk2t000tls74hgwkc9iv"}],"Tag":[{"name":"--linux","_id":"cjxoddk2g0004ls74jr25sk59"},{"name":"-git","_id":"cjxoddk2k0008ls74o3mxi6u5"},{"name":"-中文乱码","_id":"cjxoddk2n000cls740rdbq6nv"},{"name":"-多数据源 -分库分表","_id":"cjxoddk2q000gls74qwbnxld8"},{"name":"-NGINX","_id":"cjxoddk2s000jls74x3bg7uyj"},{"name":"-多数据源","_id":"cjxoddk2s000lls74h24xavz2"},{"name":"-Windows批处理","_id":"cjxoddk2s000nls74qfow6bss"},{"name":"springboot混淆","_id":"cjxoddk2t000pls74b150njhw"},{"name":"-五月天","_id":"cjxoddk2t000rls74kyabg43t"}]}}